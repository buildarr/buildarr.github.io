{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Buildarr! # This is Buildarr, a solution to automating deployment and configuration of your *Arr stack. Have you spent many hours getting your setup for one or more linked Sonarr/Radarr/Prowlarr instances just right, only to have no way to reproduce this setup apart from UI screenshots and database backups? Buildarr aims to alleviate those concerns by using a static configuration file to store settings for all your *Arr applications, and automatically configure them as defined. It can just once using an ad-hoc user command, or as a service to keep your application configurations up to date. Buildarr runs idempotently, only making changes to your instance if they are required. It can also automatically retrieve optimal configuration values from TRaSH-Guides for many things such as quality definitions and release profiles, so not only is there no need to manually input them into your configuration, Buildarr will also continually keep them up to date for you. Similar projects # Buildarr attempts to fulfill some of the needs of users of the following projects. Bobarr - An all-in-one package containing Sonarr, Radarr, Jackett etc Still requires manual configuration of many components, and there is no way to store the configuration as code. Flemmarr - Uses API parameters stored in YAML configuration files to push configuration changes to Sonarr, Radarr, Lidarr etc Requires users to comprehensively learn how the APIs of each application work, going through often poor documentation. Since the values are machine-oriented, configuration files are difficult to write and understand. Does not support idempotent updates ( at this time ). Recyclarr - Automatically syncs recommended TRaSH-Guides settings to Sonarr/Radarr instances Buildarr has support for this built-in, and in the case of Sonarr release profiles, supports the same filtering syntax. Installation # Buildarr is available on Docker Hub as a Docker image. $ docker pull callum027/buildarr:latest Buildarr can also be installed using pip . Python 3.8 or later is required. Windows is natively supported. $ python3 -m venv buildarr-venv $ . buildarr-venv/bin/activate $ python3 -m pip install buildarr You can deploy Buildarr as a service within a Docker Compose environment, or use configuration management tools such as Ansible to automatically deploy it. For more information, check the installation instructions . Plugins # Buildarr supports external plugins to allow additional applications to be supported. To allow for rapid development of both the plugin and the API, however, the one currently existing plugin, buildarr-sonarr , is vendored in as buildarr.plugins.sonarr . At the time of this release the following plugins are available: buildarr-sonarr - Sonarr PVR for TV shows (V3 only for now) For more information on installing plugins and configuring the vendored plugins, check the plugin documentation . Configuration # Buildarr uses YAML as its configuration file format. By default, Buildarr looks for buildarr.yml in the current directory. It contains not only the settings for Buildarr itself, but also the application instances to be managed. Multiple instances of the same application type can be defined (for example, a common use case would be separate Sonarr instances for HD TV shows, 4K TV shows, and anime). Any configuration on the remote instance not explicitly defined in the Buildarr configuration is not modified. For more information on how Buildarr uses configuration and how to configure Buildarr itself, check the configuration documentation . Here is an example of a simple Buildarr configuration that changes some settings on a Sonarr instance: --- # buildarr.yml # Buildarr example configuration file. # Buildarr configuration (all settings have sane default values) buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" # Sonarr instance configuration sonarr: hostname: \"localhost\" port: 8989 protocol: \"http\" settings: # General settings (all options supported except for changing the API key) general: host: instance_name: \"Sonarr (Buildarr Example)\" If you have an already configured application instance, its configuration can be dumped. For example, to get the configuration of a Sonarr instance, this can be done using the following command (Buildarr will prompt for your API key): $ docker run -it --rm callum027/buildarr:latest sonarr dump-config http://sonarr.example.com:8989 Once you have this configuration, you can insert it into buildarr.yml and ensure this configuration is maintained. Running Buildarr # Once you have a valid configuration file, you can try Buildarr on your local machine using the Docker image. The following command will mount the current folder into the Docker container so buildarr.yml can be read, and start Buildarr in daemon mode. $ docker run -d --name buildarr -v $(pwd):/config -e PUID=$(id -u) -e PGID=$(id -g) callum027/buildarr:latest If installed using pip , simply run the buildarr CLI command. $ buildarr daemon On startup, Buildarr daemon will do an initial sync with the defined instances, updating their configuration immediately. After this initial run, Buildarr will wake up at the scheduled times to periodically run updates as required. 2023-02-11 13:43:48,890 buildarr:4308 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 13:43:48,891 buildarr:4308 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 13:43:48,898 buildarr:4308 buildarr.main [INFO] Finished loading configuration file 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] Daemon configuration: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Watch configuration files: Yes 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Configuration files to watch: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - /config/buildarr.yml 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Update at: 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Monday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Tuesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Wednesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Thursday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Friday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Saturday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] - Sunday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] Applying initial configuration 2023-02-11 13:43:48,904 buildarr:4308 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 13:43:48,906 buildarr:4308 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 13:43:48,907 buildarr:4308 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 13:43:48,909 buildarr:4308 buildarr.main [INFO] Finished loading secrets file 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 13:43:48,911 buildarr:4308 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 13:43:48,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 13:43:49,870 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 13:43:49,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 13:43:49,954 buildarr:4308 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Buildarr Example)' 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration 2023-02-11 13:43:50,178 buildarr:4308 buildarr.main [INFO] Finished applying initial configuration 2023-02-11 13:43:50,179 buildarr:4308 buildarr.main [INFO] Scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] Finished scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] The next run will be at 2023-02-12 03:00 2023-02-11 13:43:50,181 buildarr:4308 buildarr.main [INFO] Setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Setting up signal handlers 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up signal handlers 2023-02-11 13:43:50,184 buildarr:4308 buildarr.main [INFO] Buildarr ready. For more information on how to interfact with Buildarr, check the usage documentation . To-do list # Add a dry-run mode for testing configurations Test updates for all available attributes in the existing Sonarr plugin Unit tests and code coverage Split Sonarr plugin to its own repository Create plugins for the following applications: Sonarr V4 Radarr Prowlarr Bazarr FlareSolverr Unmanic Tdarr (maybe) Unpackerr Lidarr Instance linking (e.g. Prowlarr-to-Sonarr/Radarr) and dependency resolution Stable plugin API between major versions Auto-generation of Docker Compose environment files reflecting the Buildarr configuration Contributions # Buildarr is still early in development, and even currently implemented features still require testing and fixing. There are so many possible configurations to cover that I simply cannot feasibly test every feature at this time. If you encounter an issue or error while using Buildarr, please do a Buildarr ad-hoc run with verbose log output by executing buildarr --log-level DEBUG run and making an issue on our GitHub repository explaining the issue and attaching the output. (Please ensure that any API keys or other sensitive information are obfuscated before submitting.) $ docker run -d --name buildarr -v $(pwd):/config -e PUID=$(id -u) -e PGID=$(id -g) callum027/buildarr:latest --log-level DEBUG run For developers looking to make a contribution to this project, thank you! Documentation of the internal APIs is still in the works, so for now, the best way to learn how Buildarr works is to clone the project and have a look at the comments and docstrings. Pre-commit hooks are configured for this project. In this pre-commit hook, black , flake8 , isort and mypy are run to automatically format source files, ensure grammatical correctness and variable type consistency. To enable them, ensure the pre-commit Python package is installed in your local environment and run the following command: $ pre-commit install Poetry is used to manage the Python package definition and dependencies in this project. Pull requests for Buildarr itself and the currently vendored plugins are welcome. If you're looking to develop a new plugin for adding support for a new application, please develop it as a new package and configure entry points in your Python package definitions to allow Buildarr to load your plugin. Setuptools setup.py entry point definition example: from setuptools import setup setup( # ..., entry_points={ \"buildarr.plugins\": [ \"example = buildarr_example.plugin:ExamplePlugin\", ], }, ) Setuptools setup.cfg entry point definition example: [options.entry_points] buildarr.plugins = example = buildarr_example.plugin:ExamplePlugin Setuptools pyproject.toml entry point definition example: [project.entry-points.\"buildarr.plugins\"] \"example\" = \"buildarr_example.plugin:ExamplePlugin\" Poetry plugin definition example: [tool.poetry.plugins.\"buildarr.plugins\"] \"example\" = \"buildarr_example.plugin:ExamplePlugin\"","title":"Home"},{"location":"#welcome-to-buildarr","text":"This is Buildarr, a solution to automating deployment and configuration of your *Arr stack. Have you spent many hours getting your setup for one or more linked Sonarr/Radarr/Prowlarr instances just right, only to have no way to reproduce this setup apart from UI screenshots and database backups? Buildarr aims to alleviate those concerns by using a static configuration file to store settings for all your *Arr applications, and automatically configure them as defined. It can just once using an ad-hoc user command, or as a service to keep your application configurations up to date. Buildarr runs idempotently, only making changes to your instance if they are required. It can also automatically retrieve optimal configuration values from TRaSH-Guides for many things such as quality definitions and release profiles, so not only is there no need to manually input them into your configuration, Buildarr will also continually keep them up to date for you.","title":"Welcome to Buildarr!"},{"location":"#similar-projects","text":"Buildarr attempts to fulfill some of the needs of users of the following projects. Bobarr - An all-in-one package containing Sonarr, Radarr, Jackett etc Still requires manual configuration of many components, and there is no way to store the configuration as code. Flemmarr - Uses API parameters stored in YAML configuration files to push configuration changes to Sonarr, Radarr, Lidarr etc Requires users to comprehensively learn how the APIs of each application work, going through often poor documentation. Since the values are machine-oriented, configuration files are difficult to write and understand. Does not support idempotent updates ( at this time ). Recyclarr - Automatically syncs recommended TRaSH-Guides settings to Sonarr/Radarr instances Buildarr has support for this built-in, and in the case of Sonarr release profiles, supports the same filtering syntax.","title":"Similar projects"},{"location":"#installation","text":"Buildarr is available on Docker Hub as a Docker image. $ docker pull callum027/buildarr:latest Buildarr can also be installed using pip . Python 3.8 or later is required. Windows is natively supported. $ python3 -m venv buildarr-venv $ . buildarr-venv/bin/activate $ python3 -m pip install buildarr You can deploy Buildarr as a service within a Docker Compose environment, or use configuration management tools such as Ansible to automatically deploy it. For more information, check the installation instructions .","title":"Installation"},{"location":"#plugins","text":"Buildarr supports external plugins to allow additional applications to be supported. To allow for rapid development of both the plugin and the API, however, the one currently existing plugin, buildarr-sonarr , is vendored in as buildarr.plugins.sonarr . At the time of this release the following plugins are available: buildarr-sonarr - Sonarr PVR for TV shows (V3 only for now) For more information on installing plugins and configuring the vendored plugins, check the plugin documentation .","title":"Plugins"},{"location":"#configuration","text":"Buildarr uses YAML as its configuration file format. By default, Buildarr looks for buildarr.yml in the current directory. It contains not only the settings for Buildarr itself, but also the application instances to be managed. Multiple instances of the same application type can be defined (for example, a common use case would be separate Sonarr instances for HD TV shows, 4K TV shows, and anime). Any configuration on the remote instance not explicitly defined in the Buildarr configuration is not modified. For more information on how Buildarr uses configuration and how to configure Buildarr itself, check the configuration documentation . Here is an example of a simple Buildarr configuration that changes some settings on a Sonarr instance: --- # buildarr.yml # Buildarr example configuration file. # Buildarr configuration (all settings have sane default values) buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" # Sonarr instance configuration sonarr: hostname: \"localhost\" port: 8989 protocol: \"http\" settings: # General settings (all options supported except for changing the API key) general: host: instance_name: \"Sonarr (Buildarr Example)\" If you have an already configured application instance, its configuration can be dumped. For example, to get the configuration of a Sonarr instance, this can be done using the following command (Buildarr will prompt for your API key): $ docker run -it --rm callum027/buildarr:latest sonarr dump-config http://sonarr.example.com:8989 Once you have this configuration, you can insert it into buildarr.yml and ensure this configuration is maintained.","title":"Configuration"},{"location":"#running-buildarr","text":"Once you have a valid configuration file, you can try Buildarr on your local machine using the Docker image. The following command will mount the current folder into the Docker container so buildarr.yml can be read, and start Buildarr in daemon mode. $ docker run -d --name buildarr -v $(pwd):/config -e PUID=$(id -u) -e PGID=$(id -g) callum027/buildarr:latest If installed using pip , simply run the buildarr CLI command. $ buildarr daemon On startup, Buildarr daemon will do an initial sync with the defined instances, updating their configuration immediately. After this initial run, Buildarr will wake up at the scheduled times to periodically run updates as required. 2023-02-11 13:43:48,890 buildarr:4308 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 13:43:48,891 buildarr:4308 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 13:43:48,898 buildarr:4308 buildarr.main [INFO] Finished loading configuration file 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] Daemon configuration: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Watch configuration files: Yes 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Configuration files to watch: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - /config/buildarr.yml 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Update at: 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Monday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Tuesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Wednesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Thursday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Friday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Saturday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] - Sunday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] Applying initial configuration 2023-02-11 13:43:48,904 buildarr:4308 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 13:43:48,906 buildarr:4308 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 13:43:48,907 buildarr:4308 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 13:43:48,909 buildarr:4308 buildarr.main [INFO] Finished loading secrets file 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 13:43:48,911 buildarr:4308 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 13:43:48,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 13:43:49,870 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 13:43:49,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 13:43:49,954 buildarr:4308 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Buildarr Example)' 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration 2023-02-11 13:43:50,178 buildarr:4308 buildarr.main [INFO] Finished applying initial configuration 2023-02-11 13:43:50,179 buildarr:4308 buildarr.main [INFO] Scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] Finished scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] The next run will be at 2023-02-12 03:00 2023-02-11 13:43:50,181 buildarr:4308 buildarr.main [INFO] Setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Setting up signal handlers 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up signal handlers 2023-02-11 13:43:50,184 buildarr:4308 buildarr.main [INFO] Buildarr ready. For more information on how to interfact with Buildarr, check the usage documentation .","title":"Running Buildarr"},{"location":"#to-do-list","text":"Add a dry-run mode for testing configurations Test updates for all available attributes in the existing Sonarr plugin Unit tests and code coverage Split Sonarr plugin to its own repository Create plugins for the following applications: Sonarr V4 Radarr Prowlarr Bazarr FlareSolverr Unmanic Tdarr (maybe) Unpackerr Lidarr Instance linking (e.g. Prowlarr-to-Sonarr/Radarr) and dependency resolution Stable plugin API between major versions Auto-generation of Docker Compose environment files reflecting the Buildarr configuration","title":"To-do list"},{"location":"#contributions","text":"Buildarr is still early in development, and even currently implemented features still require testing and fixing. There are so many possible configurations to cover that I simply cannot feasibly test every feature at this time. If you encounter an issue or error while using Buildarr, please do a Buildarr ad-hoc run with verbose log output by executing buildarr --log-level DEBUG run and making an issue on our GitHub repository explaining the issue and attaching the output. (Please ensure that any API keys or other sensitive information are obfuscated before submitting.) $ docker run -d --name buildarr -v $(pwd):/config -e PUID=$(id -u) -e PGID=$(id -g) callum027/buildarr:latest --log-level DEBUG run For developers looking to make a contribution to this project, thank you! Documentation of the internal APIs is still in the works, so for now, the best way to learn how Buildarr works is to clone the project and have a look at the comments and docstrings. Pre-commit hooks are configured for this project. In this pre-commit hook, black , flake8 , isort and mypy are run to automatically format source files, ensure grammatical correctness and variable type consistency. To enable them, ensure the pre-commit Python package is installed in your local environment and run the following command: $ pre-commit install Poetry is used to manage the Python package definition and dependencies in this project. Pull requests for Buildarr itself and the currently vendored plugins are welcome. If you're looking to develop a new plugin for adding support for a new application, please develop it as a new package and configure entry points in your Python package definitions to allow Buildarr to load your plugin. Setuptools setup.py entry point definition example: from setuptools import setup setup( # ..., entry_points={ \"buildarr.plugins\": [ \"example = buildarr_example.plugin:ExamplePlugin\", ], }, ) Setuptools setup.cfg entry point definition example: [options.entry_points] buildarr.plugins = example = buildarr_example.plugin:ExamplePlugin Setuptools pyproject.toml entry point definition example: [project.entry-points.\"buildarr.plugins\"] \"example\" = \"buildarr_example.plugin:ExamplePlugin\" Poetry plugin definition example: [tool.poetry.plugins.\"buildarr.plugins\"] \"example\" = \"buildarr_example.plugin:ExamplePlugin\"","title":"Contributions"},{"location":"configuration/","text":"Configuring Buildarr # Buildarr uses YAML as its configuration file format. By default, Buildarr looks for buildarr.yml in the current directory. It contains not only the settings for Buildarr itself, but also the application instances to be managed. When an update run of the managed instances is performed, Buildarr will check the remote instances against this configuration, and if there are any differences, Buildarr will update the instance to match the configuration. Here is an abbreviated example of a buildarr.yml where Buildarr is managing a single Sonarr instance. --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: host: \"sonarr.example.com\" port: 8989 protocol: \"http\" settings: ... Multiple configuration files # Using the includes block, multiple configuration files can be included and read from one buildarr.yml file. Nested inclusion is allowed (included files can include other files). All the loaded configuration files are merged into a single structure in a breadth-first fashion. If any configuration attributes in files overlap, the last-read value will take precedence. Note that any overlapping attributes that are lists will be overwritten, rather than combined. Overly complicated include structures should be avoided, to ensure legibility of the configuration. buildarr.yml : --- includes: - sonarr1.yml - sonarr2.yml buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: # Configuration common to all Sonarr instances. settings: ... sonarr1.yml : --- sonarr: instances: # Sonarr instance 1 connection information and configuration. sonarr1: host: \"sonarr1.example.com\" port: 8989 protocol: \"http\" settings: ... sonarr2.yml : --- sonarr: instances: # Sonarr instance 2 connection information and configuration. sonarr2: host: \"sonarr2.example.com\" port: 8989 protocol: \"http\" settings: ... Multiple instances of the same type # Using the instances attribute, multiple instances of the same type can be administered using a single Buildarr instance. Globally set configuration will apply to all defined instances, and settings defined under a single instance only apply to that instance. sonarr: # Configuration common to all Sonarr instances. settings: ... instances: # Sonarr instance 1 connection information and configuration. sonarr1: host: \"sonarr1.example.com\" port: 8989 protocol: \"http\" settings: ... # Sonarr instance 1 connection information and configuration. sonarr2: host: \"sonarr2.example.com\" port: 8989 protocol: \"http\" settings: ... How does configuration get pushed to instances? # Buildarr operates on a principle of \"don't touch what is not explicitly defined\", and idempotent operation. Buildarr downloads the active configuration of a remote instance, and compares it to the configuration file. If a configuration value is not explicitly defined in the Buildarr configuration, it is not updated. If the explicitly set local configuration value matches the remote instance, it is not updated (unless other parameters set using the same API command have been changed). Only if a configuration update is available will it be pushed to the remote instance. Buildarr Settings # Bases: ConfigBase The buildarr configuration section is used to configure the behaviour of Buildarr itself. Some of the configuration options set here may be overridden on the command line. Note that the log level cannot be set within buildarr.yml , as logging starts before the configuration is loaded. The log level can be set using the $BUILDARR_LOG_LEVEL environment variable, or using the --log-level command line argument. --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" secrets_file_path: \"secrets.json\" watch_config: bool = False class-attribute # When set to true , the Buildarr daemon will watch the loaded configuration files for changes, and reload them and update remote instances if they are changed. Sending SIGHUP to the Buildarr daemon process on supported operating systems will also perform this operation, whether watch_config is enabled or not. This configuration option can be overridden using the --watch-config command line argument. update_days: Set[UpdateDay] = set(day for day in UpdateDay) class-attribute # The days Buildarr daemon will run update operations on. By default, updates are scheduled to run every day. Days are specified as a list of case-insensitive strings, in English. The days do not need to be in order. buildarr: update_days: - \"monday\" - \"wednesday\" - \"friday\" This configuration option can be overridden using the --update-days command line argument. update_times: Set[time] = {time(hour=3)} class-attribute # The times Buildarr daemon will run update operations on each scheduled day. By default, updates are scheduled to run at 3:00am local time. Times are specified in the HH:MM format, in 24-hour time. The times do not need to be in order. Days are specified as a list of case-insensitive strings, in English. The days do not need to be in order. buildarr: update_times: - \"06:00\" - \"12:00\" - \"18:00\" - \"00:00\" This configuration option can be overridden using the --update-times command line argument. secrets_file_path: Path = Path('secrets.json') class-attribute # Path to store the Buildarr instance secrets file. trash_metadata_download_url: HttpUrl = 'https://github.com/TRaSH-/Guides/archive/refs/heads/master.zip' class-attribute # URL to download the latest TRaSH-Guides metadata from. trash_metadata_dir_prefix: Path = Path('Guides-master') class-attribute # Metadata directory name within the downloaded ZIP file.","title":"Configuration"},{"location":"configuration/#configuring-buildarr","text":"Buildarr uses YAML as its configuration file format. By default, Buildarr looks for buildarr.yml in the current directory. It contains not only the settings for Buildarr itself, but also the application instances to be managed. When an update run of the managed instances is performed, Buildarr will check the remote instances against this configuration, and if there are any differences, Buildarr will update the instance to match the configuration. Here is an abbreviated example of a buildarr.yml where Buildarr is managing a single Sonarr instance. --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: host: \"sonarr.example.com\" port: 8989 protocol: \"http\" settings: ...","title":"Configuring Buildarr"},{"location":"configuration/#multiple-configuration-files","text":"Using the includes block, multiple configuration files can be included and read from one buildarr.yml file. Nested inclusion is allowed (included files can include other files). All the loaded configuration files are merged into a single structure in a breadth-first fashion. If any configuration attributes in files overlap, the last-read value will take precedence. Note that any overlapping attributes that are lists will be overwritten, rather than combined. Overly complicated include structures should be avoided, to ensure legibility of the configuration. buildarr.yml : --- includes: - sonarr1.yml - sonarr2.yml buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: # Configuration common to all Sonarr instances. settings: ... sonarr1.yml : --- sonarr: instances: # Sonarr instance 1 connection information and configuration. sonarr1: host: \"sonarr1.example.com\" port: 8989 protocol: \"http\" settings: ... sonarr2.yml : --- sonarr: instances: # Sonarr instance 2 connection information and configuration. sonarr2: host: \"sonarr2.example.com\" port: 8989 protocol: \"http\" settings: ...","title":"Multiple configuration files"},{"location":"configuration/#multiple-instances-of-the-same-type","text":"Using the instances attribute, multiple instances of the same type can be administered using a single Buildarr instance. Globally set configuration will apply to all defined instances, and settings defined under a single instance only apply to that instance. sonarr: # Configuration common to all Sonarr instances. settings: ... instances: # Sonarr instance 1 connection information and configuration. sonarr1: host: \"sonarr1.example.com\" port: 8989 protocol: \"http\" settings: ... # Sonarr instance 1 connection information and configuration. sonarr2: host: \"sonarr2.example.com\" port: 8989 protocol: \"http\" settings: ...","title":"Multiple instances of the same type"},{"location":"configuration/#how-does-configuration-get-pushed-to-instances","text":"Buildarr operates on a principle of \"don't touch what is not explicitly defined\", and idempotent operation. Buildarr downloads the active configuration of a remote instance, and compares it to the configuration file. If a configuration value is not explicitly defined in the Buildarr configuration, it is not updated. If the explicitly set local configuration value matches the remote instance, it is not updated (unless other parameters set using the same API command have been changed). Only if a configuration update is available will it be pushed to the remote instance.","title":"How does configuration get pushed to instances?"},{"location":"configuration/#buildarr-settings","text":"Bases: ConfigBase The buildarr configuration section is used to configure the behaviour of Buildarr itself. Some of the configuration options set here may be overridden on the command line. Note that the log level cannot be set within buildarr.yml , as logging starts before the configuration is loaded. The log level can be set using the $BUILDARR_LOG_LEVEL environment variable, or using the --log-level command line argument. --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" secrets_file_path: \"secrets.json\"","title":"Buildarr Settings"},{"location":"configuration/#buildarr.config.BuildarrConfig.watch_config","text":"When set to true , the Buildarr daemon will watch the loaded configuration files for changes, and reload them and update remote instances if they are changed. Sending SIGHUP to the Buildarr daemon process on supported operating systems will also perform this operation, whether watch_config is enabled or not. This configuration option can be overridden using the --watch-config command line argument.","title":"watch_config"},{"location":"configuration/#buildarr.config.BuildarrConfig.update_days","text":"The days Buildarr daemon will run update operations on. By default, updates are scheduled to run every day. Days are specified as a list of case-insensitive strings, in English. The days do not need to be in order. buildarr: update_days: - \"monday\" - \"wednesday\" - \"friday\" This configuration option can be overridden using the --update-days command line argument.","title":"update_days"},{"location":"configuration/#buildarr.config.BuildarrConfig.update_times","text":"The times Buildarr daemon will run update operations on each scheduled day. By default, updates are scheduled to run at 3:00am local time. Times are specified in the HH:MM format, in 24-hour time. The times do not need to be in order. Days are specified as a list of case-insensitive strings, in English. The days do not need to be in order. buildarr: update_times: - \"06:00\" - \"12:00\" - \"18:00\" - \"00:00\" This configuration option can be overridden using the --update-times command line argument.","title":"update_times"},{"location":"configuration/#buildarr.config.BuildarrConfig.secrets_file_path","text":"Path to store the Buildarr instance secrets file.","title":"secrets_file_path"},{"location":"configuration/#buildarr.config.BuildarrConfig.trash_metadata_download_url","text":"URL to download the latest TRaSH-Guides metadata from.","title":"trash_metadata_download_url"},{"location":"configuration/#buildarr.config.BuildarrConfig.trash_metadata_dir_prefix","text":"Metadata directory name within the downloaded ZIP file.","title":"trash_metadata_dir_prefix"},{"location":"installation/","text":"Installing and running Buildarr # Many users will already have configuraton management automatically deploying their *Arr stacks, and Buildarr is designed to seamlessly integrate into existing setups. Standalone application # Buildarr can be installed as a standalone Python application using pip . Python 3.8 or later is required. Buildarr also runs natively on Windows. As Buildarr can be extended with external plugins, it is recommended to create a dedicated virtual environment to install Buildarr. $ python3 -m venv buildarr-venv $ . buildarr-venv/bin/activate $ python3 -m pip install buildarr Once installed and a configuration file has been created, you can execute an update of your stack by running the following command. $ buildarr run Buildar can also be run as a daemon to schedule periodic updates of your stack. $ buildarr daemon Docker # Buildarr is available on Docker Hub as a Docker image. $ docker pull callum027/buildarr:latest Once you have a configuration file, create a folder to store the configuration and auto-generated secrets files to mount into the Docker container. As API keys and login credentials are to be stored here, they should have strict permissions set, with ownership exclusively set to the PUID (process user ID) and PGID (process group ID) to be configured on the container. $ mkdir --mode=700 /path/to/config $ sudo chown -R <PUID>:<PGID> /path/to/config You can start a Buildarr container by calling docker run , bind mounting the configuration directory as /config . By default, the Buildarr Docker container runs in daemon mode. $ docker run -d --name buildarr --restart=always -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest For configuration testing purposes, you can call buildarr run using the Docker image to run an update of your stack and exit. $ docker run --rm -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest run Docker Compose # Buildarr can be integrated into a Docker Compose environment containing your *Arr stack instances. depends_on should be used to ensure Docker Compose services are started in the correct order. Here is an example of a docker-compose.yml file with Buildarr managing one Sonarr instance. version: \"3.7\" services: sonarr: image: linuxserver/sonarr:3.0.9 container_name: sonarr restart: always ports: - 127.0.0.1:8989:8989 volumes: - ./sonarr:/config - /path/to/downloads:/downloads - /path/to/videos:/videos environment: TZ: Pacific/Auckland PUID: \"1000\" PGID: \"1000\" buildarr: image: callum027/buildarr:latest container_name: buildarr restart: always volumes: - ./buildarr:/config environment: TZ: Pacific/Auckland PUID: \"1000\" PGID: \"1000\" depends_on: - sonarr The corresponding instance configuration in buildarr.yml would look something like this: --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: # Configuration common to all Sonarr instances can be defined here. # settings: # ... instances: # Name of the instance as referred to by Buildarr. # Assign instance-specific configuration to it. sonarr: host: \"sonarr\" port: 8989 protocol: \"http\" # Define instance-specific Sonarr settings here. settings: ... Automatic deployment using Ansible # Buildarr is designed to be automatically deployed with your *Arr stack using tools such as Ansible . The easiest way to do this is to create a Docker Compose environment, and deploy it using the community.docker.docker_compose module. For applications that expose their API key on an unauthenticated endpoint (such as Sonarr V3), Buildarr will automatically retrieve and use the API keys. For these applications, no manual configuration is required once Buildarr and the managed applications are deployed. Applications that require an account to be setup (Sonarr V4) are not yet supported.","title":"Installation"},{"location":"installation/#installing-and-running-buildarr","text":"Many users will already have configuraton management automatically deploying their *Arr stacks, and Buildarr is designed to seamlessly integrate into existing setups.","title":"Installing and running Buildarr"},{"location":"installation/#standalone-application","text":"Buildarr can be installed as a standalone Python application using pip . Python 3.8 or later is required. Buildarr also runs natively on Windows. As Buildarr can be extended with external plugins, it is recommended to create a dedicated virtual environment to install Buildarr. $ python3 -m venv buildarr-venv $ . buildarr-venv/bin/activate $ python3 -m pip install buildarr Once installed and a configuration file has been created, you can execute an update of your stack by running the following command. $ buildarr run Buildar can also be run as a daemon to schedule periodic updates of your stack. $ buildarr daemon","title":"Standalone application"},{"location":"installation/#docker","text":"Buildarr is available on Docker Hub as a Docker image. $ docker pull callum027/buildarr:latest Once you have a configuration file, create a folder to store the configuration and auto-generated secrets files to mount into the Docker container. As API keys and login credentials are to be stored here, they should have strict permissions set, with ownership exclusively set to the PUID (process user ID) and PGID (process group ID) to be configured on the container. $ mkdir --mode=700 /path/to/config $ sudo chown -R <PUID>:<PGID> /path/to/config You can start a Buildarr container by calling docker run , bind mounting the configuration directory as /config . By default, the Buildarr Docker container runs in daemon mode. $ docker run -d --name buildarr --restart=always -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest For configuration testing purposes, you can call buildarr run using the Docker image to run an update of your stack and exit. $ docker run --rm -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest run","title":"Docker"},{"location":"installation/#docker-compose","text":"Buildarr can be integrated into a Docker Compose environment containing your *Arr stack instances. depends_on should be used to ensure Docker Compose services are started in the correct order. Here is an example of a docker-compose.yml file with Buildarr managing one Sonarr instance. version: \"3.7\" services: sonarr: image: linuxserver/sonarr:3.0.9 container_name: sonarr restart: always ports: - 127.0.0.1:8989:8989 volumes: - ./sonarr:/config - /path/to/downloads:/downloads - /path/to/videos:/videos environment: TZ: Pacific/Auckland PUID: \"1000\" PGID: \"1000\" buildarr: image: callum027/buildarr:latest container_name: buildarr restart: always volumes: - ./buildarr:/config environment: TZ: Pacific/Auckland PUID: \"1000\" PGID: \"1000\" depends_on: - sonarr The corresponding instance configuration in buildarr.yml would look something like this: --- buildarr: watch_config: true update_days: - \"monday\" - \"tuesday\" - \"wednesday\" - \"thursday\" - \"friday\" - \"saturday\" - \"sunday\" update_times: - \"03:00\" sonarr: # Configuration common to all Sonarr instances can be defined here. # settings: # ... instances: # Name of the instance as referred to by Buildarr. # Assign instance-specific configuration to it. sonarr: host: \"sonarr\" port: 8989 protocol: \"http\" # Define instance-specific Sonarr settings here. settings: ...","title":"Docker Compose"},{"location":"installation/#automatic-deployment-using-ansible","text":"Buildarr is designed to be automatically deployed with your *Arr stack using tools such as Ansible . The easiest way to do this is to create a Docker Compose environment, and deploy it using the community.docker.docker_compose module. For applications that expose their API key on an unauthenticated endpoint (such as Sonarr V3), Buildarr will automatically retrieve and use the API keys. For these applications, no manual configuration is required once Buildarr and the managed applications are deployed. Applications that require an account to be setup (Sonarr V4) are not yet supported.","title":"Automatic deployment using Ansible"},{"location":"release-notes/","text":"Release Notes # v0.1.1 - 2023-02-19 # This is a support release that fixes quality definition and backup configuration updates on remote Sonarr instances. A new Dummy plugin is now included with Buildarr, used for testing Buildarr and its plugin API, and also serves as a reference implementation for plugin developers. Other behind-the-scenes improvements include a refactor of the plugin API to allow for accurate type hints for configuration objects in secrets metadata classes (and vice versa), and numerous updates to the documentation to correct errors and add more detail. Added # Add a GitHub Action to push releases to PyPI ( #11 ) Create a buildarr-dummy plugin for testing the Buildarr plugin API ( #12 ) Changed # Fix $PUID and $GUID declarations ( b5110f3 ) Fix Docker Hub link ( be0ba12 ) Fix Docker volume mount docs ( fe328aa ) Fix troubleshooting Buildarr run docs ( e3b8833 ) Update dependency versions ( 3c19ede ) Fix debug Docker command in the GitHub Pages site ( 1e17741 ) Disable automatic dependency version updates ( c5c61cd ) Add missing download client documentation ( d07936f ) Fix incorrect config value definition in docs ( d1807a0 ) Fix to-do list indenting ( bca56e5 ) Add a link to the configuration documentation in README.md ( a5c0e6d ) Clean up and update Sonarr plugin internals ( #14 ) Fix updates to Sonarr quality definitions ( #15 ) Fix updates to Sonarr backup general settings ( #16 ) Removed # Removed buildarr.__version__ (please use importlib.metadata instead) v0.1.0 - 2023-02-11 # Release the initial version of Buildarr (v0.1.0).","title":"Release Notes"},{"location":"release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"release-notes/#v011-2023-02-19","text":"This is a support release that fixes quality definition and backup configuration updates on remote Sonarr instances. A new Dummy plugin is now included with Buildarr, used for testing Buildarr and its plugin API, and also serves as a reference implementation for plugin developers. Other behind-the-scenes improvements include a refactor of the plugin API to allow for accurate type hints for configuration objects in secrets metadata classes (and vice versa), and numerous updates to the documentation to correct errors and add more detail.","title":"v0.1.1 - 2023-02-19"},{"location":"release-notes/#added","text":"Add a GitHub Action to push releases to PyPI ( #11 ) Create a buildarr-dummy plugin for testing the Buildarr plugin API ( #12 )","title":"Added"},{"location":"release-notes/#changed","text":"Fix $PUID and $GUID declarations ( b5110f3 ) Fix Docker Hub link ( be0ba12 ) Fix Docker volume mount docs ( fe328aa ) Fix troubleshooting Buildarr run docs ( e3b8833 ) Update dependency versions ( 3c19ede ) Fix debug Docker command in the GitHub Pages site ( 1e17741 ) Disable automatic dependency version updates ( c5c61cd ) Add missing download client documentation ( d07936f ) Fix incorrect config value definition in docs ( d1807a0 ) Fix to-do list indenting ( bca56e5 ) Add a link to the configuration documentation in README.md ( a5c0e6d ) Clean up and update Sonarr plugin internals ( #14 ) Fix updates to Sonarr quality definitions ( #15 ) Fix updates to Sonarr backup general settings ( #16 )","title":"Changed"},{"location":"release-notes/#removed","text":"Removed buildarr.__version__ (please use importlib.metadata instead)","title":"Removed"},{"location":"release-notes/#v010-2023-02-11","text":"Release the initial version of Buildarr (v0.1.0).","title":"v0.1.0 - 2023-02-11"},{"location":"usage/","text":"Using Buildarr # Apart from the configuration, most of the interactions with Buildarr are done via the command line. There are three major operating modes for Buildarr: buildarr run - Manually perform an update run on one or more instances and exit buildarr daemon - Run Buildarr forever: perform an initial update run, and then schedule periodic updates buildarr <plugin-name> <command...> - Ad-hoc commands defined by any loaded plugins Note Every time Buildarr performs an update run, a metadata file called secrets.json is generated to store secrets information for every configured instance in the current directory. Ensure that you are running Buildarr in a folder that is not world-viewable, to avoid exposing secrets. If you are using the Docker image, ensure that the folder mounted as /config into the container has appropriately secure permissions. The verbosity of Buildarr logging output can be adjusted using the --log-level option. This option can also be set using the $BUILDARR_LOG_LEVEL environment variable. For more interactive documentation, you can pass --help to any individual command. $ buildarr --help Usage: buildarr [OPTIONS] COMMAND [ARGS]... Construct and configure Arr PVR stacks. Can be run as a daemon or as an ad-hoc command. Supports external plugins to allow for adding support for multiple types of instances. Options: -l, --log-level [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET] Buildarr logging system log level. Can also be set using the `$BUILDARR_LOG_LEVEL' environment variable. [default: INFO] --help Show this message and exit. Commands: daemon Run as a daemon and periodically update defined instances. run Configure instances defined in the Buildarr config file, and exit. sonarr Sonarr instance ad-hoc commands. Manual runs # Buildarr is capable of executing individual update runs, optionally passing an arbitrary configuration file to parse. This is useful to test configuration files before formally deploying Buildarr. $ buildarr run [/path/to/config.yml] If using Docker, the command would look something like this: $ docker run --rm -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest run [/config/buildarr.yml] Executing buildarr run will result in something resembling the following output. $ buildarr run 2023-02-11 14:50:49,356 buildarr:53612 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:50:49,357 buildarr:53612 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:50:49,374 buildarr:53612 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:50:49,378 buildarr:53612 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:50:49,380 buildarr:53612 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 14:50:49,381 buildarr:53612 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 14:50:49,383 buildarr:53612 buildarr.main [INFO] Finished loading secrets file 2023-02-11 14:50:49,384 buildarr:53612 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 14:50:49,384 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 14:50:49,385 buildarr:53612 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 14:50:49,386 buildarr:53612 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 14:50:49,388 buildarr:53612 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 14:50:49,886 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 14:50:49,931 buildarr:53612 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 14:50:50,321 buildarr:53612 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Example)' 2023-02-11 14:50:50,417 buildarr:53612 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 14:50:50,417 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration Of note in particular is the following line: 2023-02-11 14:50:50,321 buildarr:53612 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Example)' When Buildarr detects that the remote configuration differents from the locally defined configuration, the remote configuration will be updated. In this case, Buildarr detected that on the default instance configured in the Sonarr plugin, the configured GUI instance name is different from the locally defined value, so it updated the Sonarr instance to reflect the change. If the run fails for one reason or another, an error message (or exception traceback, depending on the error) will be logged and Buildarr with exit with a non-zero status. As a service (daemon mode) # This is the mode in which that Buildarr is intended to run in most cases. Buildarr will run as a daemon in the foreground. First, an initial update run is performed, similar to buildarr run . If the initial run is successful, Buildarr will then schedule updates to run at specific times according to the configuration, logging when the next scheduled run will occur. This is intended to be used to keep a *Arr stack continually up to date, particularly if it has TRaSH-Guides metadata configured. Every scheduled run, the TRaSH-Guides metadata is updated, ensuring that any instances using it will always be using the most up to date profiles. There are several options for changing how Buildarr daemon runs in the Buildarr configuration . 2023-02-11 13:43:48,890 buildarr:4308 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 13:43:48,891 buildarr:4308 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 13:43:48,898 buildarr:4308 buildarr.main [INFO] Finished loading configuration file 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] Daemon configuration: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Watch configuration files: Yes 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Configuration files to watch: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - /config/buildarr.yml 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Update at: 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Monday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Tuesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Wednesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Thursday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Friday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Saturday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] - Sunday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] Applying initial configuration 2023-02-11 13:43:48,904 buildarr:4308 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 13:43:48,906 buildarr:4308 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 13:43:48,907 buildarr:4308 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 13:43:48,909 buildarr:4308 buildarr.main [INFO] Finished loading secrets file 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 13:43:48,911 buildarr:4308 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 13:43:48,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 13:43:49,870 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 13:43:49,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 13:43:49,954 buildarr:4308 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Buildarr Example)' 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration 2023-02-11 13:43:50,178 buildarr:4308 buildarr.main [INFO] Finished applying initial configuration 2023-02-11 13:43:50,179 buildarr:4308 buildarr.main [INFO] Scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] Finished scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] The next run will be at 2023-02-12 03:00 2023-02-11 13:43:50,181 buildarr:4308 buildarr.main [INFO] Setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Setting up signal handlers 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up signal handlers 2023-02-11 13:43:50,184 buildarr:4308 buildarr.main [INFO] Buildarr ready. Buildarr daemon supports the following signal types: SIGTERM / SIGINT - Gracefully shutdown the Buildarr daemon. SIGHUP - Reload the Buildarr configuration file and perform an update run (the same action taken as when the watch_config option is enabled and Buildarr detects configuration changes). Not supported on Windows. Plugin-specific commands # Plugins can implement their own ad-hoc commands. These are mainly used for things such as dumping configuration from running instances. For more information, refer to the user guide for the respective plugin.","title":"Usage"},{"location":"usage/#using-buildarr","text":"Apart from the configuration, most of the interactions with Buildarr are done via the command line. There are three major operating modes for Buildarr: buildarr run - Manually perform an update run on one or more instances and exit buildarr daemon - Run Buildarr forever: perform an initial update run, and then schedule periodic updates buildarr <plugin-name> <command...> - Ad-hoc commands defined by any loaded plugins Note Every time Buildarr performs an update run, a metadata file called secrets.json is generated to store secrets information for every configured instance in the current directory. Ensure that you are running Buildarr in a folder that is not world-viewable, to avoid exposing secrets. If you are using the Docker image, ensure that the folder mounted as /config into the container has appropriately secure permissions. The verbosity of Buildarr logging output can be adjusted using the --log-level option. This option can also be set using the $BUILDARR_LOG_LEVEL environment variable. For more interactive documentation, you can pass --help to any individual command. $ buildarr --help Usage: buildarr [OPTIONS] COMMAND [ARGS]... Construct and configure Arr PVR stacks. Can be run as a daemon or as an ad-hoc command. Supports external plugins to allow for adding support for multiple types of instances. Options: -l, --log-level [CRITICAL|ERROR|WARNING|INFO|DEBUG|NOTSET] Buildarr logging system log level. Can also be set using the `$BUILDARR_LOG_LEVEL' environment variable. [default: INFO] --help Show this message and exit. Commands: daemon Run as a daemon and periodically update defined instances. run Configure instances defined in the Buildarr config file, and exit. sonarr Sonarr instance ad-hoc commands.","title":"Using Buildarr"},{"location":"usage/#manual-runs","text":"Buildarr is capable of executing individual update runs, optionally passing an arbitrary configuration file to parse. This is useful to test configuration files before formally deploying Buildarr. $ buildarr run [/path/to/config.yml] If using Docker, the command would look something like this: $ docker run --rm -v /path/to/config:/config -e PUID=<PUID> -e PGID=<PGID> callum027/buildarr:latest run [/config/buildarr.yml] Executing buildarr run will result in something resembling the following output. $ buildarr run 2023-02-11 14:50:49,356 buildarr:53612 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:50:49,357 buildarr:53612 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:50:49,374 buildarr:53612 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:50:49,378 buildarr:53612 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:50:49,380 buildarr:53612 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 14:50:49,381 buildarr:53612 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 14:50:49,383 buildarr:53612 buildarr.main [INFO] Finished loading secrets file 2023-02-11 14:50:49,384 buildarr:53612 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 14:50:49,384 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 14:50:49,385 buildarr:53612 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 14:50:49,386 buildarr:53612 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 14:50:49,388 buildarr:53612 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 14:50:49,886 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 14:50:49,931 buildarr:53612 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 14:50:50,321 buildarr:53612 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Example)' 2023-02-11 14:50:50,417 buildarr:53612 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 14:50:50,417 buildarr:53612 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration Of note in particular is the following line: 2023-02-11 14:50:50,321 buildarr:53612 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Example)' When Buildarr detects that the remote configuration differents from the locally defined configuration, the remote configuration will be updated. In this case, Buildarr detected that on the default instance configured in the Sonarr plugin, the configured GUI instance name is different from the locally defined value, so it updated the Sonarr instance to reflect the change. If the run fails for one reason or another, an error message (or exception traceback, depending on the error) will be logged and Buildarr with exit with a non-zero status.","title":"Manual runs"},{"location":"usage/#as-a-service-daemon-mode","text":"This is the mode in which that Buildarr is intended to run in most cases. Buildarr will run as a daemon in the foreground. First, an initial update run is performed, similar to buildarr run . If the initial run is successful, Buildarr will then schedule updates to run at specific times according to the configuration, logging when the next scheduled run will occur. This is intended to be used to keep a *Arr stack continually up to date, particularly if it has TRaSH-Guides metadata configured. Every scheduled run, the TRaSH-Guides metadata is updated, ensuring that any instances using it will always be using the most up to date profiles. There are several options for changing how Buildarr daemon runs in the Buildarr configuration . 2023-02-11 13:43:48,890 buildarr:4308 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 13:43:48,891 buildarr:4308 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 13:43:48,898 buildarr:4308 buildarr.main [INFO] Finished loading configuration file 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] Daemon configuration: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Watch configuration files: Yes 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - Configuration files to watch: 2023-02-11 13:43:48,900 buildarr:4308 buildarr.main [INFO] - /config/buildarr.yml 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Update at: 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Monday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Tuesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Wednesday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Thursday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Friday 03:00 2023-02-11 13:43:48,901 buildarr:4308 buildarr.main [INFO] - Saturday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] - Sunday 03:00 2023-02-11 13:43:48,902 buildarr:4308 buildarr.main [INFO] Applying initial configuration 2023-02-11 13:43:48,904 buildarr:4308 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 13:43:48,906 buildarr:4308 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 13:43:48,907 buildarr:4308 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 13:43:48,909 buildarr:4308 buildarr.main [INFO] Finished loading secrets file 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 13:43:48,910 buildarr:4308 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 13:43:48,911 buildarr:4308 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 13:43:48,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 13:43:49,870 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 13:43:49,914 buildarr:4308 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 13:43:49,954 buildarr:4308 buildarr.plugins.sonarr default [INFO] sonarr.settings.general.host.instance_name: 'Sonarr' -> 'Sonarr (Buildarr Example)' 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Remote configuration successfully updated 2023-02-11 13:43:50,177 buildarr:4308 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration 2023-02-11 13:43:50,178 buildarr:4308 buildarr.main [INFO] Finished applying initial configuration 2023-02-11 13:43:50,179 buildarr:4308 buildarr.main [INFO] Scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] Finished scheduling update jobs 2023-02-11 13:43:50,180 buildarr:4308 buildarr.main [INFO] The next run will be at 2023-02-12 03:00 2023-02-11 13:43:50,181 buildarr:4308 buildarr.main [INFO] Setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up config file monitoring 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Setting up signal handlers 2023-02-11 13:43:50,183 buildarr:4308 buildarr.main [INFO] Finished setting up signal handlers 2023-02-11 13:43:50,184 buildarr:4308 buildarr.main [INFO] Buildarr ready. Buildarr daemon supports the following signal types: SIGTERM / SIGINT - Gracefully shutdown the Buildarr daemon. SIGHUP - Reload the Buildarr configuration file and perform an update run (the same action taken as when the watch_config option is enabled and Buildarr detects configuration changes). Not supported on Windows.","title":"As a service (daemon mode)"},{"location":"usage/#plugin-specific-commands","text":"Plugins can implement their own ad-hoc commands. These are mainly used for things such as dumping configuration from running instances. For more information, refer to the user guide for the respective plugin.","title":"Plugin-specific commands"},{"location":"plugins/","text":"Plugins # Buildarr supports external plugins to allow support for additional *Arr stack applications to be added. As Buildarr is still under heavy development, however, to allow for easier iteration of both the plugin and the API, the currently supported plugins are vendored into the core Buildarr package, and can be used without installing any additional packages. Successfully installed plugins will be loaded when Buildarr is run. Configured plugins will be listed under Using plugins . $ buildarr run 2023-02-11 14:50:49,356 buildarr:53612 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:50:49,357 buildarr:53612 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:50:49,374 buildarr:53612 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:50:49,378 buildarr:53612 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:50:49,380 buildarr:53612 buildarr.main [INFO] Using plugins: sonarr ... Supported plugins # At the time of this release the following plugins are available: buildarr-sonarr - Sonarr PVR for TV shows (V3 only)","title":"Introduction"},{"location":"plugins/#plugins","text":"Buildarr supports external plugins to allow support for additional *Arr stack applications to be added. As Buildarr is still under heavy development, however, to allow for easier iteration of both the plugin and the API, the currently supported plugins are vendored into the core Buildarr package, and can be used without installing any additional packages. Successfully installed plugins will be loaded when Buildarr is run. Configured plugins will be listed under Using plugins . $ buildarr run 2023-02-11 14:50:49,356 buildarr:53612 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:50:49,357 buildarr:53612 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:50:49,374 buildarr:53612 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:50:49,378 buildarr:53612 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:50:49,380 buildarr:53612 buildarr.main [INFO] Using plugins: sonarr ...","title":"Plugins"},{"location":"plugins/#supported-plugins","text":"At the time of this release the following plugins are available: buildarr-sonarr - Sonarr PVR for TV shows (V3 only)","title":"Supported plugins"},{"location":"plugins/sonarr/","text":"buildarr-sonarr # buildarr-sonarr is a Buildarr plugin for configuring and managing Sonarr instances. Sonarr is a PVR application which downloads, renames and manages the lifecycle of TV shows in your media library. It is capable of scanning for higher quality versions of your media and automatically upgrading them when a suitable version is available. Currently, Sonarr V3 is the only supported version. Sonarr V4 support is planned for the future. Installation # As of the current release of Buildarr, buildarr-sonarr is distributed with Buildarr itself, to ease the burden of developing the Buildarr plugin API and buildarr-sonarr itself. However, it is the intention that as the Buildarr plugin API stabilises, buildarr-sonarr will be eventually be separated from Buildarr itself, and developed independently. Quick Start # To use the buildarr-sonarr plugin, create a sonarr block within buildarr.yml , and enter the connection information required for the Buildarr instance to connect to the Sonarr instance you'd like to manage. Buildarr won't modify anything yet since no configuration has been defined, but you are able to test if Buildarr is able to connect to and authenticate with the Sonarr instance. --- buildarr: watch_config: true sonarr: hostname: \"localhost\" # Defaults to `sonarr`, or the instance name for instance-specific configs. port: 8989 # Defaults to 8989. protocol: \"http\" # Defaults to `http`. api_key: \"...\" # Optional. If undefined, auto-fetch (authentication must be disabled). Now try a buildarr run . If the output is similar to the below output, Buildarr was able to connect to your Sonarr instance's API. $ buildarr run 2023-02-11 14:34:48,513 buildarr:60944 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:34:48,514 buildarr:60944 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:34:48,519 buildarr:60944 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:34:48,521 buildarr:60944 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:34:48,523 buildarr:60944 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 14:34:48,525 buildarr:60944 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 14:34:48,527 buildarr:60944 buildarr.main [INFO] Finished loading secrets file 2023-02-11 14:34:48,527 buildarr:60944 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 14:34:48,527 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 14:34:48,527 buildarr:60944 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 14:34:48,529 buildarr:60944 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 14:34:48,532 buildarr:60944 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 14:34:48,892 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 14:34:48,945 buildarr:60944 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 14:34:49,266 buildarr:60944 buildarr.plugins.sonarr default [INFO] Remote configuration is up to date 2023-02-11 14:34:49,266 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration Configuring your Sonarr instance # The following sections cover comprehensive configuration of a Sonarr instance. Note that these documents do not show how you should configure a Sonarr instance. Rather, they show how you can configure a Sonarr instance the way you want with Buildarr. For more information on how to optimally configure Sonarr, you can refer to the excellent guides from WikiArr and TRaSH-Guides . Host Configuration Media Management Profiles Quality Profiles Language Profiles Delay Profiles Release Profiles Quality Indexers Download Clients Import Lists Connect Metadata Tags General UI Dumping an existing Sonarr instance configuration # Buildarr is capable of dumping a running Sonarr instance's configuration. $ buildarr sonarr dump-config http://localhost:8989 > sonarr.yml Sonarr instance API key: <Paste API key here> The dumped YAML object can be placed directly under the sonarr configuration block, or used as an instance-specific configuration . Most values are explicitly defined in this dumped configuration, ensuring that when used with Buildarr, the configuration will always remain static. api_key: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d hostname: localhost port: 8989 protocol: http settings: connect: definitions: Trakt: access_token: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b auth_user: example expires: '2023-05-10T15:34:08.117451+00:00' notification_triggers: include_health_warnings: false on_application_update: false on_episode_file_delete: true on_episode_file_delete_for_upgrade: true on_grab: false on_health_issue: false on_import: true on_rename: false on_series_delete: true on_upgrade: true refresh_token: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b tags: [] download_clients: definitions: Transmission: add_paused: false category: sonarr directory: null enable: true host: transmission older_priority: last password: null port: 9091 priority: 1 recent_priority: last remove_completed_downloads: true remove_failed_downloads: true tags: [] url_base: /transmission/ use_ssl: false username: null enable_completed_download_handling: true redownload_failed: true remote_path_mappings: definitions: [] general: analytics: send_anonymous_usage_data: true backup: folder: Backups interval: 7 retention: 28 host: bind_address: '*' instance_name: Sonarr (Example) port: 8989 ssl_port: 9898 url_base: null use_ssl: false logging: log_level: INFO proxy: bypass_proxy_for_local_addresses: true enable: false hostname: null ignored_addresses: [] password: null port: 8080 proxy_type: http username: null security: authentication: none certificate_validation: enabled password: null username: null updates: automatic: false branch: main mechanism: docker script_path: null import_lists: definitions: {} indexers: definitions: {} maximum_size: 0 minimum_age: 0 retention: 0 rss_sync_interval: 15 media_management: analyze_video_files: true anime_episode_format: '{Series TitleYear} - S{season:00}E{episode:00} - {absolute:000} - {Episode CleanTitle} {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} { Mediainfo AudioChannels}]{MediaInfo AudioLanguages} {[Release Group]} - Default' change_file_date: none chmod_folder: drwxr-xr-x chown_group: null create_empty_series_folders: false daily_episode_format: '{Series TitleYear} - {Air-Date} - {Episode CleanTitle} - {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} {Mediainfo AudioChannels}] {[MediaInfo AudioLanguages]} {[Release Group]} - Default' delete_empty_folders: false episode_title_required: always import_extra_files: false minimum_free_space: 100 multiepisode_style: range propers_and_repacks: do-not-prefer recycling_bin: null recycling_bin_cleanup: 7 rename_episodes: true replace_illegal_characters: true rescan_series_folder_after_refresh: always root_folders: [] season_folder_format: Season {season:00} series_folder_format: '{Series TitleYear} [imdbid-{ImdbId}]' set_permissions: false skip_free_space_check: false specials_folder_format: Specials standard_episode_format: '{Series TitleYear} - S{season:00}E{episode:00} - {Episode CleanTitle} - {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} {Mediainfo AudioChannels}] {[MediaInfo AudioLanguages]} {[Release Group]} - Default' use_hardlinks: true metadata: kodi_emby: enable: false episode_images: true episode_metadata: true season_images: true series_images: true series_metadata: true series_metadata_url: true roksbox: enable: false episode_images: true episode_metadata: true season_images: true series_images: true wdtv: enable: false episode_images: true episode_metadata: true season_images: true series_images: true profiles: delay_profiles: definitions: - bypass_if_highest_quality: true preferred_protocol: usenet-prefer tags: [] torrent_delay: 0 usenet_delay: 0 language_profiles: definitions: Shows: languages: - english upgrade_until: english upgrades_allowed: true quality_profiles: definitions: SD/HD: qualities: - Bluray-1080p - members: - WEBDL-1080p - WEBRip-1080p name: WEB 1080p - HDTV-1080p - Bluray-720p - members: - WEBDL-720p - WEBRip-720p name: WEB 720p - HDTV-720p - Raw-HD - Bluray-480p - DVD - members: - WEBDL-480p - WEBRip-480p name: WEB 480p - SDTV upgrade_until: Bluray-1080p upgrades_allowed: true release_profiles: definitions: '[Trash] Low Quality Groups': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: [] preferred: - score: -10000 term: /(-BRiNK|-CHX|-GHOSTS|-EVO|-FGT|JFF|PSA|MeGusta|-NERO|nhanc3|Pahe\\.ph|Pahe\\.in|TBS|-VIDEOHOLE|-worldmkv|-XLF)\\b/i tags: [] '[Trash] Optionals': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: - /^(?=.*(1080|720))(?=.*((x|h)[ ._-]?265|hevc)).*/i - /\\b(-alfaHD|-BAT|-BNd|-C\\.A\\.A|-Cory|-EXTREME|-FF|-FOXX|-G4RiS|-GUEIRA|-N3G4N|-PD|-PTHome|-RiPER|-RK|-SiGLA|-Tars|-WTV|-Yatogam1|-YusukeFLA|-ZigZag)\\b/i - /\\b(-scene)\\b/i - /^(?!.*(HDR|HULU|REMUX))(?=.*\\b(DV|Dovi|Dolby[- .]?Vision)\\b).*/i - /\\bAV1\\b/i - /^(?!.*(web[ ]dl|-deflate|-inflate))(?=.*([_. ]WEB[_. ]|-CAKES\\b|-GGEZ\\b|-GGWP\\b|-GLHF\\b|-GOSSIP\\b|-KOGI\\b|-PECULATE\\b|-SLOT\\b)).*/i preferred: - score: 15 term: /\\bS\\d+\\b(?!E\\d+\\b)/i - score: -10000 term: /(-4P|-4Planet|-AsRequested|-BUYMORE|-CAPTCHA|-Chamele0n|-GEROV|-iNC0GNiTO|-NZBGeek|-Obfuscated|-postbot|-Rakuv|-Scrambled|-WhiteRev|-WRTEAM|-xpost)\\b/i - score: -10000 term: /(?<!\\d\\.)(1-.+)$/i - score: -10000 term: /(\\[rartv\\]|\\[rarbg\\]|\\[eztv\\]|\\[TGx\\])/i - score: -10000 term: /\\s?\\ben\\b$/i tags: [] '[Trash] P2P Groups + Repack/Proper': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: [] preferred: - score: 1800 term: /(-deflate|-inflate)\\b/i - score: 1700 term: /(-ABBIE|-AJP69|-APEX|-CasStudio|CRFW|-CtrlHD|-FLUX|\\bHONE|-KiNGS|-monkee|NOSiViD|-NTb|-NTG|-PAXA|-PEXA|-QOQ|-RTN|-SiC|T6D|-TOMMY|-ViSUM|-XEPA)\\b/i - score: 1650 term: /(3CTWeB|BLUTONiUM|-BTW|-Chotab|-Cinefeel|-CiT|Coo7|-dB|-DEEP|-END|-ETHiCS|-FC|-Flights|-GNOME|-iJP|-iKA|-iT00NZ|-JETIX|-KHN|-KiMCHI|-LAZY|-MZABI|-NPMS|-NYH|-orbitron|playWEB|PSiG|-ROCCaT|RTFM|-SA89|-SDCC|-SIGMA|-SMURF|-SPiRiT|-TEPES|-TVSmash|-WELP)\\b/i - score: 1600 term: /(-DRACULA|SLiGNOME|T4H|-ViSiON|SwAgLaNdEr)\\b/i - score: 13 term: /(repack3)/i - score: 12 term: /(repack2)/i - score: 11 term: /\\b(repack|proper)\\b/i tags: [] '[Trash] Release Sources (Streaming Service)': enable: true include_preferred_when_renaming: true indexer: null must_contain: [] must_not_contain: [] preferred: - score: 100 term: /\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 100 term: /\\b(atvp|aptv|Apple TV\\+)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 95 term: /\\b(sho|showtime)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(dsnp|dsny|disney|Disney\\+)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(hmax|hbom|hbo[ ._-]max)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(nf|netflix)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(qibi|quibi)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 85 term: /\\b(hulu)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 85 term: /\\b(pcok|Peacock TV)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(dcu)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(hbo)(?![ ._-]max)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(it)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(nlz)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(pmtp)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(red)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(stan)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(vdl)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i tags: [] quality: definitions: Bluray-1080p: max: 227.0 min: 50.4 title: null Bluray-1080p Remux: max: null min: 69.1 title: null Bluray-2160p: max: null min: 94.6 title: null Bluray-2160p Remux: max: null min: 204.4 title: null Bluray-480p: max: 100.0 min: 2.0 title: null Bluray-720p: max: 137.3 min: 17.1 title: null DVD: max: 100.0 min: 2.0 title: null HDTV-1080p: max: 137.3 min: 15.0 title: null HDTV-2160p: max: 350.0 min: 50.4 title: null HDTV-720p: max: 67.5 min: 10.0 title: null Raw-HD: max: null min: 4.0 title: null SDTV: max: 100.0 min: 2.0 title: null Unknown: max: 199.9 min: 1.0 title: null WEBDL-1080p: max: 137.3 min: 15.0 title: null WEBDL-2160p: max: 350.0 min: 50.4 title: null WEBDL-480p: max: 100.0 min: 2.0 title: null WEBDL-720p: max: 137.3 min: 10.0 title: null WEBRip-1080p: max: 137.3 min: 15.0 title: null WEBRip-2160p: max: 350.0 min: 50.4 title: null WEBRip-480p: max: 100.0 min: 2.0 title: null WEBRip-720p: max: 137.3 min: 10.0 title: null tags: definitions: [] ui: enable_color_impaired_mode: false first_day_of_week: sunday long_date_format: day-first short_date_format: word-month-second show_relative_dates: true time_format: twentyfour-hour week_column_header: day-first version: 3.0.9.1549","title":"Introduction"},{"location":"plugins/sonarr/#buildarr-sonarr","text":"buildarr-sonarr is a Buildarr plugin for configuring and managing Sonarr instances. Sonarr is a PVR application which downloads, renames and manages the lifecycle of TV shows in your media library. It is capable of scanning for higher quality versions of your media and automatically upgrading them when a suitable version is available. Currently, Sonarr V3 is the only supported version. Sonarr V4 support is planned for the future.","title":"buildarr-sonarr"},{"location":"plugins/sonarr/#installation","text":"As of the current release of Buildarr, buildarr-sonarr is distributed with Buildarr itself, to ease the burden of developing the Buildarr plugin API and buildarr-sonarr itself. However, it is the intention that as the Buildarr plugin API stabilises, buildarr-sonarr will be eventually be separated from Buildarr itself, and developed independently.","title":"Installation"},{"location":"plugins/sonarr/#quick-start","text":"To use the buildarr-sonarr plugin, create a sonarr block within buildarr.yml , and enter the connection information required for the Buildarr instance to connect to the Sonarr instance you'd like to manage. Buildarr won't modify anything yet since no configuration has been defined, but you are able to test if Buildarr is able to connect to and authenticate with the Sonarr instance. --- buildarr: watch_config: true sonarr: hostname: \"localhost\" # Defaults to `sonarr`, or the instance name for instance-specific configs. port: 8989 # Defaults to 8989. protocol: \"http\" # Defaults to `http`. api_key: \"...\" # Optional. If undefined, auto-fetch (authentication must be disabled). Now try a buildarr run . If the output is similar to the below output, Buildarr was able to connect to your Sonarr instance's API. $ buildarr run 2023-02-11 14:34:48,513 buildarr:60944 buildarr.main [INFO] Buildarr version 0.1.0 (log level: INFO) 2023-02-11 14:34:48,514 buildarr:60944 buildarr.main [INFO] Loading configuration file '/config/buildarr.yml' 2023-02-11 14:34:48,519 buildarr:60944 buildarr.main [INFO] Finished loading configuration file 2023-02-11 14:34:48,521 buildarr:60944 buildarr.main [INFO] Plugins loaded: sonarr 2023-02-11 14:34:48,523 buildarr:60944 buildarr.main [INFO] Using plugins: sonarr 2023-02-11 14:34:48,525 buildarr:60944 buildarr.main [INFO] Loading secrets file from 'secrets.json' 2023-02-11 14:34:48,527 buildarr:60944 buildarr.main [INFO] Finished loading secrets file 2023-02-11 14:34:48,527 buildarr:60944 buildarr.plugins.sonarr default [INFO] Checking and fetching secrets 2023-02-11 14:34:48,527 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished checking and fetching secrets 2023-02-11 14:34:48,527 buildarr:60944 buildarr.main [INFO] Saving updated secrets file to 'secrets.json' 2023-02-11 14:34:48,529 buildarr:60944 buildarr.main [INFO] Finished saving updated secrets file 2023-02-11 14:34:48,532 buildarr:60944 buildarr.plugins.sonarr default [INFO] Getting remote configuration 2023-02-11 14:34:48,892 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished getting remote configuration 2023-02-11 14:34:48,945 buildarr:60944 buildarr.plugins.sonarr default [INFO] Updating remote configuration 2023-02-11 14:34:49,266 buildarr:60944 buildarr.plugins.sonarr default [INFO] Remote configuration is up to date 2023-02-11 14:34:49,266 buildarr:60944 buildarr.plugins.sonarr default [INFO] Finished updating remote configuration","title":"Quick Start"},{"location":"plugins/sonarr/#configuring-your-sonarr-instance","text":"The following sections cover comprehensive configuration of a Sonarr instance. Note that these documents do not show how you should configure a Sonarr instance. Rather, they show how you can configure a Sonarr instance the way you want with Buildarr. For more information on how to optimally configure Sonarr, you can refer to the excellent guides from WikiArr and TRaSH-Guides . Host Configuration Media Management Profiles Quality Profiles Language Profiles Delay Profiles Release Profiles Quality Indexers Download Clients Import Lists Connect Metadata Tags General UI","title":"Configuring your Sonarr instance"},{"location":"plugins/sonarr/#dumping-an-existing-sonarr-instance-configuration","text":"Buildarr is capable of dumping a running Sonarr instance's configuration. $ buildarr sonarr dump-config http://localhost:8989 > sonarr.yml Sonarr instance API key: <Paste API key here> The dumped YAML object can be placed directly under the sonarr configuration block, or used as an instance-specific configuration . Most values are explicitly defined in this dumped configuration, ensuring that when used with Buildarr, the configuration will always remain static. api_key: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d hostname: localhost port: 8989 protocol: http settings: connect: definitions: Trakt: access_token: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b auth_user: example expires: '2023-05-10T15:34:08.117451+00:00' notification_triggers: include_health_warnings: false on_application_update: false on_episode_file_delete: true on_episode_file_delete_for_upgrade: true on_grab: false on_health_issue: false on_import: true on_rename: false on_series_delete: true on_upgrade: true refresh_token: 1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b3c4d5e6f1a2b tags: [] download_clients: definitions: Transmission: add_paused: false category: sonarr directory: null enable: true host: transmission older_priority: last password: null port: 9091 priority: 1 recent_priority: last remove_completed_downloads: true remove_failed_downloads: true tags: [] url_base: /transmission/ use_ssl: false username: null enable_completed_download_handling: true redownload_failed: true remote_path_mappings: definitions: [] general: analytics: send_anonymous_usage_data: true backup: folder: Backups interval: 7 retention: 28 host: bind_address: '*' instance_name: Sonarr (Example) port: 8989 ssl_port: 9898 url_base: null use_ssl: false logging: log_level: INFO proxy: bypass_proxy_for_local_addresses: true enable: false hostname: null ignored_addresses: [] password: null port: 8080 proxy_type: http username: null security: authentication: none certificate_validation: enabled password: null username: null updates: automatic: false branch: main mechanism: docker script_path: null import_lists: definitions: {} indexers: definitions: {} maximum_size: 0 minimum_age: 0 retention: 0 rss_sync_interval: 15 media_management: analyze_video_files: true anime_episode_format: '{Series TitleYear} - S{season:00}E{episode:00} - {absolute:000} - {Episode CleanTitle} {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} { Mediainfo AudioChannels}]{MediaInfo AudioLanguages} {[Release Group]} - Default' change_file_date: none chmod_folder: drwxr-xr-x chown_group: null create_empty_series_folders: false daily_episode_format: '{Series TitleYear} - {Air-Date} - {Episode CleanTitle} - {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} {Mediainfo AudioChannels}] {[MediaInfo AudioLanguages]} {[Release Group]} - Default' delete_empty_folders: false episode_title_required: always import_extra_files: false minimum_free_space: 100 multiepisode_style: range propers_and_repacks: do-not-prefer recycling_bin: null recycling_bin_cleanup: 7 rename_episodes: true replace_illegal_characters: true rescan_series_folder_after_refresh: always root_folders: [] season_folder_format: Season {season:00} series_folder_format: '{Series TitleYear} [imdbid-{ImdbId}]' set_permissions: false skip_free_space_check: false specials_folder_format: Specials standard_episode_format: '{Series TitleYear} - S{season:00}E{episode:00} - {Episode CleanTitle} - {[Preferred Words]} {[Quality Full]} {[MediaInfo VideoDynamicRangeType]} [{MediaInfo VideoBitDepth}bit] {[MediaInfo VideoCodec]} [{Mediainfo AudioCodec} {Mediainfo AudioChannels}] {[MediaInfo AudioLanguages]} {[Release Group]} - Default' use_hardlinks: true metadata: kodi_emby: enable: false episode_images: true episode_metadata: true season_images: true series_images: true series_metadata: true series_metadata_url: true roksbox: enable: false episode_images: true episode_metadata: true season_images: true series_images: true wdtv: enable: false episode_images: true episode_metadata: true season_images: true series_images: true profiles: delay_profiles: definitions: - bypass_if_highest_quality: true preferred_protocol: usenet-prefer tags: [] torrent_delay: 0 usenet_delay: 0 language_profiles: definitions: Shows: languages: - english upgrade_until: english upgrades_allowed: true quality_profiles: definitions: SD/HD: qualities: - Bluray-1080p - members: - WEBDL-1080p - WEBRip-1080p name: WEB 1080p - HDTV-1080p - Bluray-720p - members: - WEBDL-720p - WEBRip-720p name: WEB 720p - HDTV-720p - Raw-HD - Bluray-480p - DVD - members: - WEBDL-480p - WEBRip-480p name: WEB 480p - SDTV upgrade_until: Bluray-1080p upgrades_allowed: true release_profiles: definitions: '[Trash] Low Quality Groups': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: [] preferred: - score: -10000 term: /(-BRiNK|-CHX|-GHOSTS|-EVO|-FGT|JFF|PSA|MeGusta|-NERO|nhanc3|Pahe\\.ph|Pahe\\.in|TBS|-VIDEOHOLE|-worldmkv|-XLF)\\b/i tags: [] '[Trash] Optionals': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: - /^(?=.*(1080|720))(?=.*((x|h)[ ._-]?265|hevc)).*/i - /\\b(-alfaHD|-BAT|-BNd|-C\\.A\\.A|-Cory|-EXTREME|-FF|-FOXX|-G4RiS|-GUEIRA|-N3G4N|-PD|-PTHome|-RiPER|-RK|-SiGLA|-Tars|-WTV|-Yatogam1|-YusukeFLA|-ZigZag)\\b/i - /\\b(-scene)\\b/i - /^(?!.*(HDR|HULU|REMUX))(?=.*\\b(DV|Dovi|Dolby[- .]?Vision)\\b).*/i - /\\bAV1\\b/i - /^(?!.*(web[ ]dl|-deflate|-inflate))(?=.*([_. ]WEB[_. ]|-CAKES\\b|-GGEZ\\b|-GGWP\\b|-GLHF\\b|-GOSSIP\\b|-KOGI\\b|-PECULATE\\b|-SLOT\\b)).*/i preferred: - score: 15 term: /\\bS\\d+\\b(?!E\\d+\\b)/i - score: -10000 term: /(-4P|-4Planet|-AsRequested|-BUYMORE|-CAPTCHA|-Chamele0n|-GEROV|-iNC0GNiTO|-NZBGeek|-Obfuscated|-postbot|-Rakuv|-Scrambled|-WhiteRev|-WRTEAM|-xpost)\\b/i - score: -10000 term: /(?<!\\d\\.)(1-.+)$/i - score: -10000 term: /(\\[rartv\\]|\\[rarbg\\]|\\[eztv\\]|\\[TGx\\])/i - score: -10000 term: /\\s?\\ben\\b$/i tags: [] '[Trash] P2P Groups + Repack/Proper': enable: true include_preferred_when_renaming: false indexer: null must_contain: [] must_not_contain: [] preferred: - score: 1800 term: /(-deflate|-inflate)\\b/i - score: 1700 term: /(-ABBIE|-AJP69|-APEX|-CasStudio|CRFW|-CtrlHD|-FLUX|\\bHONE|-KiNGS|-monkee|NOSiViD|-NTb|-NTG|-PAXA|-PEXA|-QOQ|-RTN|-SiC|T6D|-TOMMY|-ViSUM|-XEPA)\\b/i - score: 1650 term: /(3CTWeB|BLUTONiUM|-BTW|-Chotab|-Cinefeel|-CiT|Coo7|-dB|-DEEP|-END|-ETHiCS|-FC|-Flights|-GNOME|-iJP|-iKA|-iT00NZ|-JETIX|-KHN|-KiMCHI|-LAZY|-MZABI|-NPMS|-NYH|-orbitron|playWEB|PSiG|-ROCCaT|RTFM|-SA89|-SDCC|-SIGMA|-SMURF|-SPiRiT|-TEPES|-TVSmash|-WELP)\\b/i - score: 1600 term: /(-DRACULA|SLiGNOME|T4H|-ViSiON|SwAgLaNdEr)\\b/i - score: 13 term: /(repack3)/i - score: 12 term: /(repack2)/i - score: 11 term: /\\b(repack|proper)\\b/i tags: [] '[Trash] Release Sources (Streaming Service)': enable: true include_preferred_when_renaming: true indexer: null must_contain: [] must_not_contain: [] preferred: - score: 100 term: /\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 100 term: /\\b(atvp|aptv|Apple TV\\+)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 95 term: /\\b(sho|showtime)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(dsnp|dsny|disney|Disney\\+)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(hmax|hbom|hbo[ ._-]max)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(nf|netflix)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 90 term: /\\b(qibi|quibi)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 85 term: /\\b(hulu)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 85 term: /\\b(pcok|Peacock TV)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(dcu)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(hbo)(?![ ._-]max)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(it)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(nlz)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(pmtp)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(red)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(stan)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i - score: 75 term: /\\b(vdl)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i tags: [] quality: definitions: Bluray-1080p: max: 227.0 min: 50.4 title: null Bluray-1080p Remux: max: null min: 69.1 title: null Bluray-2160p: max: null min: 94.6 title: null Bluray-2160p Remux: max: null min: 204.4 title: null Bluray-480p: max: 100.0 min: 2.0 title: null Bluray-720p: max: 137.3 min: 17.1 title: null DVD: max: 100.0 min: 2.0 title: null HDTV-1080p: max: 137.3 min: 15.0 title: null HDTV-2160p: max: 350.0 min: 50.4 title: null HDTV-720p: max: 67.5 min: 10.0 title: null Raw-HD: max: null min: 4.0 title: null SDTV: max: 100.0 min: 2.0 title: null Unknown: max: 199.9 min: 1.0 title: null WEBDL-1080p: max: 137.3 min: 15.0 title: null WEBDL-2160p: max: 350.0 min: 50.4 title: null WEBDL-480p: max: 100.0 min: 2.0 title: null WEBDL-720p: max: 137.3 min: 10.0 title: null WEBRip-1080p: max: 137.3 min: 15.0 title: null WEBRip-2160p: max: 350.0 min: 50.4 title: null WEBRip-480p: max: 100.0 min: 2.0 title: null WEBRip-720p: max: 137.3 min: 10.0 title: null tags: definitions: [] ui: enable_color_impaired_mode: false first_day_of_week: sunday long_date_format: day-first short_date_format: word-month-second show_relative_dates: true time_format: twentyfour-hour week_column_header: day-first version: 3.0.9.1549","title":"Dumping an existing Sonarr instance configuration"},{"location":"plugins/sonarr/configuration/connect/","text":"Connect # Sonarr supports configuring connections to external applications and services. These are not only for Sonarr to communicate with the outside world, they can also be useful for monitoring since the user can be alerted by a variety of possible service when some kind of event (or problem) occurs in Sonarr. Configuring connections # Bases: SonarrConfigBase Connections are configured using the following syntax. sonarr: settings: connect: delete_unmanaged: false # Optional definitions: Email: # Name of connection in Sonarr. type: \"email\" # Required notification_triggers: # When to send notifications. on_grab: true on_import: true on_upgrade: true on_rename: false # Not supported by email notifications. on_series_delete: true on_episode_file_delete: true on_episode_file_delete_for_upgrade: true on_health_issue: true include_health_warnings: false # Do not send on just warnings. on_application_update: true tags: # Tags can also be assigned to connections. - \"example\" # Connection-specific parameters. server: \"smtp.example.com\" port: 465 use_encryption: true username: \"sonarr\" password: \"fake-password\" from_address: \"sonarr@example.com\" recipient_addresses: - \"admin@example.com\" # Add additional connections here. A type attribute must be defined so Buildarr knows what type of connection to make. Each connection has a unique value for type documented below. The triggers enabled on a connection are defined under notification_triggers . Tags can be assigned to connections, to only allow notifications relating to media under those tags. The delete_unmanaged flag on the outer connect block can be set to remove connections not defined in Buildarr. Take care when using this option, as it can remove connections automatically managed by other applications. The following notification triggers can be enabled. Some connection types only allow a subset of these to be enabled, check the documentation the specific connection type for more information. on_grab: bool = False class-attribute # Be notified when episodes are available for download and has been sent to a download client. on_import: bool = False class-attribute # Be notified when episodes are successfully imported. (Formerly known as On Download) on_upgrade: bool = False class-attribute # Be notified when episodes are upgraded to a better quality. on_rename: bool = False class-attribute # Be notified when episodes are renamed. on_series_delete: bool = False class-attribute # Be notified when series are deleted. on_episode_file_delete: bool = False class-attribute # Be notified when episodes files are deleted. on_episode_file_delete_for_upgrade: bool = False class-attribute # Be notified when episode files are deleted for upgrades. on_health_issue: bool = False class-attribute # Be notified on health check failures. include_health_warnings: bool = False class-attribute # Be notified on health warnings in addition to errors. Requires on_health_issue to be enabled to have any effect. on_application_update: bool = False class-attribute # Be notified when Sonarr gets updated to a new version. Boxcar # Bases: Connection Receive media update and health alert push notifications via Boxcar. Supported notification triggers: All except on_rename type: Literal['boxcar'] = 'boxcar' class-attribute # Type value associated with this kind of connection. access_token: Password class-attribute # Access token for authenticating with Boxcar. Custom Script # Bases: Connection Execute a local script on the Sonarr instance when events occur. Supported notification triggers: All type: Literal['customscript'] = 'customscript' class-attribute # Type value associated with this kind of connection. path: NonEmptyStr class-attribute # Path of the script to execute. Discord # Bases: Connection Send media update and health alert messages to a Discord server. Supported notification triggers: All type: Literal['discord'] = 'discord' class-attribute # Type value associated with this kind of connection. username: Optional[str] = None class-attribute # The username to post as. If unset, blank or set to None , use the default username set to the webhook URL. avatar: Optional[str] = None class-attribute # Change the avatar that is used for messages from this connection. If unset, blank or set to None , use the default avatar for the user. host: Optional[str] = None class-attribute # Override the host name that shows for this notification. If unset, blank or set to None , use the machine name. on_grab_fields: List[OnGrabField] = [OnGrabField.overview, OnGrabField.rating, OnGrabField.genres, OnGrabField.quality, OnGrabField.size, OnGrabField.links, OnGrabField.release, OnGrabField.poster, OnGrabField.fanart] class-attribute # Set the fields that are passed in for this 'on grab' notification. By default, all fields are passed in. Values: overview rating genres quality group size links release poster fanart Example: ... connect: definitions: Discord: type: \"discord\" webhook_url: \"https://...\" on_grab_fields: - \"overview\" - \"quality\" - \"release\" on_import_fields: List[OnImportField] = [OnImportField.overview, OnImportField.rating, OnImportField.genres, OnImportField.quality, OnImportField.codecs, OnImportField.group, OnImportField.size, OnImportField.languages, OnImportField.subtitles, OnImportField.links, OnImportField.release, OnImportField.poster, OnImportField.fanart] class-attribute # Set the fields that are passed in for this 'on import' notification. By default, all fields are passed in. Values: overview rating genres quality codecs group size languages subtitles links release poster fanart Example: ... connect: definitions: Discord: type: \"discord\" webhook_url: \"https://...\" on_import_fields: - \"overview\" - \"quality\" - \"release\" Email # Bases: Connection Send media update and health alert messages to an email address. Supported notification triggers: All except on_rename type: Literal['email'] = 'email' class-attribute # Type value associated with this kind of connection. server: NonEmptyStr class-attribute # Hostname or IP address of the SMTP server to send outbound mail to. port: Port = 587 class-attribute # The port number on the SMTP server to use to submit mail. The default is to use STARTTLS on the standard SMTP submission port. use_encryption: bool = True class-attribute # Whether or not to use encryption when sending mail to the SMTP server. If the port number is set to 465, SMTPS (implicit TLS) will be used. Any other port number will result in STARTTLS being used. The default is to enable encryption. username: NonEmptyStr class-attribute # SMTP username of the account to send the mail from. password: Password class-attribute # SMTP password of the account to send the mail from. from_address: NameEmail class-attribute # Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> . recipient_addresses: Annotated[List[NameEmail], Field(min_items=1, unique_items=True)] class-attribute # List of email addresses to directly address the mail to. At least one address must be provided. cc_addresses: List[NameEmail] = [] class-attribute # Optional list of email addresses to copy (CC) the mail to. bcc_addresses: List[NameEmail] = [] class-attribute # Optional list of email addresses to blind copy (BCC) the mail to. Emby # Bases: Connection Send media update and health alert notifications to an Emby server. Supported notification triggers: All type: Literal['emby'] = 'emby' class-attribute # Type value associated with this kind of connection. host: NonEmptyStr class-attribute # Emby server hostname or IP address. port: Port = 8096 class-attribute # Emby server port. use_ssl: bool = False class-attribute # Use HTTPS to connect to Emby, instead of HTTP. api_key: Password class-attribute # API key to authenticate with Emby. send_notifications: bool = False class-attribute # Have MediaBrowser send notifications to configured providers. update_library: bool = False class-attribute # Update the Emby library on import, rename, or delete. Gotify # Bases: Connection Send media update and health alert push notifications via a Gotify server. Supported notification triggers: All except on_rename type: Literal['gotify'] = 'gotify' class-attribute # Type value associated with this kind of connection. server: HttpUrl class-attribute # Gotify server URL. (e.g. http://gotify.example.com:1234 ) app_token: Password class-attribute # App token to use to authenticate with Gotify. priority: GotifyPriority = GotifyPriority.normal class-attribute # Gotify notification priority. Values: min low normal high Join # Bases: Connection Send media update and health alert push notifications via Join. Supported notification triggers: All except on_rename type: Literal['join'] = 'join' class-attribute # Type value associated with this kind of connection. api_key: Password class-attribute # API key to use to authenticate with Join. device_names: List[NonEmptyStr] = [] class-attribute # List of full or partial device names you'd like to send notifications to. If unset or empty, all devices will receive notifications. priority: JoinPriority = JoinPriority.normal class-attribute # Join push notification priority. Values: silent quiet normal high emergency Kodi (XBMC) # Bases: Connection Send media update and health alert notifications to a Kodi (XBMC) instance. Supported notification triggers: All type: Literal['kodi', 'xbmc'] = 'kodi' class-attribute # Type values associated with this kind of connection. (Use either one) host: NonEmptyStr class-attribute # Kodi hostname or IP address. port: Port = 8080 class-attribute # Kodi API port. use_ssl: bool = False class-attribute # Connect to Kodi over HTTPS instead of HTTP. username: NonEmptyStr class-attribute # Username to use to login to Kodi. password: Password class-attribute # Password to use to login to Kodi. gui_notification: bool = False class-attribute # Enable showing notifications from Sonarr in the Kodi GUI. display_time: int = Field(5, ge=0) class-attribute # How long the notification will be displayed for (in seconds). update_library: bool = False class-attribute # Update the Kodi library on import/rename. clean_library: bool = False class-attribute # Clean the Kodi library after update. always_update: bool = False class-attribute # Update the Kodi library even when a video is playing. Mailgun # Bases: Connection Send media update and health alert emails via the Mailgun delivery service. Supported notification triggers: All except on_rename type: Literal['mailgun'] = 'mailgun' class-attribute # Type value associated with this kind of connection. api_key: Password class-attribute # API key to use to authenticate with Mailgun. use_eu_endpoint: bool = False class-attribute # Send mail via the EU endpoint instead of the US one. from_address: NameEmail class-attribute # Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> . sender_domain: NonEmptyStr class-attribute # The domain from which the mail will be sent. recipient_addresses: List[NameEmail] = [] class-attribute # The recipient email addresses of the notification mail. Plex Home Theater # Bases: Connection Send media update notifications to a Plex Home Theater instance. Supported notification triggers: on_grab , on_import , on_upgrade only type: Literal['plex-home-theater'] = 'plex-home-theater' class-attribute # Type value associated with this kind of connection. host: NonEmptyStr class-attribute # Plex Home Theater hostname or IP address. port: Port = 3005 class-attribute # Plex Home Theater API port. use_ssl: bool = False class-attribute # Connect to Plex Home Theater over HTTPS instead of HTTP. username: NonEmptyStr class-attribute # Username to use to login to Plex Home Theater. password: Password class-attribute # Password to use to login to Plex Home Theater. gui_notification: bool = False class-attribute # Enable showing notifications from Sonarr in the Plex Home Theater GUI. display_time: int = Field(5, ge=0) class-attribute # How long the notification will be displayed for (in seconds). update_library: bool = False class-attribute # Update the Plex Home Theater library on import/rename. clean_library: bool = False class-attribute # Clean the Plex Home Theater library after update. always_update: bool = False class-attribute # Update the Plex Home THeater library even when a video is playing. Plex Media Center # Bases: Connection Send media update notifications to a Plex Media Center instance. Supported notification triggers: on_grab , on_import , on_upgrade only type: Literal['plex-media-center'] = 'plex-media-center' class-attribute # Type value associated with this kind of connection. host: NonEmptyStr class-attribute # Plex Media Center hostname or IP address. port: Port = 3000 class-attribute # Plex Media Center API port. username: NonEmptyStr class-attribute # Username to use to login to Plex Media Center. password: Password class-attribute # Password to use to login to Plex Media Center. Plex Media Server # Bases: Connection Send media update notifications to a Plex Media Server instance. Supported notification triggers: All except on_grab , on_health_issue and on_application_update type: Literal['plex-media-server'] = 'plex-media-server' class-attribute # Type value associated with this kind of connection. host: NonEmptyStr class-attribute # Plex Media Server hostname or IP address. port: Port = 32400 class-attribute # Plex Media Server API port. use_ssl: bool = False class-attribute # Connect to Plex Media Server over HTTPS instead of HTTP. auth_token: Password class-attribute # Plex authentication token. If unsure on where to find this token, follow this guide from Plex.tv . update_library: bool = True class-attribute # Update the Plex Media Server library on import, rename or delete. Prowl # Bases: Connection Send media update and health alert push notifications to a Prowl client. Supported notification triggers: All except on_rename type: Literal['prowl'] = 'prowl' class-attribute # Type value associated with this kind of connection. api_key: Password class-attribute # API key to use when authenticating with Prowl. priority: ProwlPriority = ProwlPriority.normal class-attribute # Prowl push notification priority. Values: verylow low normal high emergency Pushbullet # Bases: Connection Send media update and health alert push notifications to 1 or more Pushbullet devices. Supported notification triggers: All except on_rename type: Literal['pushbullet'] = 'pushbullet' class-attribute # Type value associated with this kind of connection. api_key: Password class-attribute # API key to use when authenticating with Pushbullet. device_ids: List[NonEmptyStr] = [] class-attribute # List of device IDs to send notifications to. If unset or empty, send to all devices. channel_tags: List[NonEmptyStr] = [] class-attribute # List of Channel Tags to send notifications to. sender_id: Optional[str] = None class-attribute # The device ID to send notifications from ( device_iden in the device's URL on pushbullet.com ). Leave unset, blank or set to None to send from yourself. Pushover # Bases: Connection Send media update and health alert push notifications to 1 or more Pushover devices. Supported notification triggers: All except on_rename type: Literal['pushover'] = 'pushover' class-attribute # Type value associated with this kind of connection. user_key: Annotated[SecretStr, Field(min_length=30, max_length=30)] class-attribute # User key to use to authenticate with your Pushover account. api_key: Annotated[SecretStr, Field(min_length=30, max_length=30)] class-attribute # API key assigned to Sonarr in Pushover. devices: List[NonEmptyStr] = [] class-attribute # List of device names to send notifications to. If unset or empty, send to all devices. priority: PushoverPriority = PushoverPriority.normal class-attribute # Pushover push notification priority. Values: silent quiet normal high emergency retry: Union[Literal[0], PushoverRetry] = 0 class-attribute # Interval to retry emergency alerts, in seconds. Minimum 30 seconds. Set to 0 to disable retrying emergency alerts. expire: int = Field(0, ge=0, le=86400) class-attribute # Threshold for retrying emergency alerts, in seconds. If retry is set, this should be set to a higher value. Maximum 86400 seconds (1 day). sound: Optional[str] = None class-attribute # Notification sound to use on devices. Leave unset, blank or set to None to use the default. SendGrid # Bases: Connection Send media update and health alert emails via the SendGrid delivery service. Supported notification triggers: All except on_rename type: Literal['sendgrid'] = 'sendgrid' class-attribute # Type value associated with this kind of connection. api_key: Password class-attribute # API key to use to authenticate with SendGrid. from_address: NameEmail class-attribute # Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> . recipient_addresses: List[NameEmail] = [] class-attribute # The recipient email addresses of the notification mail. Slack # Bases: Connection Send media update and health alert messages to a Slack channel. Supported notification triggers: All type: Literal['slack'] = 'slack' class-attribute # Type value associated with this kind of connection. webhook_url: HttpUrl class-attribute # Webhook URL for the Slack channel to send to. username: NonEmptyStr class-attribute # Username to post as. icon: Optional[str] = None class-attribute # The icon that is used for messages from this integration (emoji or URL). If unset, blank or set to None , use the default for the user. channel: Optional[str] = None class-attribute # If set, overrides the default channel in the webhook. Synology Indexer # Bases: Connection Send media update notifications to the local Synology Indexer. Supported notification triggers: All except on_grab , on_health_issue and on_application_update type: Literal['synology-indexer'] = 'synology-indexer' class-attribute # Type value associated with this kind of connection. update_library: bool = True class-attribute # Update the library on media import/rename/delete. Telegram # Bases: Connection Send media update and health alert messages to a Telegram chat room. Supported notification triggers: All type: Literal['telegram'] = 'telegram' class-attribute # Type value associated with this kind of connection. bot_token: Password class-attribute # The bot token assigned to the Sonarr instance. chat_id: NonEmptyStr class-attribute # The ID of the chat room to send messages to. You must start a conversation with the bot or add it to your group to receive messages. send_silently: bool = False class-attribute # Sends the message silently. Users will receive a notification with no sound. Trakt # Bases: Connection Send media update and health alert messages to the Trakt media tracker. Note Sonarr directly authenticates with Trakt to generate tokens for it to use. At the moment, the easiest way to generate the tokens for Buildarr is to do it using the GUI within Sonarr, and use the following shell command to retrieve the generated configuration. $ curl -X \"GET\" \"<sonarr-url>/api/v3/notification\" -H \"X-Api-Key: <api-key>\" Supported notification triggers: All except on_grab , on_rename , on_health_issue and on_application_update type: Literal['trakt'] = 'trakt' class-attribute # Type value associated with this kind of connection. access_token: Password class-attribute # Access token for Sonarr from Trakt. refresh_token: Password class-attribute # Refresh token for Sonarr from Trakt. expires: datetime class-attribute # Expiry date-time of the access token, preferably in ISO-8601 format and in UTC. Example: 2023-05-10T15:34:08.117451Z auth_user: TraktAuthUser class-attribute # The username being authenticated in Trakt. Twitter # Bases: Connection Send media update and health alert messages via Twitter. Twitter requires you to create an application for their API to generate the necessary keys and secrets. If unsure how to proceed, refer to these guides from Twitter and WikiArr . Access tokens can be obtained using the prodecure documented here . Supported notification triggers: All except on_rename type: Literal['twitter'] = 'twitter' class-attribute # Type value associated with this kind of connection. consumer_key: Password class-attribute # Consumer key from a Twitter application. consumer_secret: Password class-attribute # Consumer key from a Twitter application. access_token: Password class-attribute # Access token for a Twitter user. access_token_secret: Password class-attribute # Access token secret for a Twitter user. mention: NonEmptyStr class-attribute # Mention this user in sent tweets. direct_message: bool = True class-attribute # Send a direct message instead of a public message. Webhook # Bases: Connection Send media update and health alert notifications to a webhook API. Supported notification triggers: All type: Literal['webhook'] = 'webhook' class-attribute # Type value associated with this kind of connection. method: WebhookMethod = WebhookMethod.POST class-attribute # HTTP request method type to use. Values: POST PUT username: NonEmptyStr class-attribute # Webhook API username. password: Password class-attribute # Webhook API password.","title":"Connect"},{"location":"plugins/sonarr/configuration/connect/#connect","text":"Sonarr supports configuring connections to external applications and services. These are not only for Sonarr to communicate with the outside world, they can also be useful for monitoring since the user can be alerted by a variety of possible service when some kind of event (or problem) occurs in Sonarr.","title":"Connect"},{"location":"plugins/sonarr/configuration/connect/#configuring-connections","text":"Bases: SonarrConfigBase Connections are configured using the following syntax. sonarr: settings: connect: delete_unmanaged: false # Optional definitions: Email: # Name of connection in Sonarr. type: \"email\" # Required notification_triggers: # When to send notifications. on_grab: true on_import: true on_upgrade: true on_rename: false # Not supported by email notifications. on_series_delete: true on_episode_file_delete: true on_episode_file_delete_for_upgrade: true on_health_issue: true include_health_warnings: false # Do not send on just warnings. on_application_update: true tags: # Tags can also be assigned to connections. - \"example\" # Connection-specific parameters. server: \"smtp.example.com\" port: 465 use_encryption: true username: \"sonarr\" password: \"fake-password\" from_address: \"sonarr@example.com\" recipient_addresses: - \"admin@example.com\" # Add additional connections here. A type attribute must be defined so Buildarr knows what type of connection to make. Each connection has a unique value for type documented below. The triggers enabled on a connection are defined under notification_triggers . Tags can be assigned to connections, to only allow notifications relating to media under those tags. The delete_unmanaged flag on the outer connect block can be set to remove connections not defined in Buildarr. Take care when using this option, as it can remove connections automatically managed by other applications. The following notification triggers can be enabled. Some connection types only allow a subset of these to be enabled, check the documentation the specific connection type for more information.","title":"Configuring connections"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_grab","text":"Be notified when episodes are available for download and has been sent to a download client.","title":"on_grab"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_import","text":"Be notified when episodes are successfully imported. (Formerly known as On Download)","title":"on_import"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_upgrade","text":"Be notified when episodes are upgraded to a better quality.","title":"on_upgrade"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_rename","text":"Be notified when episodes are renamed.","title":"on_rename"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_series_delete","text":"Be notified when series are deleted.","title":"on_series_delete"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_episode_file_delete","text":"Be notified when episodes files are deleted.","title":"on_episode_file_delete"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_episode_file_delete_for_upgrade","text":"Be notified when episode files are deleted for upgrades.","title":"on_episode_file_delete_for_upgrade"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_health_issue","text":"Be notified on health check failures.","title":"on_health_issue"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.include_health_warnings","text":"Be notified on health warnings in addition to errors. Requires on_health_issue to be enabled to have any effect.","title":"include_health_warnings"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.NotificationTriggers.on_application_update","text":"Be notified when Sonarr gets updated to a new version.","title":"on_application_update"},{"location":"plugins/sonarr/configuration/connect/#boxcar","text":"Bases: Connection Receive media update and health alert push notifications via Boxcar. Supported notification triggers: All except on_rename","title":"Boxcar"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.BoxcarConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.BoxcarConnection.access_token","text":"Access token for authenticating with Boxcar.","title":"access_token"},{"location":"plugins/sonarr/configuration/connect/#custom-script","text":"Bases: Connection Execute a local script on the Sonarr instance when events occur. Supported notification triggers: All","title":"Custom Script"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.CustomscriptConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.CustomscriptConnection.path","text":"Path of the script to execute.","title":"path"},{"location":"plugins/sonarr/configuration/connect/#discord","text":"Bases: Connection Send media update and health alert messages to a Discord server. Supported notification triggers: All","title":"Discord"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.username","text":"The username to post as. If unset, blank or set to None , use the default username set to the webhook URL.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.avatar","text":"Change the avatar that is used for messages from this connection. If unset, blank or set to None , use the default avatar for the user.","title":"avatar"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.host","text":"Override the host name that shows for this notification. If unset, blank or set to None , use the machine name.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.on_grab_fields","text":"Set the fields that are passed in for this 'on grab' notification. By default, all fields are passed in. Values: overview rating genres quality group size links release poster fanart Example: ... connect: definitions: Discord: type: \"discord\" webhook_url: \"https://...\" on_grab_fields: - \"overview\" - \"quality\" - \"release\"","title":"on_grab_fields"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.DiscordConnection.on_import_fields","text":"Set the fields that are passed in for this 'on import' notification. By default, all fields are passed in. Values: overview rating genres quality codecs group size languages subtitles links release poster fanart Example: ... connect: definitions: Discord: type: \"discord\" webhook_url: \"https://...\" on_import_fields: - \"overview\" - \"quality\" - \"release\"","title":"on_import_fields"},{"location":"plugins/sonarr/configuration/connect/#email","text":"Bases: Connection Send media update and health alert messages to an email address. Supported notification triggers: All except on_rename","title":"Email"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.server","text":"Hostname or IP address of the SMTP server to send outbound mail to.","title":"server"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.port","text":"The port number on the SMTP server to use to submit mail. The default is to use STARTTLS on the standard SMTP submission port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.use_encryption","text":"Whether or not to use encryption when sending mail to the SMTP server. If the port number is set to 465, SMTPS (implicit TLS) will be used. Any other port number will result in STARTTLS being used. The default is to enable encryption.","title":"use_encryption"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.username","text":"SMTP username of the account to send the mail from.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.password","text":"SMTP password of the account to send the mail from.","title":"password"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.from_address","text":"Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> .","title":"from_address"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.recipient_addresses","text":"List of email addresses to directly address the mail to. At least one address must be provided.","title":"recipient_addresses"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.cc_addresses","text":"Optional list of email addresses to copy (CC) the mail to.","title":"cc_addresses"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmailConnection.bcc_addresses","text":"Optional list of email addresses to blind copy (BCC) the mail to.","title":"bcc_addresses"},{"location":"plugins/sonarr/configuration/connect/#emby","text":"Bases: Connection Send media update and health alert notifications to an Emby server. Supported notification triggers: All","title":"Emby"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.host","text":"Emby server hostname or IP address.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.port","text":"Emby server port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.use_ssl","text":"Use HTTPS to connect to Emby, instead of HTTP.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.api_key","text":"API key to authenticate with Emby.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.send_notifications","text":"Have MediaBrowser send notifications to configured providers.","title":"send_notifications"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.EmbyConnection.update_library","text":"Update the Emby library on import, rename, or delete.","title":"update_library"},{"location":"plugins/sonarr/configuration/connect/#gotify","text":"Bases: Connection Send media update and health alert push notifications via a Gotify server. Supported notification triggers: All except on_rename","title":"Gotify"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.GotifyConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.GotifyConnection.server","text":"Gotify server URL. (e.g. http://gotify.example.com:1234 )","title":"server"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.GotifyConnection.app_token","text":"App token to use to authenticate with Gotify.","title":"app_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.GotifyConnection.priority","text":"Gotify notification priority. Values: min low normal high","title":"priority"},{"location":"plugins/sonarr/configuration/connect/#join","text":"Bases: Connection Send media update and health alert push notifications via Join. Supported notification triggers: All except on_rename","title":"Join"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.JoinConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.JoinConnection.api_key","text":"API key to use to authenticate with Join.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.JoinConnection.device_names","text":"List of full or partial device names you'd like to send notifications to. If unset or empty, all devices will receive notifications.","title":"device_names"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.JoinConnection.priority","text":"Join push notification priority. Values: silent quiet normal high emergency","title":"priority"},{"location":"plugins/sonarr/configuration/connect/#kodi-xbmc","text":"Bases: Connection Send media update and health alert notifications to a Kodi (XBMC) instance. Supported notification triggers: All","title":"Kodi (XBMC)"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.type","text":"Type values associated with this kind of connection. (Use either one)","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.host","text":"Kodi hostname or IP address.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.port","text":"Kodi API port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.use_ssl","text":"Connect to Kodi over HTTPS instead of HTTP.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.username","text":"Username to use to login to Kodi.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.password","text":"Password to use to login to Kodi.","title":"password"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.gui_notification","text":"Enable showing notifications from Sonarr in the Kodi GUI.","title":"gui_notification"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.display_time","text":"How long the notification will be displayed for (in seconds).","title":"display_time"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.update_library","text":"Update the Kodi library on import/rename.","title":"update_library"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.clean_library","text":"Clean the Kodi library after update.","title":"clean_library"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.KodiConnection.always_update","text":"Update the Kodi library even when a video is playing.","title":"always_update"},{"location":"plugins/sonarr/configuration/connect/#mailgun","text":"Bases: Connection Send media update and health alert emails via the Mailgun delivery service. Supported notification triggers: All except on_rename","title":"Mailgun"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.api_key","text":"API key to use to authenticate with Mailgun.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.use_eu_endpoint","text":"Send mail via the EU endpoint instead of the US one.","title":"use_eu_endpoint"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.from_address","text":"Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> .","title":"from_address"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.sender_domain","text":"The domain from which the mail will be sent.","title":"sender_domain"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.MailgunConnection.recipient_addresses","text":"The recipient email addresses of the notification mail.","title":"recipient_addresses"},{"location":"plugins/sonarr/configuration/connect/#plex-home-theater","text":"Bases: Connection Send media update notifications to a Plex Home Theater instance. Supported notification triggers: on_grab , on_import , on_upgrade only","title":"Plex Home Theater"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.host","text":"Plex Home Theater hostname or IP address.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.port","text":"Plex Home Theater API port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.use_ssl","text":"Connect to Plex Home Theater over HTTPS instead of HTTP.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.username","text":"Username to use to login to Plex Home Theater.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.password","text":"Password to use to login to Plex Home Theater.","title":"password"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.gui_notification","text":"Enable showing notifications from Sonarr in the Plex Home Theater GUI.","title":"gui_notification"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.display_time","text":"How long the notification will be displayed for (in seconds).","title":"display_time"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.update_library","text":"Update the Plex Home Theater library on import/rename.","title":"update_library"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.clean_library","text":"Clean the Plex Home Theater library after update.","title":"clean_library"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexHomeTheaterConnection.always_update","text":"Update the Plex Home THeater library even when a video is playing.","title":"always_update"},{"location":"plugins/sonarr/configuration/connect/#plex-media-center","text":"Bases: Connection Send media update notifications to a Plex Media Center instance. Supported notification triggers: on_grab , on_import , on_upgrade only","title":"Plex Media Center"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaCenterConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaCenterConnection.host","text":"Plex Media Center hostname or IP address.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaCenterConnection.port","text":"Plex Media Center API port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaCenterConnection.username","text":"Username to use to login to Plex Media Center.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaCenterConnection.password","text":"Password to use to login to Plex Media Center.","title":"password"},{"location":"plugins/sonarr/configuration/connect/#plex-media-server","text":"Bases: Connection Send media update notifications to a Plex Media Server instance. Supported notification triggers: All except on_grab , on_health_issue and on_application_update","title":"Plex Media Server"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.host","text":"Plex Media Server hostname or IP address.","title":"host"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.port","text":"Plex Media Server API port.","title":"port"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.use_ssl","text":"Connect to Plex Media Server over HTTPS instead of HTTP.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.auth_token","text":"Plex authentication token. If unsure on where to find this token, follow this guide from Plex.tv .","title":"auth_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PlexMediaServerConnection.update_library","text":"Update the Plex Media Server library on import, rename or delete.","title":"update_library"},{"location":"plugins/sonarr/configuration/connect/#prowl","text":"Bases: Connection Send media update and health alert push notifications to a Prowl client. Supported notification triggers: All except on_rename","title":"Prowl"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.ProwlConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.ProwlConnection.api_key","text":"API key to use when authenticating with Prowl.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.ProwlConnection.priority","text":"Prowl push notification priority. Values: verylow low normal high emergency","title":"priority"},{"location":"plugins/sonarr/configuration/connect/#pushbullet","text":"Bases: Connection Send media update and health alert push notifications to 1 or more Pushbullet devices. Supported notification triggers: All except on_rename","title":"Pushbullet"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushbulletConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushbulletConnection.api_key","text":"API key to use when authenticating with Pushbullet.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushbulletConnection.device_ids","text":"List of device IDs to send notifications to. If unset or empty, send to all devices.","title":"device_ids"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushbulletConnection.channel_tags","text":"List of Channel Tags to send notifications to.","title":"channel_tags"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushbulletConnection.sender_id","text":"The device ID to send notifications from ( device_iden in the device's URL on pushbullet.com ). Leave unset, blank or set to None to send from yourself.","title":"sender_id"},{"location":"plugins/sonarr/configuration/connect/#pushover","text":"Bases: Connection Send media update and health alert push notifications to 1 or more Pushover devices. Supported notification triggers: All except on_rename","title":"Pushover"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.user_key","text":"User key to use to authenticate with your Pushover account.","title":"user_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.api_key","text":"API key assigned to Sonarr in Pushover.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.devices","text":"List of device names to send notifications to. If unset or empty, send to all devices.","title":"devices"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.priority","text":"Pushover push notification priority. Values: silent quiet normal high emergency","title":"priority"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.retry","text":"Interval to retry emergency alerts, in seconds. Minimum 30 seconds. Set to 0 to disable retrying emergency alerts.","title":"retry"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.expire","text":"Threshold for retrying emergency alerts, in seconds. If retry is set, this should be set to a higher value. Maximum 86400 seconds (1 day).","title":"expire"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.PushoverConnection.sound","text":"Notification sound to use on devices. Leave unset, blank or set to None to use the default.","title":"sound"},{"location":"plugins/sonarr/configuration/connect/#sendgrid","text":"Bases: Connection Send media update and health alert emails via the SendGrid delivery service. Supported notification triggers: All except on_rename","title":"SendGrid"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SendgridConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SendgridConnection.api_key","text":"API key to use to authenticate with SendGrid.","title":"api_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SendgridConnection.from_address","text":"Email address to send the mail as. RFC-5322 formatted mailbox addresses are also supported, e.g. Sonarr Notifications <sonarr@example.com> .","title":"from_address"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SendgridConnection.recipient_addresses","text":"The recipient email addresses of the notification mail.","title":"recipient_addresses"},{"location":"plugins/sonarr/configuration/connect/#slack","text":"Bases: Connection Send media update and health alert messages to a Slack channel. Supported notification triggers: All","title":"Slack"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SlackConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SlackConnection.webhook_url","text":"Webhook URL for the Slack channel to send to.","title":"webhook_url"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SlackConnection.username","text":"Username to post as.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SlackConnection.icon","text":"The icon that is used for messages from this integration (emoji or URL). If unset, blank or set to None , use the default for the user.","title":"icon"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SlackConnection.channel","text":"If set, overrides the default channel in the webhook.","title":"channel"},{"location":"plugins/sonarr/configuration/connect/#synology-indexer","text":"Bases: Connection Send media update notifications to the local Synology Indexer. Supported notification triggers: All except on_grab , on_health_issue and on_application_update","title":"Synology Indexer"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SynologyIndexerConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.SynologyIndexerConnection.update_library","text":"Update the library on media import/rename/delete.","title":"update_library"},{"location":"plugins/sonarr/configuration/connect/#telegram","text":"Bases: Connection Send media update and health alert messages to a Telegram chat room. Supported notification triggers: All","title":"Telegram"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TelegramConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TelegramConnection.bot_token","text":"The bot token assigned to the Sonarr instance.","title":"bot_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TelegramConnection.chat_id","text":"The ID of the chat room to send messages to. You must start a conversation with the bot or add it to your group to receive messages.","title":"chat_id"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TelegramConnection.send_silently","text":"Sends the message silently. Users will receive a notification with no sound.","title":"send_silently"},{"location":"plugins/sonarr/configuration/connect/#trakt","text":"Bases: Connection Send media update and health alert messages to the Trakt media tracker. Note Sonarr directly authenticates with Trakt to generate tokens for it to use. At the moment, the easiest way to generate the tokens for Buildarr is to do it using the GUI within Sonarr, and use the following shell command to retrieve the generated configuration. $ curl -X \"GET\" \"<sonarr-url>/api/v3/notification\" -H \"X-Api-Key: <api-key>\" Supported notification triggers: All except on_grab , on_rename , on_health_issue and on_application_update","title":"Trakt"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TraktConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TraktConnection.access_token","text":"Access token for Sonarr from Trakt.","title":"access_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TraktConnection.refresh_token","text":"Refresh token for Sonarr from Trakt.","title":"refresh_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TraktConnection.expires","text":"Expiry date-time of the access token, preferably in ISO-8601 format and in UTC. Example: 2023-05-10T15:34:08.117451Z","title":"expires"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TraktConnection.auth_user","text":"The username being authenticated in Trakt.","title":"auth_user"},{"location":"plugins/sonarr/configuration/connect/#twitter","text":"Bases: Connection Send media update and health alert messages via Twitter. Twitter requires you to create an application for their API to generate the necessary keys and secrets. If unsure how to proceed, refer to these guides from Twitter and WikiArr . Access tokens can be obtained using the prodecure documented here . Supported notification triggers: All except on_rename","title":"Twitter"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.consumer_key","text":"Consumer key from a Twitter application.","title":"consumer_key"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.consumer_secret","text":"Consumer key from a Twitter application.","title":"consumer_secret"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.access_token","text":"Access token for a Twitter user.","title":"access_token"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.access_token_secret","text":"Access token secret for a Twitter user.","title":"access_token_secret"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.mention","text":"Mention this user in sent tweets.","title":"mention"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.TwitterConnection.direct_message","text":"Send a direct message instead of a public message.","title":"direct_message"},{"location":"plugins/sonarr/configuration/connect/#webhook","text":"Bases: Connection Send media update and health alert notifications to a webhook API. Supported notification triggers: All","title":"Webhook"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.WebhookConnection.type","text":"Type value associated with this kind of connection.","title":"type"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.WebhookConnection.method","text":"HTTP request method type to use. Values: POST PUT","title":"method"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.WebhookConnection.username","text":"Webhook API username.","title":"username"},{"location":"plugins/sonarr/configuration/connect/#buildarr.plugins.sonarr.config.connect.WebhookConnection.password","text":"Webhook API password.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/","text":"Download Clients # Bases: SonarrConfigBase Download clients retrieve media files being tracked by Sonarr, and store them in a location Sonarr can access to manage the downloaded files. Download clients that use Usenet or BitTorrent can be configured, as well as remote path mappings and other related options. --- sonarr: settings: download_clients: enable_completed_download_handling: true redownload_failed: true delete_unmanaged: true definitions: Transmission: type: \"transmission\" host: \"transmission\" port: 9091 ... remote_path_mappings: definitions: - host: \"transmission\" remote_path: \"/remote/path\" local_path: \"/local/path\" ... enable_completed_download_handling: bool = True class-attribute # Automatically import completed downloads from download clients. redownload_failed: bool = True class-attribute # Automatically search for and attempt to download a different release. delete_unmanaged: bool = False class-attribute # Automatically delete download clients not defined in Buildarr. definitions: DownloadClientDefinitions = {} class-attribute # Download client definitions, for connecting with external media downloaders. remote_path_mappings = SonarrRemotePathMappingsSettingsConfig() class-attribute # Configuration for mapping paths on download client hosts to their counterparts on this Sonarr instance. For more information, refer to \"Configuring remote path mappings\". Note Before Sonarr can send requests to download clients, at least one Usenet or torrent indexer will need to be configured. Sonarr will then send download requests to a compatible client, or the download client the indexer has been assigned to. Configuring download clients # Bases: SonarrConfigBase Download clients are defined using the following format. Here is an example of a Transmission download client being configured. --- sonarr: settings: download_clients: definitions: Transmission: # Name of the download client type: \"transmission\" # Type of download client enable: true # Enable the download client in Sonarr host: \"transmission\" port: 9091 category: \"sonarr\" # Define any other type-specific or global # download client attributes as needed. Every download client definition must have the correct type value defined, to tell Buildarr what type of download client to configure. The name of the download client definition is just a name, and has no meaning. enable can be set to False to keep the download client configured on Sonarr, but disabled so that it is inactive. The below attributes can be defined on any type of download client. enable: bool = True class-attribute # When True , this download client is active and Sonarr is able to send requests to it. priority: int = 1 class-attribute # Download client priority. Clients with a lower value are prioritised. Round-robin is used for clients with the same priority. remove_completed_downloads: bool = True class-attribute # Remove completed downloads from the download client history. For torrents, this happens once seeding is complete. remove_failed_downloads: bool = True class-attribute # Remove failed downloads from the download client history. (Usenet clients only) tags: Set[NonEmptyStr] = set() class-attribute # Sonarr tags to assign to the download clients. Only media under those tags will be assigned to this client. If no tags are assigned, all media can use the client. Usenet download clients # These download clients retrieve media using the popular Usenet discussion and content delivery system. Download Station # Bases: UsenetDownloadClient Download client which uses Usenet via Download Station. type: Literal['downloadstation-usenet'] = 'downloadstation-usenet' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Download Station host name. port: Port = 5000 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. directory: Optional[str] = None class-attribute # Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location. NZBGet # Bases: UsenetDownloadClient NZBGet download client. type: Literal['nzbget'] = 'nzbget' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # NZBGet host name. port: Port = 5000 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the NZBGet url, e.g. http://[host]:[port]/[url_base]/jsonrpc . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. recent_priority: NzbgetPriority = NzbgetPriority.normal class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: verylow low normal high veryhigh force older_priority: NzbgetPriority = NzbgetPriority.normal class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: verylow low normal high veryhigh force add_paused: bool = False class-attribute # Add media to the download client in the paused state. This option requires NZBGet version 16.0 or later. NZBVortex # Bases: UsenetDownloadClient NZBVortex download client. type: Literal['nzbvortex'] = 'nzbvortex' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # NZBVortex host name. port: Port = 4321 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the NZBVortex url, e.g. http://[host]:[port]/[url_base]/api . api_key: Password class-attribute # API key to use to authenticate with the download client. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. recent_priority: NzbvortexPriority = NzbvortexPriority.normal class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: low normal high older_priority: NzbvortexPriority = NzbvortexPriority.normal class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: low normal high Pneumatic # Bases: UsenetDownloadClient Download client for the Pneumatic NZB add-on for Kodi/XMBC. type: Literal['pneumatic'] = 'pneumatic' class-attribute # Type value associated with this kind of download client. nzb_folder: NonEmptyStr class-attribute # Folder in which Sonarr will store .nzb files. This folder will need to be reachable from Kodi/XMBC. strm_folder: NonEmptyStr class-attribute # Folder from which .strm files will be imported by Drone. SABnzbd # Bases: UsenetDownloadClient SABnzbd download client. type: Literal['sabnzbd'] = 'sabnzbd' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # SABnzbd host name. port: Port = 4321 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the SABnzbd URL, e.g. http://[host]:[port]/[url_base]/api/ . api_key: Password class-attribute # API key to use to authenticate with the download client. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. recent_priority: SabnzbdPriority = SabnzbdPriority.default class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: default paused low normal high force older_priority: SabnzbdPriority = SabnzbdPriority.default class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: default paused low normal high force Usenet Blackhole # Bases: UsenetDownloadClient Usenet Blackhole download client. type: Literal['usenet-blackhole'] = 'usenet-blackhole' class-attribute # Type value associated with this kind of download client. nzb_folder: NonEmptyStr class-attribute # Folder in which Sonarr will store .nzb files. watch_folder: NonEmptyStr class-attribute # Folder from which Sonarr should import completed downloads. Torrent download clients # These download clients use the BitTorrent peer-to-peer file sharing protocol to retrieve media files. Aria2 # Bases: TorrentDownloadClient Aria2 download client. type: Literal['aria2'] = 'aria2' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Aria2 host name. port: Port = 6800 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. rpc_path: NonEmptyStr = '/rpc' class-attribute # XML RPC path in the Aria2 client URL. secret_token: Password class-attribute # Secret token to use to authenticate with the download client. Deluge # Bases: TorrentDownloadClient Deluge download client. type: Literal['deluge'] = 'deluge' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Deluge host name. port: Port = 8112 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the Deluge JSON URL, e.g. http://[host]:[port]/[url_base]/json . password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = 'tv-sonarr' class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. postimport_category: Optional[str] = None class-attribute # Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category. recent_priority: DelugePriority = DelugePriority.last class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: last first older_priority: DelugePriority = DelugePriority.last class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: last first Download Station # Bases: TorrentDownloadClient Download client which uses torrents via Download Station. type: Literal['downloadstation-torrent'] = 'downloadstation-torrent' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Download Station host name. port: Port = 5000 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. directory: Optional[str] = None class-attribute # Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location. Flood # Bases: TorrentDownloadClient Flood download client. type: Literal['flood'] = 'flood' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Flood host name. port: Port = 3000 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Optionally adds a prefix to Flood API, such as [protocol]://[host]:[port]/[url_base]api . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. destination: Optional[str] = None class-attribute # Manually specified download destination. flood_tags: Set[NonEmptyStr] = {'sonarr'} class-attribute # Initial tags of a download within Flood. To be recognized, a download must have all initial tags. This avoids conflicts with unrelated downloads. postimport_tags: Set[NonEmptyStr] = set() class-attribute # Tags to append within Flood after a download has been imported into Sonarr. additional_tags: Set[FloodMediaTag] = set() class-attribute # Adds properties of media as tags within Flood. start_on_add: bool = True class-attribute # Immediately start download once the media has been added to the client. Hadouken # Bases: TorrentDownloadClient Hadouken download client. type: Literal['hadouken'] = 'hadouken' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # Hadouken host name. port: Port = 7070 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the Hadouken url, e.g. http://[host]:[port]/[url_base]/api . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: NonEmptyStr = 'sonarr-tv' class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. qBittorrent # Bases: TorrentDownloadClient qBittorrent download client. type: Literal['qbittorrent'] = 'qbittorrent' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # qBittorrent host name. port: Port = 8080 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the qBittorrent URL, e.g. http://[host]:[port]/[url_base]/api . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = 'tv-sonarr' class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. postimport_category: Optional[str] = None class-attribute # Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category. recent_priority: QbittorrentPriority = QbittorrentPriority.last class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: last first older_priority: QbittorrentPriority = QbittorrentPriority.last class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: last first initial_state: QbittorrentState = QbittorrentState.start class-attribute # Initial state for torrents added to qBittorrent. Note that forced torrents do not abide by seed restrictions. sequential_order: bool = False class-attribute # Download files in sequential order. This option requires qBittorrent version 4.1.0 or later. first_and_last_first: bool = False class-attribute # Download first and last pieces of a file first. This option requires qBittorrent version 4.1.0 or later. RTorrent (ruTorrent) # Bases: TorrentDownloadClient RTorrent (ruTorrent) download client. type: Literal['rtorrent', 'rutorrent'] = 'rtorrent' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # RTorrent host name. port: Port = 8080 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: NonEmptyStr = 'RPC2' class-attribute # Path to the XMLRPC endpoint, e.g. http(s)://[host]:[port]/[url_base] . When using RTorrent this usually is RPC2 or plugins/rpc/rpc.php . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = 'tv-sonarr' class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. postimport_category: Optional[str] = None class-attribute # Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category. recent_priority: RtorrentPriority = RtorrentPriority.normal class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: verylow low normal high older_priority: RtorrentPriority = RtorrentPriority.normal class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: verylow low normal high add_stopped: bool = False class-attribute # Enabling will add torrents and magnets to RTorrent in a stopped state. This may break magnet files. Torrent Blackhole # Bases: TorrentDownloadClient Torrent Blackhole download client. type: Literal['torrent-blackhole'] = 'torrent-blackhole' class-attribute # Type value associated with this kind of download client. torrent_folder: NonEmptyStr class-attribute # Folder in which Sonarr will store .torrent files. watch_folder: NonEmptyStr class-attribute # Folder from which Sonarr should import completed downloads. save_magnet_files: bool = False class-attribute # Save the magnet link if no .torrent file is available. Only useful if the download client supports magnets saved to a file. magnet_file_extension: NonEmptyStr = '.magnet' class-attribute # Extension to use for magnet links. read_only: bool = True class-attribute # Instead of moving files, this will instruct Sonarr to copy or hard link (depending on settings/system configuration). Transmission/Vuze # Transmission and Vuze use the same configuration parameters. To use Transmission, set the type attribute in the download client to transmission . To use Vuze, set the type attribute in the download client to vuze . Bases: TorrentDownloadClient Configuration options common to both Transmission and Vuze download clients: host: NonEmptyStr class-attribute # Transmission/Vuze host name. port: Port = 9091 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: NonEmptyStr = '/transmission/' class-attribute # Adds a prefix to the Transmission/Vuze RPC url, e.g. http://[host]:[port][url_base]rpc . This is set by default in most clients to /transmission/ . username: Optional[str] = None class-attribute # User name to use when authenticating with the download client, if required. password: Optional[Password] = None class-attribute # Password to use to authenticate the download client user, if required. category: Optional[str] = None class-attribute # Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. directory: Optional[str] = None class-attribute # Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location. recent_priority: TransmissionPriority = TransmissionPriority.last class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: last first older_priority: TransmissionPriority = TransmissionPriority.last class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: last first add_paused: bool = False class-attribute # Add media to the download client in the Paused state. uTorrent # Bases: TorrentDownloadClient uTorrent download client. type: Literal['utorrent'] = 'utorrent' class-attribute # Type value associated with this kind of download client. host: NonEmptyStr class-attribute # uTorrent host name. port: Port = 8080 class-attribute # Download client access port. use_ssl: bool = False class-attribute # Use a secure connection when connecting to the download client. url_base: Optional[str] = None class-attribute # Adds a prefix to the uTorrent URL, e.g. http://[host]:[port]/[url_base]/api . username: NonEmptyStr class-attribute # User name to use when authenticating with the download client. password: Password class-attribute # Password to use to authenticate the download client user. category: Optional[str] = 'tv-sonarr' class-attribute # Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended. postimport_category: Optional[str] = None class-attribute # Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category. recent_priority: UtorrentPriority = UtorrentPriority.last class-attribute # Priority to use when grabbing episodes that aired within the last 14 days. Values: last first older_priority: UtorrentPriority = UtorrentPriority.last class-attribute # Priority to use when grabbing episodes that aired over 14 days ago. Values: last first initial_state: UtorrentState = UtorrentState.start class-attribute # Initial state for torrents added to uTorrent. Configuring remote path mappings # Bases: SonarrConfigBase Remote path mappings are used to associate a path on a download client remote host with its associated path on the local Sonarr instance. The main use case for this is when Sonarr and the download client are not running on the same system, or when Docker is used to isolate these services and the mountpoints for media locations are not consistent between the containers. sonarr: settings: download_clients: definitions: Transmission: type: \"transmission\" host: \"transmission\" port: 9091 remote_path_mappings: delete_unmanaged: false # Optional definitions: - host: \"transmission\" remote_path: \"/remote/path\" local_path: \"/local/path\" ensure: \"present\" # Optional Remote path mappings can be difficult to properly configure. TRaSH-Guides provides an excellent guide that explains what they are for, and how to use them. delete_unmanaged: bool = False class-attribute # Automatically delete remote path mappings not configured in Buildarr. Deleting existing remote path mappings can cause problems with a running Sonarr instance. Think carefully before you enable this option. definitions: List[RemotePathMapping] = [] class-attribute # Remote path mapping definitions. Remote path mapping parameters # Bases: SonarrConfigBase Remote path mapping definitions themselves are relatively simple. They can be configured with a desired ensure state, however, which Buildarr uses to control whether to create or delete the remote path mapping. Ensure this value is set appropriately. host: NonEmptyStr class-attribute # The name of the host, as specified for the remote download client. remote_path: NonEmptyStr class-attribute # Root path to the directory that the download client accesses. local_path: NonEmptyStr class-attribute # The path that Sonarr should use to access the remote path locally. ensure: Ensure = Ensure.present class-attribute # Desired state for this resource. If set to present , the resource is created on the remote instance if it does not exist. If set to absent , the resource will be destroyed on the remote instance if it exists. This takes effect even if the delete_unmanaged is set to False for all remote path mappings.","title":"Download Clients"},{"location":"plugins/sonarr/configuration/download-clients/#download-clients","text":"Bases: SonarrConfigBase Download clients retrieve media files being tracked by Sonarr, and store them in a location Sonarr can access to manage the downloaded files. Download clients that use Usenet or BitTorrent can be configured, as well as remote path mappings and other related options. --- sonarr: settings: download_clients: enable_completed_download_handling: true redownload_failed: true delete_unmanaged: true definitions: Transmission: type: \"transmission\" host: \"transmission\" port: 9091 ... remote_path_mappings: definitions: - host: \"transmission\" remote_path: \"/remote/path\" local_path: \"/local/path\" ...","title":"Download Clients"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.SonarrDownloadClientsSettingsConfig.enable_completed_download_handling","text":"Automatically import completed downloads from download clients.","title":"enable_completed_download_handling"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.SonarrDownloadClientsSettingsConfig.redownload_failed","text":"Automatically search for and attempt to download a different release.","title":"redownload_failed"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.SonarrDownloadClientsSettingsConfig.delete_unmanaged","text":"Automatically delete download clients not defined in Buildarr.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.SonarrDownloadClientsSettingsConfig.definitions","text":"Download client definitions, for connecting with external media downloaders.","title":"definitions"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.SonarrDownloadClientsSettingsConfig.remote_path_mappings","text":"Configuration for mapping paths on download client hosts to their counterparts on this Sonarr instance. For more information, refer to \"Configuring remote path mappings\". Note Before Sonarr can send requests to download clients, at least one Usenet or torrent indexer will need to be configured. Sonarr will then send download requests to a compatible client, or the download client the indexer has been assigned to.","title":"remote_path_mappings"},{"location":"plugins/sonarr/configuration/download-clients/#configuring-download-clients","text":"Bases: SonarrConfigBase Download clients are defined using the following format. Here is an example of a Transmission download client being configured. --- sonarr: settings: download_clients: definitions: Transmission: # Name of the download client type: \"transmission\" # Type of download client enable: true # Enable the download client in Sonarr host: \"transmission\" port: 9091 category: \"sonarr\" # Define any other type-specific or global # download client attributes as needed. Every download client definition must have the correct type value defined, to tell Buildarr what type of download client to configure. The name of the download client definition is just a name, and has no meaning. enable can be set to False to keep the download client configured on Sonarr, but disabled so that it is inactive. The below attributes can be defined on any type of download client.","title":"Configuring download clients"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadClient.enable","text":"When True , this download client is active and Sonarr is able to send requests to it.","title":"enable"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadClient.priority","text":"Download client priority. Clients with a lower value are prioritised. Round-robin is used for clients with the same priority.","title":"priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadClient.remove_completed_downloads","text":"Remove completed downloads from the download client history. For torrents, this happens once seeding is complete.","title":"remove_completed_downloads"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadClient.remove_failed_downloads","text":"Remove failed downloads from the download client history. (Usenet clients only)","title":"remove_failed_downloads"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadClient.tags","text":"Sonarr tags to assign to the download clients. Only media under those tags will be assigned to this client. If no tags are assigned, all media can use the client.","title":"tags"},{"location":"plugins/sonarr/configuration/download-clients/#usenet-download-clients","text":"These download clients retrieve media using the popular Usenet discussion and content delivery system.","title":"Usenet download clients"},{"location":"plugins/sonarr/configuration/download-clients/#download-station","text":"Bases: UsenetDownloadClient Download client which uses Usenet via Download Station.","title":"Download Station"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.host","text":"Download Station host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.category","text":"Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationUsenetDownloadClient.directory","text":"Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location.","title":"directory"},{"location":"plugins/sonarr/configuration/download-clients/#nzbget","text":"Bases: UsenetDownloadClient NZBGet download client.","title":"NZBGet"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.host","text":"NZBGet host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.url_base","text":"Adds a prefix to the NZBGet url, e.g. http://[host]:[port]/[url_base]/jsonrpc .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: verylow low normal high veryhigh force","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: verylow low normal high veryhigh force","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbgetDownloadClient.add_paused","text":"Add media to the download client in the paused state. This option requires NZBGet version 16.0 or later.","title":"add_paused"},{"location":"plugins/sonarr/configuration/download-clients/#nzbvortex","text":"Bases: UsenetDownloadClient NZBVortex download client.","title":"NZBVortex"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.host","text":"NZBVortex host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.url_base","text":"Adds a prefix to the NZBVortex url, e.g. http://[host]:[port]/[url_base]/api .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.api_key","text":"API key to use to authenticate with the download client.","title":"api_key"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: low normal high","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.NzbvortexDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: low normal high","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#pneumatic","text":"Bases: UsenetDownloadClient Download client for the Pneumatic NZB add-on for Kodi/XMBC.","title":"Pneumatic"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.PneumaticDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.PneumaticDownloadClient.nzb_folder","text":"Folder in which Sonarr will store .nzb files. This folder will need to be reachable from Kodi/XMBC.","title":"nzb_folder"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.PneumaticDownloadClient.strm_folder","text":"Folder from which .strm files will be imported by Drone.","title":"strm_folder"},{"location":"plugins/sonarr/configuration/download-clients/#sabnzbd","text":"Bases: UsenetDownloadClient SABnzbd download client.","title":"SABnzbd"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.host","text":"SABnzbd host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.url_base","text":"Adds a prefix to the SABnzbd URL, e.g. http://[host]:[port]/[url_base]/api/ .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.api_key","text":"API key to use to authenticate with the download client.","title":"api_key"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: default paused low normal high force","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.SabnzbdDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: default paused low normal high force","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#usenet-blackhole","text":"Bases: UsenetDownloadClient Usenet Blackhole download client.","title":"Usenet Blackhole"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UsenetBlackholeDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UsenetBlackholeDownloadClient.nzb_folder","text":"Folder in which Sonarr will store .nzb files.","title":"nzb_folder"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UsenetBlackholeDownloadClient.watch_folder","text":"Folder from which Sonarr should import completed downloads.","title":"watch_folder"},{"location":"plugins/sonarr/configuration/download-clients/#torrent-download-clients","text":"These download clients use the BitTorrent peer-to-peer file sharing protocol to retrieve media files.","title":"Torrent download clients"},{"location":"plugins/sonarr/configuration/download-clients/#aria2","text":"Bases: TorrentDownloadClient Aria2 download client.","title":"Aria2"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.host","text":"Aria2 host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.rpc_path","text":"XML RPC path in the Aria2 client URL.","title":"rpc_path"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.Aria2DownloadClient.secret_token","text":"Secret token to use to authenticate with the download client.","title":"secret_token"},{"location":"plugins/sonarr/configuration/download-clients/#deluge","text":"Bases: TorrentDownloadClient Deluge download client.","title":"Deluge"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.host","text":"Deluge host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.url_base","text":"Adds a prefix to the Deluge JSON URL, e.g. http://[host]:[port]/[url_base]/json .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.postimport_category","text":"Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category.","title":"postimport_category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: last first","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DelugeDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: last first","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#download-station_1","text":"Bases: TorrentDownloadClient Download client which uses torrents via Download Station.","title":"Download Station"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.host","text":"Download Station host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.category","text":"Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.DownloadstationTorrentDownloadClient.directory","text":"Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location.","title":"directory"},{"location":"plugins/sonarr/configuration/download-clients/#flood","text":"Bases: TorrentDownloadClient Flood download client.","title":"Flood"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.host","text":"Flood host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.url_base","text":"Optionally adds a prefix to Flood API, such as [protocol]://[host]:[port]/[url_base]api .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.destination","text":"Manually specified download destination.","title":"destination"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.flood_tags","text":"Initial tags of a download within Flood. To be recognized, a download must have all initial tags. This avoids conflicts with unrelated downloads.","title":"flood_tags"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.postimport_tags","text":"Tags to append within Flood after a download has been imported into Sonarr.","title":"postimport_tags"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.additional_tags","text":"Adds properties of media as tags within Flood.","title":"additional_tags"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.FloodDownloadClient.start_on_add","text":"Immediately start download once the media has been added to the client.","title":"start_on_add"},{"location":"plugins/sonarr/configuration/download-clients/#hadouken","text":"Bases: TorrentDownloadClient Hadouken download client.","title":"Hadouken"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.host","text":"Hadouken host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.url_base","text":"Adds a prefix to the Hadouken url, e.g. http://[host]:[port]/[url_base]/api .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.HadoukenDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#qbittorrent","text":"Bases: TorrentDownloadClient qBittorrent download client.","title":"qBittorrent"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.host","text":"qBittorrent host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.url_base","text":"Adds a prefix to the qBittorrent URL, e.g. http://[host]:[port]/[url_base]/api .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.postimport_category","text":"Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category.","title":"postimport_category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: last first","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: last first","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.initial_state","text":"Initial state for torrents added to qBittorrent. Note that forced torrents do not abide by seed restrictions.","title":"initial_state"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.sequential_order","text":"Download files in sequential order. This option requires qBittorrent version 4.1.0 or later.","title":"sequential_order"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.QbittorrentDownloadClient.first_and_last_first","text":"Download first and last pieces of a file first. This option requires qBittorrent version 4.1.0 or later.","title":"first_and_last_first"},{"location":"plugins/sonarr/configuration/download-clients/#rtorrent-rutorrent","text":"Bases: TorrentDownloadClient RTorrent (ruTorrent) download client.","title":"RTorrent (ruTorrent)"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.host","text":"RTorrent host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.url_base","text":"Path to the XMLRPC endpoint, e.g. http(s)://[host]:[port]/[url_base] . When using RTorrent this usually is RPC2 or plugins/rpc/rpc.php .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.postimport_category","text":"Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category.","title":"postimport_category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: verylow low normal high","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: verylow low normal high","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.RtorrentDownloadClient.add_stopped","text":"Enabling will add torrents and magnets to RTorrent in a stopped state. This may break magnet files.","title":"add_stopped"},{"location":"plugins/sonarr/configuration/download-clients/#torrent-blackhole","text":"Bases: TorrentDownloadClient Torrent Blackhole download client.","title":"Torrent Blackhole"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.torrent_folder","text":"Folder in which Sonarr will store .torrent files.","title":"torrent_folder"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.watch_folder","text":"Folder from which Sonarr should import completed downloads.","title":"watch_folder"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.save_magnet_files","text":"Save the magnet link if no .torrent file is available. Only useful if the download client supports magnets saved to a file.","title":"save_magnet_files"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.magnet_file_extension","text":"Extension to use for magnet links.","title":"magnet_file_extension"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TorrentBlackholeDownloadClient.read_only","text":"Instead of moving files, this will instruct Sonarr to copy or hard link (depending on settings/system configuration).","title":"read_only"},{"location":"plugins/sonarr/configuration/download-clients/#transmissionvuze","text":"Transmission and Vuze use the same configuration parameters. To use Transmission, set the type attribute in the download client to transmission . To use Vuze, set the type attribute in the download client to vuze . Bases: TorrentDownloadClient Configuration options common to both Transmission and Vuze download clients:","title":"Transmission/Vuze"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.host","text":"Transmission/Vuze host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.url_base","text":"Adds a prefix to the Transmission/Vuze RPC url, e.g. http://[host]:[port][url_base]rpc . This is set by default in most clients to /transmission/ .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.username","text":"User name to use when authenticating with the download client, if required.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.password","text":"Password to use to authenticate the download client user, if required.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.category","text":"Associate media from Sonarr with a category. Creates a [category] subdirectory in the output directory. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.directory","text":"Optional shared folder to put downloads into. Leave blank, set to null or undefined to use the default download client location.","title":"directory"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: last first","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: last first","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.TransmissionDownloadClientBase.add_paused","text":"Add media to the download client in the Paused state.","title":"add_paused"},{"location":"plugins/sonarr/configuration/download-clients/#utorrent","text":"Bases: TorrentDownloadClient uTorrent download client.","title":"uTorrent"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.type","text":"Type value associated with this kind of download client.","title":"type"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.host","text":"uTorrent host name.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.port","text":"Download client access port.","title":"port"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.use_ssl","text":"Use a secure connection when connecting to the download client.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.url_base","text":"Adds a prefix to the uTorrent URL, e.g. http://[host]:[port]/[url_base]/api .","title":"url_base"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.username","text":"User name to use when authenticating with the download client.","title":"username"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.password","text":"Password to use to authenticate the download client user.","title":"password"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.category","text":"Associate media from Sonarr with a category. Adding a category specific to Sonarr avoids conflicts with unrelated non-Sonarr downloads. Using a category is optional, but strongly recommended.","title":"category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.postimport_category","text":"Category for Sonarr to set after it has imported the download. Sonarr will not remove torrents in that category even if seeding has finished. Leave blank, set to null or undefined to keep the same category.","title":"postimport_category"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.recent_priority","text":"Priority to use when grabbing episodes that aired within the last 14 days. Values: last first","title":"recent_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.older_priority","text":"Priority to use when grabbing episodes that aired over 14 days ago. Values: last first","title":"older_priority"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.download_clients.UtorrentDownloadClient.initial_state","text":"Initial state for torrents added to uTorrent.","title":"initial_state"},{"location":"plugins/sonarr/configuration/download-clients/#configuring-remote-path-mappings","text":"Bases: SonarrConfigBase Remote path mappings are used to associate a path on a download client remote host with its associated path on the local Sonarr instance. The main use case for this is when Sonarr and the download client are not running on the same system, or when Docker is used to isolate these services and the mountpoints for media locations are not consistent between the containers. sonarr: settings: download_clients: definitions: Transmission: type: \"transmission\" host: \"transmission\" port: 9091 remote_path_mappings: delete_unmanaged: false # Optional definitions: - host: \"transmission\" remote_path: \"/remote/path\" local_path: \"/local/path\" ensure: \"present\" # Optional Remote path mappings can be difficult to properly configure. TRaSH-Guides provides an excellent guide that explains what they are for, and how to use them.","title":"Configuring remote path mappings"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.SonarrRemotePathMappingsSettingsConfig.delete_unmanaged","text":"Automatically delete remote path mappings not configured in Buildarr. Deleting existing remote path mappings can cause problems with a running Sonarr instance. Think carefully before you enable this option.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.SonarrRemotePathMappingsSettingsConfig.definitions","text":"Remote path mapping definitions.","title":"definitions"},{"location":"plugins/sonarr/configuration/download-clients/#remote-path-mapping-parameters","text":"Bases: SonarrConfigBase Remote path mapping definitions themselves are relatively simple. They can be configured with a desired ensure state, however, which Buildarr uses to control whether to create or delete the remote path mapping. Ensure this value is set appropriately.","title":"Remote path mapping parameters"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.RemotePathMapping.host","text":"The name of the host, as specified for the remote download client.","title":"host"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.RemotePathMapping.remote_path","text":"Root path to the directory that the download client accesses.","title":"remote_path"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.RemotePathMapping.local_path","text":"The path that Sonarr should use to access the remote path locally.","title":"local_path"},{"location":"plugins/sonarr/configuration/download-clients/#buildarr.plugins.sonarr.config.download_clients.remote_path_mappings.RemotePathMapping.ensure","text":"Desired state for this resource. If set to present , the resource is created on the remote instance if it does not exist. If set to absent , the resource will be destroyed on the remote instance if it exists. This takes effect even if the delete_unmanaged is set to False for all remote path mappings.","title":"ensure"},{"location":"plugins/sonarr/configuration/general/","text":"General # General configuration for Sonarr are separated by category. sonarr: settings: general: host: bind_address: \"*\" port: 8989 url_base: null instance_name: \"Sonarr (Example)\" security: authentication_method: \"none\" proxy: enable: false logging: log_level: \"INFO\" analytics: send_anonymous_usage_data: false updates: branch: \"main\" automatic: false mechanism: \"docker\" backup: folder: \"Backups\" interval: 7 retention: 28 Some of the settings may affect Buildarr's ability to connect with the Sonarr instance. Take care when changing these settings. Host # Bases: GeneralSettings Sonarr instance connection and name configuration. Many of these settings configure Sonarr's external connection interface. If they are changed, the settings Buildarr uses to connect with this Sonarr instance may need to be updated, so take care when modifying them. Changing any of these settings require a restart of Sonarr to take effect. bind_address: Union[Literal['*'], IPv4Address] = '*' class-attribute # Bind address for Sonarr. Set to an IPv4 address bound to a local interface or * to bind on all interfaces. Unless you run Sonarr directly on a host machine (i.e. not via Docker) and want Sonarr to only be available on a specific network or interface, this generally should be left untouched. port: Port = 8989 class-attribute # Unencrypted (HTTP) listening port for Sonarr. If Sonarr is being run via Docker in the default bridge mode, this setting shouldn't be changed. Instead, change the external port it is bound to using --publish <port number>:8989 . ssl_port: Port = 9898 class-attribute # Enncrypted (HTTPS) listening port for Sonarr. If Sonarr is being run via Docker in the default bridge mode, this setting shouldn't be changed. Instead, change the external port it is bound to using --publish <port number>:9898 . use_ssl: bool = False class-attribute # Enable the encrypted (HTTPS) listening port in Sonarr. As Sonarr only supports self-signed certificates, it is recommended to put Sonarr behind a HTTPS-terminating reverse proxy such as Nginx, Caddy or Traefik. url_base: Optional[str] = None class-attribute # Add a prefix to all Sonarr URLs, e.g. http://localhost:8989/<url_base>/settings/general . Generally used to accommodate reverse proxies where Sonarr is assigned to a subfolder, e.g. https://example.com/sonarr . instance_name: NonEmptyStr = 'Sonarr' class-attribute # Instance name in the browser tab and in syslog. Security # Bases: GeneralSettings Sonarr instance security (authentication) settings. authentication: AuthenticationMethod = AuthenticationMethod.none class-attribute # Authentication method for logging into Sonarr. By default, do not require authentication. Values: none - No authentication basic - Authentication using HTTP basic auth (browser popup) form - Authentication using a login page Requires a restart of Sonarr to take effect. username: Optional[str] = None class-attribute # Username for the administrator user. Only used when authentication is enforced. Requires a restart of Sonarr to take effect. password: Optional[Password] = None class-attribute # Password for the administrator user. Only used when authentication is enforced. Requires a restart of Sonarr to take effect. certificate_validation: CertificateValidation = CertificateValidation.enabled class-attribute # Change how strict HTTPS certification validation is. Do not change unless you understand the risks. Values: enabled - Validate HTTPS certificates for all hosts local-disabled - Disable HTTPS certificate validation for hosts on the local network disabled - Disable HTTPS certificate validation completely Proxy # Bases: GeneralSettings Proxy configuration for Sonarr. enable: bool = False class-attribute # Use a proxy server to access the Internet. proxy_type: ProxyType = ProxyType.http class-attribute # Type of proxy to connect to. Values: http - HTTP(S) proxy socks4 - SOCKSv4 proxy socks5 - SOCKSv5 proxy (Tor is supported) hostname: Optional[str] = None class-attribute # Proxy server hostname. Required if using a proxy is enabled. port: Port = 8080 class-attribute # Proxy server access port. username: Optional[str] = None class-attribute # Username to authenticate with. Only enter if authentication is required by the proxy. password: Optional[Password] = None class-attribute # Password for the proxy user. Only enter if authentication is required by the proxy. ignored_addresses: List[NonEmptyStr] = [] class-attribute # List of domains/addresses which bypass the proxy. Wildcards ( * ) are supported. bypass_proxy_for_local_addresses: bool = True class-attribute # Do not use the proxy to access local network addresses. Logging # Bases: GeneralSettings Logging configuration for the Sonarr application. log_level: SonarrLogLevel = SonarrLogLevel.INFO class-attribute # Verbosity of logging output. Values: INFO - Standard log output DEBUG - Debugging log output TRACE - Trace diagnostics log output Analytics # Bases: GeneralSettings Configuration of analytics and telemetry from within Sonarr. send_anonymous_usage_data: bool = True class-attribute # Send anonymous usage and error information to Sonarr's servers. This includes information on your browser, which Sonarr Web UI pages you use, error reporting and OS/runtime versions. This information is reportedly used to prioritise features and bug fixes. Requires a restart of Sonarr to take effect. Updates # Bases: GeneralSettings Settings for updating Sonarr. branch: NonEmptyStr = 'main' class-attribute # Branch used by the external update mechanism. Changing this value has no effect on Docker installations. If unsure, leave this undefined in Buildarr and use the value already set in Sonarr. automatic: bool = False class-attribute # Automatically download and install updates. Manual updates can still be performed from System -> Updates. This option must be left set to false on Docker installations. mechanism: UpdateMechanism = UpdateMechanism.docker class-attribute # Set the mechanism for updating Sonarr. Must be set to docker on Docker installations. Values: builtin - Sonarr built-in updater mechanism script - Use the configured update script external - External update mechanism apt - Debian APT package docker - Docker image script_path: Optional[str] = None class-attribute # Path to a custom script that takes an extracted update package and handles the remainder of the update process. Required if mechanism is set to script . Backup # Bases: GeneralSettings Settings for Sonarr automatic backups. folder: NonEmptyStr = 'Backups' class-attribute # Folder to backup Sonarr data to. Relative paths will be under Sonarr's AppData directory. interval: int = Field(7, ge=1, le=7) class-attribute # Interval between automatic backups, in days. Must be set somewhere between 1 and 7 days. retention: int = Field(28, ge=1, le=90) class-attribute # Retention period for backups, in days. Backups older than the retention period will be cleaned up automatically. Must be set somewhere between 1 and 90 days.","title":"General"},{"location":"plugins/sonarr/configuration/general/#general","text":"General configuration for Sonarr are separated by category. sonarr: settings: general: host: bind_address: \"*\" port: 8989 url_base: null instance_name: \"Sonarr (Example)\" security: authentication_method: \"none\" proxy: enable: false logging: log_level: \"INFO\" analytics: send_anonymous_usage_data: false updates: branch: \"main\" automatic: false mechanism: \"docker\" backup: folder: \"Backups\" interval: 7 retention: 28 Some of the settings may affect Buildarr's ability to connect with the Sonarr instance. Take care when changing these settings.","title":"General"},{"location":"plugins/sonarr/configuration/general/#host","text":"Bases: GeneralSettings Sonarr instance connection and name configuration. Many of these settings configure Sonarr's external connection interface. If they are changed, the settings Buildarr uses to connect with this Sonarr instance may need to be updated, so take care when modifying them. Changing any of these settings require a restart of Sonarr to take effect.","title":"Host"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.bind_address","text":"Bind address for Sonarr. Set to an IPv4 address bound to a local interface or * to bind on all interfaces. Unless you run Sonarr directly on a host machine (i.e. not via Docker) and want Sonarr to only be available on a specific network or interface, this generally should be left untouched.","title":"bind_address"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.port","text":"Unencrypted (HTTP) listening port for Sonarr. If Sonarr is being run via Docker in the default bridge mode, this setting shouldn't be changed. Instead, change the external port it is bound to using --publish <port number>:8989 .","title":"port"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.ssl_port","text":"Enncrypted (HTTPS) listening port for Sonarr. If Sonarr is being run via Docker in the default bridge mode, this setting shouldn't be changed. Instead, change the external port it is bound to using --publish <port number>:9898 .","title":"ssl_port"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.use_ssl","text":"Enable the encrypted (HTTPS) listening port in Sonarr. As Sonarr only supports self-signed certificates, it is recommended to put Sonarr behind a HTTPS-terminating reverse proxy such as Nginx, Caddy or Traefik.","title":"use_ssl"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.url_base","text":"Add a prefix to all Sonarr URLs, e.g. http://localhost:8989/<url_base>/settings/general . Generally used to accommodate reverse proxies where Sonarr is assigned to a subfolder, e.g. https://example.com/sonarr .","title":"url_base"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.HostGeneralSettings.instance_name","text":"Instance name in the browser tab and in syslog.","title":"instance_name"},{"location":"plugins/sonarr/configuration/general/#security","text":"Bases: GeneralSettings Sonarr instance security (authentication) settings.","title":"Security"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.SecurityGeneralSettings.authentication","text":"Authentication method for logging into Sonarr. By default, do not require authentication. Values: none - No authentication basic - Authentication using HTTP basic auth (browser popup) form - Authentication using a login page Requires a restart of Sonarr to take effect.","title":"authentication"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.SecurityGeneralSettings.username","text":"Username for the administrator user. Only used when authentication is enforced. Requires a restart of Sonarr to take effect.","title":"username"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.SecurityGeneralSettings.password","text":"Password for the administrator user. Only used when authentication is enforced. Requires a restart of Sonarr to take effect.","title":"password"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.SecurityGeneralSettings.certificate_validation","text":"Change how strict HTTPS certification validation is. Do not change unless you understand the risks. Values: enabled - Validate HTTPS certificates for all hosts local-disabled - Disable HTTPS certificate validation for hosts on the local network disabled - Disable HTTPS certificate validation completely","title":"certificate_validation"},{"location":"plugins/sonarr/configuration/general/#proxy","text":"Bases: GeneralSettings Proxy configuration for Sonarr.","title":"Proxy"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.enable","text":"Use a proxy server to access the Internet.","title":"enable"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.proxy_type","text":"Type of proxy to connect to. Values: http - HTTP(S) proxy socks4 - SOCKSv4 proxy socks5 - SOCKSv5 proxy (Tor is supported)","title":"proxy_type"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.hostname","text":"Proxy server hostname. Required if using a proxy is enabled.","title":"hostname"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.port","text":"Proxy server access port.","title":"port"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.username","text":"Username to authenticate with. Only enter if authentication is required by the proxy.","title":"username"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.password","text":"Password for the proxy user. Only enter if authentication is required by the proxy.","title":"password"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.ignored_addresses","text":"List of domains/addresses which bypass the proxy. Wildcards ( * ) are supported.","title":"ignored_addresses"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.ProxyGeneralSettings.bypass_proxy_for_local_addresses","text":"Do not use the proxy to access local network addresses.","title":"bypass_proxy_for_local_addresses"},{"location":"plugins/sonarr/configuration/general/#logging","text":"Bases: GeneralSettings Logging configuration for the Sonarr application.","title":"Logging"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.LoggingGeneralSettings.log_level","text":"Verbosity of logging output. Values: INFO - Standard log output DEBUG - Debugging log output TRACE - Trace diagnostics log output","title":"log_level"},{"location":"plugins/sonarr/configuration/general/#analytics","text":"Bases: GeneralSettings Configuration of analytics and telemetry from within Sonarr.","title":"Analytics"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.AnalyticsGeneralSettings.send_anonymous_usage_data","text":"Send anonymous usage and error information to Sonarr's servers. This includes information on your browser, which Sonarr Web UI pages you use, error reporting and OS/runtime versions. This information is reportedly used to prioritise features and bug fixes. Requires a restart of Sonarr to take effect.","title":"send_anonymous_usage_data"},{"location":"plugins/sonarr/configuration/general/#updates","text":"Bases: GeneralSettings Settings for updating Sonarr.","title":"Updates"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.UpdatesGeneralSettings.branch","text":"Branch used by the external update mechanism. Changing this value has no effect on Docker installations. If unsure, leave this undefined in Buildarr and use the value already set in Sonarr.","title":"branch"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.UpdatesGeneralSettings.automatic","text":"Automatically download and install updates. Manual updates can still be performed from System -> Updates. This option must be left set to false on Docker installations.","title":"automatic"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.UpdatesGeneralSettings.mechanism","text":"Set the mechanism for updating Sonarr. Must be set to docker on Docker installations. Values: builtin - Sonarr built-in updater mechanism script - Use the configured update script external - External update mechanism apt - Debian APT package docker - Docker image","title":"mechanism"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.UpdatesGeneralSettings.script_path","text":"Path to a custom script that takes an extracted update package and handles the remainder of the update process. Required if mechanism is set to script .","title":"script_path"},{"location":"plugins/sonarr/configuration/general/#backup","text":"Bases: GeneralSettings Settings for Sonarr automatic backups.","title":"Backup"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.BackupGeneralSettings.folder","text":"Folder to backup Sonarr data to. Relative paths will be under Sonarr's AppData directory.","title":"folder"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.BackupGeneralSettings.interval","text":"Interval between automatic backups, in days. Must be set somewhere between 1 and 7 days.","title":"interval"},{"location":"plugins/sonarr/configuration/general/#buildarr.plugins.sonarr.config.general.BackupGeneralSettings.retention","text":"Retention period for backups, in days. Backups older than the retention period will be cleaned up automatically. Must be set somewhere between 1 and 90 days.","title":"retention"},{"location":"plugins/sonarr/configuration/host/","text":"Host Configuration # Bases: _SonarrInstanceConfig By default, Buildarr will look for a single instance at http://sonarr:8989 . Most configurations are different, and to accommodate those, you can configure how Buildarr connects to individual Sonarr instances. Configuration of a single Sonarr instance: sonarr: hostname: \"sonarr.example.com\" port: 8989 protocol: \"http\" settings: ... Configuration of multiple instances: sonarr: # Configuration and settings common to all instances. port: 8989 settings: ... instances: # Sonarr instance 1-specific configuration. sonarr1: hostname: \"sonarr1.example.com\" settings: ... # Sonarr instance 2-specific configuration. sonarr2: hostname: \"sonarr2.example.com\" api_key: \"...\" # Explicitly define API key settings: ... hostname: NonEmptyStr = 'sonarr' class-attribute # Hostname of the Sonarr instance to connect to. When defining a single instance using the global sonarr configuration block, the default hostname is sonarr . When using multiple instance-specific configurations, the default hostname is the name given to the instance in the instances attribute. sonarr: instances: sonarr1: # <--- This becomes the default hostname ... port: Port = 8989 class-attribute # Port number of the Sonarr instance to connect to. protocol: SonarrProtocol = 'http' class-attribute # Communication protocol to use to connect to Sonarr. api_key: Optional[SonarrApiKey] = None class-attribute # API key to use to authenticate with the Sonarr instance. If undefined or set to None , automatically retrieve the API key. This can only be done on Sonarr instances with authentication disabled. version: Optional[str] = None class-attribute # The expected version of the Sonarr instance. If undefined or set to None , the version is auto-detected. At the moment this attribute is unused, and there is likely no need to explicitly set it. settings: SonarrSettingsConfig = SonarrSettingsConfig() class-attribute # Sonarr settings. Configuration options for Sonarr itself are set within this structure.","title":"Host Configuration"},{"location":"plugins/sonarr/configuration/host/#host-configuration","text":"Bases: _SonarrInstanceConfig By default, Buildarr will look for a single instance at http://sonarr:8989 . Most configurations are different, and to accommodate those, you can configure how Buildarr connects to individual Sonarr instances. Configuration of a single Sonarr instance: sonarr: hostname: \"sonarr.example.com\" port: 8989 protocol: \"http\" settings: ... Configuration of multiple instances: sonarr: # Configuration and settings common to all instances. port: 8989 settings: ... instances: # Sonarr instance 1-specific configuration. sonarr1: hostname: \"sonarr1.example.com\" settings: ... # Sonarr instance 2-specific configuration. sonarr2: hostname: \"sonarr2.example.com\" api_key: \"...\" # Explicitly define API key settings: ...","title":"Host Configuration"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.hostname","text":"Hostname of the Sonarr instance to connect to. When defining a single instance using the global sonarr configuration block, the default hostname is sonarr . When using multiple instance-specific configurations, the default hostname is the name given to the instance in the instances attribute. sonarr: instances: sonarr1: # <--- This becomes the default hostname ...","title":"hostname"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.port","text":"Port number of the Sonarr instance to connect to.","title":"port"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.protocol","text":"Communication protocol to use to connect to Sonarr.","title":"protocol"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.api_key","text":"API key to use to authenticate with the Sonarr instance. If undefined or set to None , automatically retrieve the API key. This can only be done on Sonarr instances with authentication disabled.","title":"api_key"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.version","text":"The expected version of the Sonarr instance. If undefined or set to None , the version is auto-detected. At the moment this attribute is unused, and there is likely no need to explicitly set it.","title":"version"},{"location":"plugins/sonarr/configuration/host/#buildarr.plugins.sonarr.config.SonarrInstanceConfig.settings","text":"Sonarr settings. Configuration options for Sonarr itself are set within this structure.","title":"settings"},{"location":"plugins/sonarr/configuration/import-lists/","text":"Import Lists # Bases: SonarrConfigBase Using import lists, Sonarr can monitor and import episodes from external sources. sonarr: settings: import_lists: delete_unmanaged: False # Default is `false` delete_unmanaged_exclusions: true # Default is `false` definitions: Plex: # Name of import list definition type: \"plex-watchlist\" # Type of import list to use # Attributes common to all watch list types enable_automatic_add: true monitor: \"all-episodes\" series_type: \"standard\" season_folder: true tags: - \"example\" # Plex-specific attributes access_token: \"...\" # Add more import lists here. exclusions: 72662: \"Teletubbies\" # TVDB ID is key, set an artibrary title as value Media can be queued on the source, and Sonarr will automatically import them, look for suitable releases, and download them. Media that you don't want to import can be ignored using the exclusions attribute. delete_unmanaged: bool = False class-attribute # Automatically delete import lists not defined in Buildarr. delete_unmanaged_exclusions: bool = False class-attribute # Automatically delete import list excusions not defined in Buildarr. definitions: Dict[str, Union[SonarrImportList, PlexWatchlistImportList, TraktListImportList, TraktPopularlistImportList, TraktUserImportList]] = {} class-attribute # Import list definitions go here. exclusions: Dict[PositiveInt, NonEmptyStr] = {} class-attribute # Dictionary of TV series that should be excluded from being imported. The key is the TVDB ID of the series to exclude, the value is a title to give the series in the Sonarr UI. Configuring import lists # The following Bases: SonarrConfigBase For more information on how an import list should be setup, refer to this guide on WikiArr . All import list types can have the following attributes configured. enable_automatic_add: bool = True class-attribute # Automatically add series to Sonarr upon syncing. monitor: Monitor = Monitor.all_episodes class-attribute # Define how Sonarr should monitor existing and new episodes of series. Values: all-episodes - Monitor all episodes except specials future-episodes - Monitor episodes that have not aired yet missing-episodes - Monitor episodes that do not have files or have not aired yet existing-episodes - Monitor episodes that have files or have not aired yet pilot-episode - Monitor only the pilot episode of a series first-season - Monitor all episodes of the first season (all other seasons will be ignored) only-latest-season - Monitor all episodes of the latest season and future seasons none - No episodes will be monitored root_folder: Optional[str] = None class-attribute # Add list items to the specified root folder. quality_profile: Optional[str] = None class-attribute # The name of the quality profile list items will be added with. If unset, blank or set to None , use any quality profile. language_profile: Optional[str] = None class-attribute # The name of the language profile list items will be added with. If unset, blank or set to None , use any language profile. series_type: SeriesType = SeriesType.standard class-attribute # The type of series that get imported from this import list. This option affects how Sonarr handles the media, such as renaming. Values: standard - Episodes released with an SxxEyy pattern daily - Episodes released daily or less frequently that use year-month-day (2017-05-25) anime - Episodes released using an absolute episode number season_folder: bool = True class-attribute # Use a season folder for series imported from this import list. tags: Set[NonEmptyStr] = set() class-attribute # Tags to assign to items imported from this import list. Sonarr # Bases: ProgramImportList Import items from another Sonarr instance. The Sonarr instance preferably should be the same version as this Sonarr instance. type: Literal['sonarr'] = 'sonarr' class-attribute # Type value associated with this kind of import list. full_url: HttpUrl class-attribute # URL that this Sonarr instance will use to connect to the source Sonarr instance. api_key: Password class-attribute # API key used to access the remote instance. source_quality_profile_ids: Set[PositiveInt] = set() class-attribute # IDs of the Quality Profiles from the source instance to import from. source_language_profile_ids: Set[PositiveInt] = set() class-attribute # IDs of the Language Profiles from the source instance to import from. source_tag_ids: Set[PositiveInt] = set() class-attribute # IDs of the tags from the source instance to import from. Plex # Bases: PlexImportList Import items from a Plex watchlist. type: Literal['plex-watchlist'] = 'plex-watchlist' class-attribute # Type value associated with this kind of import list. access_token: Password class-attribute # Plex authentication token. If unsure on where to find this token, follow this guide from Plex.tv . Trakt # Bases: ImportList Import added media from a list on the Trakt media tracker. Note Sonarr directly authenticates with Trakt to generate tokens for it to use. At the moment, the easiest way to generate the tokens for Buildarr is to do it using the GUI within Sonarr, and use the following shell command to retrieve the generated configuration. $ curl -X \"GET\" \"<sonarr-url>/api/v3/notification\" -H \"X-Api-Key: <api-key>\" The following parameters are common to all Trakt import list types. The authenticated-related parameters ( access_token , refresh_token , expires , auth_user ) are required. access_token: Password class-attribute # Access token for Sonarr from Trakt. refresh_token: Password class-attribute # Refresh token for Sonarr from Trakt. expires: datetime class-attribute # Expiry date-time of the access token, preferably in ISO-8601 format and in UTC. Example: 2023-05-10T15:34:08.117451Z auth_user: TraktAuthUser class-attribute # The username being authenticated in Trakt. rating: NonEmptyStr = '0-100' class-attribute # Filter series by rating range, with a maximum range of 0-100. username: Optional[str] = None class-attribute # Username for the list to import from. Leave undefined, empty or set to None to use the auth user. genres: Set[NonEmptyStr] = set() class-attribute # Filter series by Trakt genre slug. years: Optional[YearRange] = None class-attribute # Filter series by year or year range. (e.g. 2009 or 2009-2015 ) limit: PositiveInt = 100 class-attribute # Limit the number of series to get. trakt_additional_parameters: Optional[str] = None class-attribute # Additional parameters to send to the Trakt API. List # Bases: TraktImportList Import an arbitrary list from Trakt into Sonarr. type: Literal['trakt-list'] = 'trakt-list' class-attribute # Type value associated with this kind of import list. list_name: NonEmptyStr class-attribute # Name of the list to import. The list must be public, or you must have access to the list. Popular List # Bases: TraktImportList Import media according to popularity-based lists on Trakt. type: Literal['trakt-popularlist'] = 'trakt-popularlist' class-attribute # Type value associated with this kind of import list. list_type: TraktPopularListType = TraktPopularListType.popular class-attribute # Popularity-based list to import. Values: trending popular anticipated top_watched_by_week top_watched_by_month top_watched_by_year top_watched_by_alltime recommended_by_week recommended_by_month recommended_by_year recommended_by_alltime User # Bases: TraktImportList Import a user-level list from Trakt. type: Literal['trakt-user'] = 'trakt-user' class-attribute # Type value associated with this kind of import list. list_type: TraktUserListType = TraktUserListType.user_watch_list class-attribute # User list type to import. Values: user_watch_list user_watched_list user_collection_list","title":"Import Lists"},{"location":"plugins/sonarr/configuration/import-lists/#import-lists","text":"Bases: SonarrConfigBase Using import lists, Sonarr can monitor and import episodes from external sources. sonarr: settings: import_lists: delete_unmanaged: False # Default is `false` delete_unmanaged_exclusions: true # Default is `false` definitions: Plex: # Name of import list definition type: \"plex-watchlist\" # Type of import list to use # Attributes common to all watch list types enable_automatic_add: true monitor: \"all-episodes\" series_type: \"standard\" season_folder: true tags: - \"example\" # Plex-specific attributes access_token: \"...\" # Add more import lists here. exclusions: 72662: \"Teletubbies\" # TVDB ID is key, set an artibrary title as value Media can be queued on the source, and Sonarr will automatically import them, look for suitable releases, and download them. Media that you don't want to import can be ignored using the exclusions attribute.","title":"Import Lists"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportListsSettingsConfig.delete_unmanaged","text":"Automatically delete import lists not defined in Buildarr.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportListsSettingsConfig.delete_unmanaged_exclusions","text":"Automatically delete import list excusions not defined in Buildarr.","title":"delete_unmanaged_exclusions"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportListsSettingsConfig.definitions","text":"Import list definitions go here.","title":"definitions"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportListsSettingsConfig.exclusions","text":"Dictionary of TV series that should be excluded from being imported. The key is the TVDB ID of the series to exclude, the value is a title to give the series in the Sonarr UI.","title":"exclusions"},{"location":"plugins/sonarr/configuration/import-lists/#configuring-import-lists","text":"The following Bases: SonarrConfigBase For more information on how an import list should be setup, refer to this guide on WikiArr . All import list types can have the following attributes configured.","title":"Configuring import lists"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.enable_automatic_add","text":"Automatically add series to Sonarr upon syncing.","title":"enable_automatic_add"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.monitor","text":"Define how Sonarr should monitor existing and new episodes of series. Values: all-episodes - Monitor all episodes except specials future-episodes - Monitor episodes that have not aired yet missing-episodes - Monitor episodes that do not have files or have not aired yet existing-episodes - Monitor episodes that have files or have not aired yet pilot-episode - Monitor only the pilot episode of a series first-season - Monitor all episodes of the first season (all other seasons will be ignored) only-latest-season - Monitor all episodes of the latest season and future seasons none - No episodes will be monitored","title":"monitor"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.root_folder","text":"Add list items to the specified root folder.","title":"root_folder"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.quality_profile","text":"The name of the quality profile list items will be added with. If unset, blank or set to None , use any quality profile.","title":"quality_profile"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.language_profile","text":"The name of the language profile list items will be added with. If unset, blank or set to None , use any language profile.","title":"language_profile"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.series_type","text":"The type of series that get imported from this import list. This option affects how Sonarr handles the media, such as renaming. Values: standard - Episodes released with an SxxEyy pattern daily - Episodes released daily or less frequently that use year-month-day (2017-05-25) anime - Episodes released using an absolute episode number","title":"series_type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.season_folder","text":"Use a season folder for series imported from this import list.","title":"season_folder"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.ImportList.tags","text":"Tags to assign to items imported from this import list.","title":"tags"},{"location":"plugins/sonarr/configuration/import-lists/#sonarr","text":"Bases: ProgramImportList Import items from another Sonarr instance. The Sonarr instance preferably should be the same version as this Sonarr instance.","title":"Sonarr"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.type","text":"Type value associated with this kind of import list.","title":"type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.full_url","text":"URL that this Sonarr instance will use to connect to the source Sonarr instance.","title":"full_url"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.api_key","text":"API key used to access the remote instance.","title":"api_key"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.source_quality_profile_ids","text":"IDs of the Quality Profiles from the source instance to import from.","title":"source_quality_profile_ids"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.source_language_profile_ids","text":"IDs of the Language Profiles from the source instance to import from.","title":"source_language_profile_ids"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.SonarrImportList.source_tag_ids","text":"IDs of the tags from the source instance to import from.","title":"source_tag_ids"},{"location":"plugins/sonarr/configuration/import-lists/#plex","text":"Bases: PlexImportList Import items from a Plex watchlist.","title":"Plex"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.PlexWatchlistImportList.type","text":"Type value associated with this kind of import list.","title":"type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.PlexWatchlistImportList.access_token","text":"Plex authentication token. If unsure on where to find this token, follow this guide from Plex.tv .","title":"access_token"},{"location":"plugins/sonarr/configuration/import-lists/#trakt","text":"Bases: ImportList Import added media from a list on the Trakt media tracker. Note Sonarr directly authenticates with Trakt to generate tokens for it to use. At the moment, the easiest way to generate the tokens for Buildarr is to do it using the GUI within Sonarr, and use the following shell command to retrieve the generated configuration. $ curl -X \"GET\" \"<sonarr-url>/api/v3/notification\" -H \"X-Api-Key: <api-key>\" The following parameters are common to all Trakt import list types. The authenticated-related parameters ( access_token , refresh_token , expires , auth_user ) are required.","title":"Trakt"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.access_token","text":"Access token for Sonarr from Trakt.","title":"access_token"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.refresh_token","text":"Refresh token for Sonarr from Trakt.","title":"refresh_token"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.expires","text":"Expiry date-time of the access token, preferably in ISO-8601 format and in UTC. Example: 2023-05-10T15:34:08.117451Z","title":"expires"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.auth_user","text":"The username being authenticated in Trakt.","title":"auth_user"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.rating","text":"Filter series by rating range, with a maximum range of 0-100.","title":"rating"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.username","text":"Username for the list to import from. Leave undefined, empty or set to None to use the auth user.","title":"username"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.genres","text":"Filter series by Trakt genre slug.","title":"genres"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.years","text":"Filter series by year or year range. (e.g. 2009 or 2009-2015 )","title":"years"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.limit","text":"Limit the number of series to get.","title":"limit"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktImportList.trakt_additional_parameters","text":"Additional parameters to send to the Trakt API.","title":"trakt_additional_parameters"},{"location":"plugins/sonarr/configuration/import-lists/#list","text":"Bases: TraktImportList Import an arbitrary list from Trakt into Sonarr.","title":"List"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktListImportList.type","text":"Type value associated with this kind of import list.","title":"type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktListImportList.list_name","text":"Name of the list to import. The list must be public, or you must have access to the list.","title":"list_name"},{"location":"plugins/sonarr/configuration/import-lists/#popular-list","text":"Bases: TraktImportList Import media according to popularity-based lists on Trakt.","title":"Popular List"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktPopularlistImportList.type","text":"Type value associated with this kind of import list.","title":"type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktPopularlistImportList.list_type","text":"Popularity-based list to import. Values: trending popular anticipated top_watched_by_week top_watched_by_month top_watched_by_year top_watched_by_alltime recommended_by_week recommended_by_month recommended_by_year recommended_by_alltime","title":"list_type"},{"location":"plugins/sonarr/configuration/import-lists/#user","text":"Bases: TraktImportList Import a user-level list from Trakt.","title":"User"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktUserImportList.type","text":"Type value associated with this kind of import list.","title":"type"},{"location":"plugins/sonarr/configuration/import-lists/#buildarr.plugins.sonarr.config.import_lists.TraktUserImportList.list_type","text":"User list type to import. Values: user_watch_list user_watched_list user_collection_list","title":"list_type"},{"location":"plugins/sonarr/configuration/indexers/","text":"Indexers # Bases: SonarrConfigBase Indexers are used to monitor for new releases of media on external trackers. When a suitable release has been found, Sonarr registers it for download on one of the configured download clients. sonarr: config: indexers: minimum_age: 0 retention: 0 maximum_size: 0 rss_sync_interval: 15 delete_unmanaged: false # Better to leave off for the most part definitions: Nyaa: # Indexer name type: \"nyaa\" # Type of indexer # Configuration common to all indexers enable_rss: true enable_automatic_search: true enable_interactive_search: true anime_standard_format_search: true indexer_priority: 25 download_client: null tags: - \"example\" # Nyaa-specific configuration website_url: \"https://example.com\" # Define more indexers here. The following parameters are available for configuring indexers and how they are handled by Sonarr. For more information on how Sonarr finds epsiodes, refer to the FAQ on WikiArr . minimum_age: int = Field(0, ge=0) class-attribute # Minimum age (in minutes) of NZBs before they are grabbed. (Usenet only) Use this to give new releases time to propagate to your Usenet provider. retention: int = Field(0, ge=0) class-attribute # Retention of releases. (Usenet only) Set to 0 for unlimited retention. maximum_size: int = Field(0, ge=0) class-attribute # Maximum size for a release to be grabbed, in megabytes (MB). Set to 0 to set for unlimited size. rss_sync_interval: int = Field(15, ge=0) class-attribute # Interval (in minutes) to sync RSS feeds with indexers. Set to 0 to disable syncing. This also disables automatic release grabbing. delete_unmanaged: bool = False class-attribute # Automatically delete indexers not configured by Buildarr. Take care when enabling this option, as it will also delete indexers created by external applications such as Prowlarr. If unsure, leave set at the default of false . definitions: Dict[str, Union[FanzubIndexer, NewznabIndexer, OmgwtfnzbsIndexer, BroadcasthenetIndexer, FilelistIndexer, HdbitsIndexer, IptorrentsIndexer, NyaaIndexer, RarbgIndexer, TorrentrssfeedIndexer, TorrentleechIndexer, TorznabIndexer]] = {} class-attribute # Indexer to manage via Buildarr are defined here. Configuring indexers # Bases: SonarrConfigBase Here is an example of an indexer being configured in the indexers configuration block in Buildarr. ... indexers: definitions: Nyaa: # Indexer name type: \"nyaa\" # Type of indexer # Configuration common to all indexers enable_rss: true enable_automatic_search: true enable_interactive_search: true anime_standard_format_search: true indexer_priority: 25 download_client: null tags: - \"example\" # Nyaa-specific configuration website_url: \"https://example.com\" # Define more indexers here. There are configuration parameters common to all indexer types, and parameters common to only specific types of indexers. The following configuration attributes can be defined on all indexer types. enable_rss: bool = True class-attribute # If enabled, use this indexer to watch for files that are wanted and missing or have not yet reached their cutoff. enable_automatic_search: bool = True class-attribute # If enabled, use this indexer for automatic searches, including Search on Add. enable_interactive_search: bool = True class-attribute # If enabled, use this indexer for manual interactive searches. anime_standard_format_search: bool = False class-attribute # Also search for anime using the standard numbering. Only applies for Anime series types. indexer_priority: int = Field(25, ge=1, le=50) class-attribute # Priority of this indexer to prefer one indexer over another in release tiebreaker scenarios. 1 is highest priority and 50 is lowest priority. download_client: Optional[NonEmptyStr] = None class-attribute # The name of the download client to use for grabs from this indexer. tags: List[NonEmptyStr] = [] class-attribute # Only use this indexer for series with at least one matching tag. Leave blank to use with all series. Fanzub # Bases: UsenetIndexer An indexer which uses a Fanzub-compatible RSS feed to monitor for releases. type: Literal['fanzub'] = 'fanzub' class-attribute # Type value associated with this kind of indexer. rss_url: RssUrl class-attribute # A URL to a Fanzub compatible RSS feed. Newznab # Bases: UsenetIndexer An indexer for monitoring a Newznab-compliant Usenet indexing site. Sonarr defines presets for several popular sites. type: Literal['newznab'] = 'newznab' class-attribute # Type value associated with this kind of indexer. url: HttpUrl class-attribute # URL of the Newznab-compatible indexing site. api_path: NonEmptyStr = '/api' class-attribute # Newznab API endpoint. Usually /api . categories: Set[NabCategory] = {NabCategory.TV_SD, NabCategory.TV_HD} class-attribute # Categories to monitor for standard/daily shows. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary anime_categories: Set[NabCategory] = set() class-attribute # Categories to monitor for anime. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary additional_parameters: Optional[str] = None class-attribute # Additional Newznab API parameters. OmgWtfNZBs # Bases: UsenetIndexer An indexer for monitoring OmgWtfNZBs. type: Literal['omgwtfnzbs'] = 'omgwtfnzbs' class-attribute # Type value associated with this kind of indexer. username: NonEmptyStr class-attribute # Username for the OmgWtfNZBs account. api_key: Password class-attribute # API key for the OmgWtfNZBs API. delay: int = Field(30, ge=0) class-attribute # Time (in minutes) to delay new NZBs before they appear on the RSS feed. Torrent Indexers # Bases: Indexer Configuration attributes common to all torrent indexers. minimum_seeders: PositiveInt = 1 class-attribute # The minimum number of seeders required before downloading a release. seed_ratio: Optional[float] = None class-attribute # The seed ratio a torrent should reach before stopping. If unset or set to null , use the download client's defaults. seed_time: Optional[int] = None class-attribute # The amount of time (in minutes) a torrent should be seeded before stopping. If unset or set to null , use the download client's defaults. seasonpack_seed_time: Optional[int] = None class-attribute # The amount of time (in minutes) a season-pack torrent should be seeded before stopping. If unset or set to null , use the download client's defaults. BroadcasTheNet # Bases: TorrentIndexer Indexer for monitoring for new releases on BroacasTheNet. type: Literal['broadcasthenet'] = 'broadcasthenet' class-attribute # Type value associated with this kind of indexer. api_url: HttpUrl = 'https://api.broadcasthe.net' class-attribute # BroadcasTheNet API URL. api_key: Password class-attribute # BroadcasTheNet API key. Filelist # Bases: TorrentIndexer Monitor for new releases on FileList.io. type: Literal['filelist'] = 'filelist' class-attribute # Type value associated with this kind of indexer. username: NonEmptyStr class-attribute # FileList username. passkey: Password class-attribute # FileList account API key. api_url: HttpUrl = 'https://filelist.io' class-attribute # FileList API URL. Do not change this unless you know what you're doing, as your API key will be sent to this host. categories: List[FilelistCategory] = [FilelistCategory.TV_SD, FilelistCategory.TV_HD, FilelistCategory.TV_4K] class-attribute # Categories to monitor for standard/daily show new releases. Set to an empty list to not monitor for standard/daily shows. anime_categories: List[FilelistCategory] = [] class-attribute # Categories to monitor for anime new releases. Leave empty to not monitor for anime. HDBits # Bases: TorrentIndexer Monitor for new releases on HDBits. type: Literal['hdbits'] = 'hdbits' class-attribute # Type value associated with this kind of indexer. username: NonEmptyStr class-attribute # HDBits account username. api_key: Password class-attribute # HDBits API key assigned to the account. api_url: HttpUrl = 'https://hdbits.org' class-attribute # HDBits API URL. Do not change this unless you know what you're doing, as your API key will be sent to this host. IP Torrents # Bases: TorrentIndexer Monitor for releases using the IP Torrents native API. Note IP Torrents' native API does not support automatic searching. It is recommended to instead configure IP Torrents as a Torznab indexer. type: Literal['iptorrents'] = 'iptorrents' class-attribute # Type value associated with this kind of indexer. feed_url: RssUrl class-attribute # The full RSS feed url generated by IP Torrents, using only the categories you selected (HD, SD, x264, etc ...). Nyaa # Bases: TorrentIndexer Monitor for new anime releases on the configured Nyaa domain. Nyaa only supports searching for Anime series type releases. type: Literal['nyaa'] = 'nyaa' class-attribute # Type value associated with this kind of indexer. website_url: HttpUrl class-attribute # HTTPS URL for accessing Nyaa. additional_parameters: Optional[str] = '&cats=1_0&filter=1' class-attribute # Parameters to send in the Nyaa search request. Note that if you change the category, you will have to add required/restricted rules about the subgroups to avoid foreign language releases. Rarbg # Bases: TorrentIndexer Monitor for new releases on the RARBG torrent tracker. type: Literal['rarbg'] = 'rarbg' class-attribute # Type value associated with this kind of indexer. api_url: HttpUrl class-attribute # RARBG API url. ranked_only: bool = False class-attribute # Only include ranked results. captcha_token: Optional[str] = None class-attribute # CAPTCHA clearance token used to handle CloudFlare anti-DDoS measures on shared-IP VPNs. Torrent RSS Feed # Bases: TorrentIndexer Generic parser for monitoring a torrent RSS feed. Note This indexer does not support automatic searching. It is recommended to use an indexer that natively communicates with a tracker using an API. type: Literal['torrentrssfeed'] = 'torrentrssfeed' class-attribute # Type value associated with this kind of indexer. full_rss_feed_url: RssUrl class-attribute # RSS feed to monitor. cookie: Optional[str] = None class-attribute # Session cookie for accessing the RSS feed. If the RSS feed requires one, this should be retrieved manually via a web browser. allow_zero_size: bool = False class-attribute # Allow access to releases that don't specify release size. As size checks will not be performed, be careful when enabling this option. TorrentLeech # Bases: TorrentIndexer Monitor for new releases on TorrentLeech. Note This indexer does not support automatic searching. type: Literal['torrentleech'] = 'torrentleech' class-attribute # Type value associated with this kind of indexer. website_url: HttpUrl = 'http://rss.torrentleech.org' class-attribute # TorrentLeech feed API URL. api_key: Password class-attribute # TorrentLeech API key. Torznab # Bases: TorrentIndexer Monitor and search for new releases on a Torznab-compliant torrent indexing site. Sonarr defines presets for several popular sites. type: Literal['torznab'] = 'torznab' class-attribute # Type value associated with this kind of indexer. url: HttpUrl class-attribute # URL of the Torznab-compatible indexing site. api_path: NonEmptyStr = '/api' class-attribute # Tornab API endpoint. Usually /api . categories: Set[NabCategory] = {NabCategory.TV_SD, NabCategory.TV_HD} class-attribute # Categories to monitor for standard/daily shows. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary anime_categories: Set[NabCategory] = set() class-attribute # Categories to monitor for anime. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary additional_parameters: Optional[str] = None class-attribute # Additional Torznab API parameters.","title":"Indexers"},{"location":"plugins/sonarr/configuration/indexers/#indexers","text":"Bases: SonarrConfigBase Indexers are used to monitor for new releases of media on external trackers. When a suitable release has been found, Sonarr registers it for download on one of the configured download clients. sonarr: config: indexers: minimum_age: 0 retention: 0 maximum_size: 0 rss_sync_interval: 15 delete_unmanaged: false # Better to leave off for the most part definitions: Nyaa: # Indexer name type: \"nyaa\" # Type of indexer # Configuration common to all indexers enable_rss: true enable_automatic_search: true enable_interactive_search: true anime_standard_format_search: true indexer_priority: 25 download_client: null tags: - \"example\" # Nyaa-specific configuration website_url: \"https://example.com\" # Define more indexers here. The following parameters are available for configuring indexers and how they are handled by Sonarr. For more information on how Sonarr finds epsiodes, refer to the FAQ on WikiArr .","title":"Indexers"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.minimum_age","text":"Minimum age (in minutes) of NZBs before they are grabbed. (Usenet only) Use this to give new releases time to propagate to your Usenet provider.","title":"minimum_age"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.retention","text":"Retention of releases. (Usenet only) Set to 0 for unlimited retention.","title":"retention"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.maximum_size","text":"Maximum size for a release to be grabbed, in megabytes (MB). Set to 0 to set for unlimited size.","title":"maximum_size"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.rss_sync_interval","text":"Interval (in minutes) to sync RSS feeds with indexers. Set to 0 to disable syncing. This also disables automatic release grabbing.","title":"rss_sync_interval"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.delete_unmanaged","text":"Automatically delete indexers not configured by Buildarr. Take care when enabling this option, as it will also delete indexers created by external applications such as Prowlarr. If unsure, leave set at the default of false .","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.SonarrIndexersSettingsConfig.definitions","text":"Indexer to manage via Buildarr are defined here.","title":"definitions"},{"location":"plugins/sonarr/configuration/indexers/#configuring-indexers","text":"Bases: SonarrConfigBase Here is an example of an indexer being configured in the indexers configuration block in Buildarr. ... indexers: definitions: Nyaa: # Indexer name type: \"nyaa\" # Type of indexer # Configuration common to all indexers enable_rss: true enable_automatic_search: true enable_interactive_search: true anime_standard_format_search: true indexer_priority: 25 download_client: null tags: - \"example\" # Nyaa-specific configuration website_url: \"https://example.com\" # Define more indexers here. There are configuration parameters common to all indexer types, and parameters common to only specific types of indexers. The following configuration attributes can be defined on all indexer types.","title":"Configuring indexers"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.enable_rss","text":"If enabled, use this indexer to watch for files that are wanted and missing or have not yet reached their cutoff.","title":"enable_rss"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.enable_automatic_search","text":"If enabled, use this indexer for automatic searches, including Search on Add.","title":"enable_automatic_search"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.enable_interactive_search","text":"If enabled, use this indexer for manual interactive searches.","title":"enable_interactive_search"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.anime_standard_format_search","text":"Also search for anime using the standard numbering. Only applies for Anime series types.","title":"anime_standard_format_search"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.indexer_priority","text":"Priority of this indexer to prefer one indexer over another in release tiebreaker scenarios. 1 is highest priority and 50 is lowest priority.","title":"indexer_priority"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.download_client","text":"The name of the download client to use for grabs from this indexer.","title":"download_client"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.Indexer.tags","text":"Only use this indexer for series with at least one matching tag. Leave blank to use with all series.","title":"tags"},{"location":"plugins/sonarr/configuration/indexers/#fanzub","text":"Bases: UsenetIndexer An indexer which uses a Fanzub-compatible RSS feed to monitor for releases.","title":"Fanzub"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FanzubIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FanzubIndexer.rss_url","text":"A URL to a Fanzub compatible RSS feed.","title":"rss_url"},{"location":"plugins/sonarr/configuration/indexers/#newznab","text":"Bases: UsenetIndexer An indexer for monitoring a Newznab-compliant Usenet indexing site. Sonarr defines presets for several popular sites.","title":"Newznab"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.url","text":"URL of the Newznab-compatible indexing site.","title":"url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.api_path","text":"Newznab API endpoint. Usually /api .","title":"api_path"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.categories","text":"Categories to monitor for standard/daily shows. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary","title":"categories"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.anime_categories","text":"Categories to monitor for anime. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary","title":"anime_categories"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NewznabIndexer.additional_parameters","text":"Additional Newznab API parameters.","title":"additional_parameters"},{"location":"plugins/sonarr/configuration/indexers/#omgwtfnzbs","text":"Bases: UsenetIndexer An indexer for monitoring OmgWtfNZBs.","title":"OmgWtfNZBs"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.OmgwtfnzbsIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.OmgwtfnzbsIndexer.username","text":"Username for the OmgWtfNZBs account.","title":"username"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.OmgwtfnzbsIndexer.api_key","text":"API key for the OmgWtfNZBs API.","title":"api_key"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.OmgwtfnzbsIndexer.delay","text":"Time (in minutes) to delay new NZBs before they appear on the RSS feed.","title":"delay"},{"location":"plugins/sonarr/configuration/indexers/#torrent-indexers","text":"Bases: Indexer Configuration attributes common to all torrent indexers.","title":"Torrent Indexers"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentIndexer.minimum_seeders","text":"The minimum number of seeders required before downloading a release.","title":"minimum_seeders"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentIndexer.seed_ratio","text":"The seed ratio a torrent should reach before stopping. If unset or set to null , use the download client's defaults.","title":"seed_ratio"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentIndexer.seed_time","text":"The amount of time (in minutes) a torrent should be seeded before stopping. If unset or set to null , use the download client's defaults.","title":"seed_time"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentIndexer.seasonpack_seed_time","text":"The amount of time (in minutes) a season-pack torrent should be seeded before stopping. If unset or set to null , use the download client's defaults.","title":"seasonpack_seed_time"},{"location":"plugins/sonarr/configuration/indexers/#broadcasthenet","text":"Bases: TorrentIndexer Indexer for monitoring for new releases on BroacasTheNet.","title":"BroadcasTheNet"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.BroadcasthenetIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.BroadcasthenetIndexer.api_url","text":"BroadcasTheNet API URL.","title":"api_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.BroadcasthenetIndexer.api_key","text":"BroadcasTheNet API key.","title":"api_key"},{"location":"plugins/sonarr/configuration/indexers/#filelist","text":"Bases: TorrentIndexer Monitor for new releases on FileList.io.","title":"Filelist"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.username","text":"FileList username.","title":"username"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.passkey","text":"FileList account API key.","title":"passkey"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.api_url","text":"FileList API URL. Do not change this unless you know what you're doing, as your API key will be sent to this host.","title":"api_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.categories","text":"Categories to monitor for standard/daily show new releases. Set to an empty list to not monitor for standard/daily shows.","title":"categories"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.FilelistIndexer.anime_categories","text":"Categories to monitor for anime new releases. Leave empty to not monitor for anime.","title":"anime_categories"},{"location":"plugins/sonarr/configuration/indexers/#hdbits","text":"Bases: TorrentIndexer Monitor for new releases on HDBits.","title":"HDBits"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.HdbitsIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.HdbitsIndexer.username","text":"HDBits account username.","title":"username"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.HdbitsIndexer.api_key","text":"HDBits API key assigned to the account.","title":"api_key"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.HdbitsIndexer.api_url","text":"HDBits API URL. Do not change this unless you know what you're doing, as your API key will be sent to this host.","title":"api_url"},{"location":"plugins/sonarr/configuration/indexers/#ip-torrents","text":"Bases: TorrentIndexer Monitor for releases using the IP Torrents native API. Note IP Torrents' native API does not support automatic searching. It is recommended to instead configure IP Torrents as a Torznab indexer.","title":"IP Torrents"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.IptorrentsIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.IptorrentsIndexer.feed_url","text":"The full RSS feed url generated by IP Torrents, using only the categories you selected (HD, SD, x264, etc ...).","title":"feed_url"},{"location":"plugins/sonarr/configuration/indexers/#nyaa","text":"Bases: TorrentIndexer Monitor for new anime releases on the configured Nyaa domain. Nyaa only supports searching for Anime series type releases.","title":"Nyaa"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NyaaIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NyaaIndexer.website_url","text":"HTTPS URL for accessing Nyaa.","title":"website_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.NyaaIndexer.additional_parameters","text":"Parameters to send in the Nyaa search request. Note that if you change the category, you will have to add required/restricted rules about the subgroups to avoid foreign language releases.","title":"additional_parameters"},{"location":"plugins/sonarr/configuration/indexers/#rarbg","text":"Bases: TorrentIndexer Monitor for new releases on the RARBG torrent tracker.","title":"Rarbg"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.RarbgIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.RarbgIndexer.api_url","text":"RARBG API url.","title":"api_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.RarbgIndexer.ranked_only","text":"Only include ranked results.","title":"ranked_only"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.RarbgIndexer.captcha_token","text":"CAPTCHA clearance token used to handle CloudFlare anti-DDoS measures on shared-IP VPNs.","title":"captcha_token"},{"location":"plugins/sonarr/configuration/indexers/#torrent-rss-feed","text":"Bases: TorrentIndexer Generic parser for monitoring a torrent RSS feed. Note This indexer does not support automatic searching. It is recommended to use an indexer that natively communicates with a tracker using an API.","title":"Torrent RSS Feed"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentrssfeedIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentrssfeedIndexer.full_rss_feed_url","text":"RSS feed to monitor.","title":"full_rss_feed_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentrssfeedIndexer.cookie","text":"Session cookie for accessing the RSS feed. If the RSS feed requires one, this should be retrieved manually via a web browser.","title":"cookie"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentrssfeedIndexer.allow_zero_size","text":"Allow access to releases that don't specify release size. As size checks will not be performed, be careful when enabling this option.","title":"allow_zero_size"},{"location":"plugins/sonarr/configuration/indexers/#torrentleech","text":"Bases: TorrentIndexer Monitor for new releases on TorrentLeech. Note This indexer does not support automatic searching.","title":"TorrentLeech"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentleechIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentleechIndexer.website_url","text":"TorrentLeech feed API URL.","title":"website_url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorrentleechIndexer.api_key","text":"TorrentLeech API key.","title":"api_key"},{"location":"plugins/sonarr/configuration/indexers/#torznab","text":"Bases: TorrentIndexer Monitor and search for new releases on a Torznab-compliant torrent indexing site. Sonarr defines presets for several popular sites.","title":"Torznab"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.type","text":"Type value associated with this kind of indexer.","title":"type"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.url","text":"URL of the Torznab-compatible indexing site.","title":"url"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.api_path","text":"Tornab API endpoint. Usually /api .","title":"api_path"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.categories","text":"Categories to monitor for standard/daily shows. Define as empty to disable. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary","title":"categories"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.anime_categories","text":"Categories to monitor for anime. Values: TV-WEBDL TV-Foreign TV-SD TV-HD TV-UHD TV-Other TV-Sports TV-Anime TV-Documentary","title":"anime_categories"},{"location":"plugins/sonarr/configuration/indexers/#buildarr.plugins.sonarr.config.indexers.TorznabIndexer.additional_parameters","text":"Additional Torznab API parameters.","title":"additional_parameters"},{"location":"plugins/sonarr/configuration/media-management/","text":"Media Management # Bases: SonarrConfigBase Naming, file management and root folder configuration. sonarr: settings: media_management: ... For more information on how to configure these options correctly, refer to these guides from WikiArr and TRaSH-Guides . rename_episodes: bool = False class-attribute # Rename imported files to the defined standard format. Sonarr will use the existing file name if renaming is disabled. replace_illegal_characters: bool = True class-attribute # Replace illegal characters within the file name. If set to False , Sonarr will remove them instead. standard_episode_format: NonEmptyStr = '{Series TitleYear} - S{season:00}E{episode:00} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{ Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}' class-attribute # File renaming format for a standard episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. daily_episode_format: NonEmptyStr = '{Series TitleYear} - {Air-Date} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}{[Mediainfo AudioCodec}{ Mediainfo AudioChannels]}{MediaInfo AudioLanguages}{[MediaInfo VideoCodec]}{-Release Group}' class-attribute # File renaming format for a daily episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. anime_episode_format: NonEmptyStr = '{Series TitleYear} - S{season:00}E{episode:00} - {absolute:000} - {Episode CleanTitle} [{Preferred Words }{Quality Full}]{[MediaInfo VideoDynamicRangeType]}[{MediaInfo VideoBitDepth}bit]{[MediaInfo VideoCodec]}[{Mediainfo AudioCodec} { Mediainfo AudioChannels}]{MediaInfo AudioLanguages}{-Release Group}' class-attribute # File renaming format for an anime episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. series_folder_format: NonEmptyStr = '{Series TitleYear}' class-attribute # Renaming format for a series folder. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. season_folder_format: NonEmptyStr = 'Season {season:00}' class-attribute # Renaming format for a season folder of a series. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. specials_folder_format: NonEmptyStr = 'Specials' class-attribute # Renaming format for a specials folder of a series. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file. multiepisode_style: MultiEpisodeStyle = MultiEpisodeStyle.range class-attribute # Formatting style for the episode numbers of a multi-episode media file. create_empty_series_folders: bool = False class-attribute # Create missing series folders during disk scan. delete_empty_folders: bool = False class-attribute # Delete empty series and season folders during disk scan and when episode files are deleted. episode_title_required: EpisodeTitleRequired = EpisodeTitleRequired.always class-attribute # Prevent importing for up to 48 hours if the episode title is in the naming format and the episode title is TBA. Values: always bulk-season-releases never sonarr: settings: media_management: episode_title_required: \"always\" skip_free_space_check: bool = False class-attribute # Skip the free space check for the series root folder. Only enable when Sonarr is unable to detect free space from your series root folder. minimum_free_space: int = Field(100, ge=0) class-attribute # Prevent import if it would leave less than the specified amount of disk space (in megabytes) available. use_hardlinks: bool = True class-attribute # Use hard links when trying to copy files from torrents that are still being seeded. Occasionally, file locks may prevent renaming files that are being seeded. You may temporarily disable seeding and use Sonarr's rename function as a work around. import_extra_files: bool = False class-attribute # Import matching extra files (subtitles, .nfo file, etc) after importing an episode file. unmonitor_deleted_episodes: bool = False class-attribute # Episodes deleted from disk are automatically unmonitored in Sonarr. propers_and_repacks: PropersAndRepacks = PropersAndRepacks.do_not_prefer class-attribute # Whether or not to automatically upgrade to Propers/Repacks. Values: prefer-and-upgrade do-not-upgrade-automatically do-not-prefer sonarr: settings: media_management: propers_and_repacks: \"do-not-prefer\" Use 'Do not Prefer' to sort by preferred word score over propers/repacks. Use 'Prefer and Upgrade' for automatic upgrades to propers/repacks. analyze_video_files: bool = True class-attribute # Extract video information such as resolution, runtime and codec information from files. This requires Sonarr to read parts of the file, which may cause high disk or network activity during scans. rescan_series_folder_after_refresh: RescanSeriesFolderAfterRefresh = RescanSeriesFolderAfterRefresh.always class-attribute # Rescan the series folder after refreshing the series. Values: always after_manual_refresh never sonarr: settings: media_management: rescan_series_folder_after_refresh: \"always\" NOTE: Sonarr will not automatically detect changes to files if this option is not set to always . change_file_date: ChangeFileDate = ChangeFileDate.none class-attribute # Change file date on import/rescan. Values: none local-air-date utc-air-date sonarr: settings: media_management: change_file_date: \"none\" recycling_bin: Optional[NonEmptyStr] = None class-attribute # Episode files will go here when deleted instead of being permanently deleted. recycling_bin_cleanup: int = Field(7, ge=0) class-attribute # Files in the recycle bin older than the selected number of days will be cleaned up automatically. Set to 0 to disable automatic cleanup. set_permissions: bool = False class-attribute # Set whether or not chmod should run when files are imported/renamed. If you're unsure what this and the chmod / chown series of attributes do, do not alter them. chmod_folder: ChmodFolder = ChmodFolder.drwxr_xr_x class-attribute # Permissions to set on media folders and files during import/rename. File permissions are set without execute bits. This only works if the user running Sonarr is the owner of the file. It's better to ensure the download client sets the permissions properly. Values: drwxr-xr-x / 755 drwxrwxr-x / 775 drwxrwx--- / 770 drwxr-x--- / 750 drwxrwxrwx / 777 sonarr: settings: media_management: chmod_folder: \"drwxr-xr-x\" chown_group: Optional[NonEmptyStr] = None class-attribute # Group name or gid. Use gid for remote file systems. This only works if the user running Sonarr is the owner of the file. It's better to ensure the download client uses the same group as Sonarr. root_folders: List[NonEmptyStr] = [] class-attribute # This allows you to create a root path for a place to either place new imported downloads, or to allow Sonarr to scan existing media. sonarr: settings: media_management: root_folders: - \"/path/to/rootfolder\"","title":"Media Management"},{"location":"plugins/sonarr/configuration/media-management/#media-management","text":"Bases: SonarrConfigBase Naming, file management and root folder configuration. sonarr: settings: media_management: ... For more information on how to configure these options correctly, refer to these guides from WikiArr and TRaSH-Guides .","title":"Media Management"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.rename_episodes","text":"Rename imported files to the defined standard format. Sonarr will use the existing file name if renaming is disabled.","title":"rename_episodes"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.replace_illegal_characters","text":"Replace illegal characters within the file name. If set to False , Sonarr will remove them instead.","title":"replace_illegal_characters"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.standard_episode_format","text":"File renaming format for a standard episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"standard_episode_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.daily_episode_format","text":"File renaming format for a daily episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"daily_episode_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.anime_episode_format","text":"File renaming format for an anime episode file. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"anime_episode_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.series_folder_format","text":"Renaming format for a series folder. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"series_folder_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.season_folder_format","text":"Renaming format for a season folder of a series. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"season_folder_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.specials_folder_format","text":"Renaming format for a specials folder of a series. The default specified here is the current TRaSH-Guides recommended format, but it will not be applied to the Sonarr instance unless it is explicitly defined in the configuration file.","title":"specials_folder_format"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.multiepisode_style","text":"Formatting style for the episode numbers of a multi-episode media file.","title":"multiepisode_style"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.create_empty_series_folders","text":"Create missing series folders during disk scan.","title":"create_empty_series_folders"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.delete_empty_folders","text":"Delete empty series and season folders during disk scan and when episode files are deleted.","title":"delete_empty_folders"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.episode_title_required","text":"Prevent importing for up to 48 hours if the episode title is in the naming format and the episode title is TBA. Values: always bulk-season-releases never sonarr: settings: media_management: episode_title_required: \"always\"","title":"episode_title_required"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.skip_free_space_check","text":"Skip the free space check for the series root folder. Only enable when Sonarr is unable to detect free space from your series root folder.","title":"skip_free_space_check"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.minimum_free_space","text":"Prevent import if it would leave less than the specified amount of disk space (in megabytes) available.","title":"minimum_free_space"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.use_hardlinks","text":"Use hard links when trying to copy files from torrents that are still being seeded. Occasionally, file locks may prevent renaming files that are being seeded. You may temporarily disable seeding and use Sonarr's rename function as a work around.","title":"use_hardlinks"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.import_extra_files","text":"Import matching extra files (subtitles, .nfo file, etc) after importing an episode file.","title":"import_extra_files"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.unmonitor_deleted_episodes","text":"Episodes deleted from disk are automatically unmonitored in Sonarr.","title":"unmonitor_deleted_episodes"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.propers_and_repacks","text":"Whether or not to automatically upgrade to Propers/Repacks. Values: prefer-and-upgrade do-not-upgrade-automatically do-not-prefer sonarr: settings: media_management: propers_and_repacks: \"do-not-prefer\" Use 'Do not Prefer' to sort by preferred word score over propers/repacks. Use 'Prefer and Upgrade' for automatic upgrades to propers/repacks.","title":"propers_and_repacks"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.analyze_video_files","text":"Extract video information such as resolution, runtime and codec information from files. This requires Sonarr to read parts of the file, which may cause high disk or network activity during scans.","title":"analyze_video_files"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.rescan_series_folder_after_refresh","text":"Rescan the series folder after refreshing the series. Values: always after_manual_refresh never sonarr: settings: media_management: rescan_series_folder_after_refresh: \"always\" NOTE: Sonarr will not automatically detect changes to files if this option is not set to always .","title":"rescan_series_folder_after_refresh"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.change_file_date","text":"Change file date on import/rescan. Values: none local-air-date utc-air-date sonarr: settings: media_management: change_file_date: \"none\"","title":"change_file_date"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.recycling_bin","text":"Episode files will go here when deleted instead of being permanently deleted.","title":"recycling_bin"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.recycling_bin_cleanup","text":"Files in the recycle bin older than the selected number of days will be cleaned up automatically. Set to 0 to disable automatic cleanup.","title":"recycling_bin_cleanup"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.set_permissions","text":"Set whether or not chmod should run when files are imported/renamed. If you're unsure what this and the chmod / chown series of attributes do, do not alter them.","title":"set_permissions"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.chmod_folder","text":"Permissions to set on media folders and files during import/rename. File permissions are set without execute bits. This only works if the user running Sonarr is the owner of the file. It's better to ensure the download client sets the permissions properly. Values: drwxr-xr-x / 755 drwxrwxr-x / 775 drwxrwx--- / 770 drwxr-x--- / 750 drwxrwxrwx / 777 sonarr: settings: media_management: chmod_folder: \"drwxr-xr-x\"","title":"chmod_folder"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.chown_group","text":"Group name or gid. Use gid for remote file systems. This only works if the user running Sonarr is the owner of the file. It's better to ensure the download client uses the same group as Sonarr.","title":"chown_group"},{"location":"plugins/sonarr/configuration/media-management/#buildarr.plugins.sonarr.config.media_management.SonarrMediaManagementSettingsConfig.root_folders","text":"This allows you to create a root path for a place to either place new imported downloads, or to allow Sonarr to scan existing media. sonarr: settings: media_management: root_folders: - \"/path/to/rootfolder\"","title":"root_folders"},{"location":"plugins/sonarr/configuration/metadata/","text":"Metadata # Sonarr can output metadata alongside media files in a variety of formats to suit the media playing being users. Multiple of these can be configured at a time. To enable a metadata format, set enable to true in the configuration block in Buildarr. Kodi (XBMC) / Emby # Bases: Metadata Output metadata files in a format suitable for Kodi (XBMC) or Emby. sonarr: settings: metadata: kodi_emby: enable: true series_metadata: true series_metadata_url: true episode_metadata: true series_images: true season_images: true episode_images: true series_metadata: bool = False class-attribute # Create tvshow.nfo with full series metadata. series_metadata_url: bool = False class-attribute # Add the TVDB show URL to tvshow.nfo . Can be combined with series_metadata . episode_metadata: bool = False class-attribute # Create episode-specific metadata as <filename>.nfo . series_images: bool = False class-attribute # Save series images to fanart.jpg , poster.jpg and banner.jpg . season_images: bool = False class-attribute # Save season images to season##-poster.jpg / season-specials-poster.jpg and season##-banner.jpg / season-specials-banner.jpg . episode_images: bool = False class-attribute # Save episode images to <filename>-thumb.jpg . Roksbox # Bases: Metadata Output metadata files in a format suitable for Roksbox. sonarr: settings: metadata: roksbox: enable: true episode_metadata: true series_images: true season_images: true episode_images: true episode_metadata: bool = False class-attribute # Create episode-specific metadata as Season##/<filename>.xml . series_images: bool = False class-attribute # Save series images to <Series Title>.jpg . season_images: bool = False class-attribute # Save season images to Season ##.jpg . episode_images: bool = False class-attribute # Save episode images to Season##/<filename>.jpg . WDTV # Bases: Metadata Output metadata files in a format suitable for WDTV. sonarr: settings: metadata: wdtv: enable: true episode_metadata: true series_images: true season_images: true episode_images: true episode_metadata: bool = False class-attribute # Create episode-specific metadata as <filename>.nfo . series_images: bool = False class-attribute # Save series images to fanart.jpg , poster.jpg and banner.jpg . season_images: bool = False class-attribute # Save as images to season##-poster.jpg / season-specials-poster.jpg and season##-banner.jpg / season-specials-banner.jpg . episode_images: bool = False class-attribute # Save episode images to <filename>-thumb.jpg .","title":"Metadata"},{"location":"plugins/sonarr/configuration/metadata/#metadata","text":"Sonarr can output metadata alongside media files in a variety of formats to suit the media playing being users. Multiple of these can be configured at a time. To enable a metadata format, set enable to true in the configuration block in Buildarr.","title":"Metadata"},{"location":"plugins/sonarr/configuration/metadata/#kodi-xbmc-emby","text":"Bases: Metadata Output metadata files in a format suitable for Kodi (XBMC) or Emby. sonarr: settings: metadata: kodi_emby: enable: true series_metadata: true series_metadata_url: true episode_metadata: true series_images: true season_images: true episode_images: true","title":"Kodi (XBMC) / Emby"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.series_metadata","text":"Create tvshow.nfo with full series metadata.","title":"series_metadata"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.series_metadata_url","text":"Add the TVDB show URL to tvshow.nfo . Can be combined with series_metadata .","title":"series_metadata_url"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.episode_metadata","text":"Create episode-specific metadata as <filename>.nfo .","title":"episode_metadata"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.series_images","text":"Save series images to fanart.jpg , poster.jpg and banner.jpg .","title":"series_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.season_images","text":"Save season images to season##-poster.jpg / season-specials-poster.jpg and season##-banner.jpg / season-specials-banner.jpg .","title":"season_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.KodiEmbyMetadata.episode_images","text":"Save episode images to <filename>-thumb.jpg .","title":"episode_images"},{"location":"plugins/sonarr/configuration/metadata/#roksbox","text":"Bases: Metadata Output metadata files in a format suitable for Roksbox. sonarr: settings: metadata: roksbox: enable: true episode_metadata: true series_images: true season_images: true episode_images: true","title":"Roksbox"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.RoksboxMetadata.episode_metadata","text":"Create episode-specific metadata as Season##/<filename>.xml .","title":"episode_metadata"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.RoksboxMetadata.series_images","text":"Save series images to <Series Title>.jpg .","title":"series_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.RoksboxMetadata.season_images","text":"Save season images to Season ##.jpg .","title":"season_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.RoksboxMetadata.episode_images","text":"Save episode images to Season##/<filename>.jpg .","title":"episode_images"},{"location":"plugins/sonarr/configuration/metadata/#wdtv","text":"Bases: Metadata Output metadata files in a format suitable for WDTV. sonarr: settings: metadata: wdtv: enable: true episode_metadata: true series_images: true season_images: true episode_images: true","title":"WDTV"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.WdtvMetadata.episode_metadata","text":"Create episode-specific metadata as <filename>.nfo .","title":"episode_metadata"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.WdtvMetadata.series_images","text":"Save series images to fanart.jpg , poster.jpg and banner.jpg .","title":"series_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.WdtvMetadata.season_images","text":"Save as images to season##-poster.jpg / season-specials-poster.jpg and season##-banner.jpg / season-specials-banner.jpg .","title":"season_images"},{"location":"plugins/sonarr/configuration/metadata/#buildarr.plugins.sonarr.config.metadata.WdtvMetadata.episode_images","text":"Save episode images to <filename>-thumb.jpg .","title":"episode_images"},{"location":"plugins/sonarr/configuration/quality/","text":"Quality # Bases: ConfigBase Quality definitions are used to set the permitted bit rates for each quality level. These can either be set manually within Buildarr, or pre-made profiles can be imported from TRaSH-Guides. sonarr: settings: quality: trash_id: \"bef99584217af744e404ed44a33af589\" # series definitions: Bluray-480p: # \"Quality\" column name (not \"Title\") min: 2 max: 100 # Add additional override quality definitions here Quality definition profiles retrieved from TRaSH-Guides are automatically kept up to date by Buildarr, with the latest values being pushed to Sonarr on an update run. For more information, refer to the guides from WikiArr and TRaSH-Guides . trash_id: Optional[TrashID] = None class-attribute # Trash ID of the TRaSH-Guides quality definition profile to load default values from. If there is an update in the profile, the quality definitions will be updated accordingly. definitions: Dict[str, QualityDefinition] = {} class-attribute # Explicitly set quality definitions here. The key of the definition is the \"Quality\" column of the Quality Definitions page in Sonarr, not \"Title\". If trash_id is set, any values set here will override the default values provided from the TRaSH-Guides quality definition profile. If trash_id is not set, only explicitly defined quality definitions are managed, and quality definitions not set within Buildarr are left unmodified. Setting quality definitions # Bases: SonarrConfigBase Manually set quality definitions can have the following parameters. title: Optional[str] = None class-attribute # The name of the quality in the GUI. If unset, set to an empty string or None , it will always be set to the name of the quality itself. (e.g. For the Bluray-480p quality, the GUI title will also be Bluray-480p ) min: float = Field(Ellipsis, ge=0, le=399) class-attribute # The minimum Megabytes per Minute (MB/min) a quality can have. Must be set at least 1MB/min lower than max . max: Optional[Annotated[float, Field(ge=1, lt=400)]] class-attribute # The maximum Megabytes per Minute (MB/min) a quality can have. Must be set at least 1MB/min higher than min . If set to None , the maximum bit rate will be unlimited. TRaSH-Guides quality definition profiles # TRaSH-Guides quality definition profiles for Sonarr are tracked here . Trash IDs: bef99584217af744e404ed44a33af589 (Series) 387e6278d8e06083d813358762e0ac63 (Anime)","title":"Quality"},{"location":"plugins/sonarr/configuration/quality/#quality","text":"Bases: ConfigBase Quality definitions are used to set the permitted bit rates for each quality level. These can either be set manually within Buildarr, or pre-made profiles can be imported from TRaSH-Guides. sonarr: settings: quality: trash_id: \"bef99584217af744e404ed44a33af589\" # series definitions: Bluray-480p: # \"Quality\" column name (not \"Title\") min: 2 max: 100 # Add additional override quality definitions here Quality definition profiles retrieved from TRaSH-Guides are automatically kept up to date by Buildarr, with the latest values being pushed to Sonarr on an update run. For more information, refer to the guides from WikiArr and TRaSH-Guides .","title":"Quality"},{"location":"plugins/sonarr/configuration/quality/#buildarr.plugins.sonarr.config.quality.SonarrQualitySettingsConfig.trash_id","text":"Trash ID of the TRaSH-Guides quality definition profile to load default values from. If there is an update in the profile, the quality definitions will be updated accordingly.","title":"trash_id"},{"location":"plugins/sonarr/configuration/quality/#buildarr.plugins.sonarr.config.quality.SonarrQualitySettingsConfig.definitions","text":"Explicitly set quality definitions here. The key of the definition is the \"Quality\" column of the Quality Definitions page in Sonarr, not \"Title\". If trash_id is set, any values set here will override the default values provided from the TRaSH-Guides quality definition profile. If trash_id is not set, only explicitly defined quality definitions are managed, and quality definitions not set within Buildarr are left unmodified.","title":"definitions"},{"location":"plugins/sonarr/configuration/quality/#setting-quality-definitions","text":"Bases: SonarrConfigBase Manually set quality definitions can have the following parameters.","title":"Setting quality definitions"},{"location":"plugins/sonarr/configuration/quality/#buildarr.plugins.sonarr.config.quality.QualityDefinition.title","text":"The name of the quality in the GUI. If unset, set to an empty string or None , it will always be set to the name of the quality itself. (e.g. For the Bluray-480p quality, the GUI title will also be Bluray-480p )","title":"title"},{"location":"plugins/sonarr/configuration/quality/#buildarr.plugins.sonarr.config.quality.QualityDefinition.min","text":"The minimum Megabytes per Minute (MB/min) a quality can have. Must be set at least 1MB/min lower than max .","title":"min"},{"location":"plugins/sonarr/configuration/quality/#buildarr.plugins.sonarr.config.quality.QualityDefinition.max","text":"The maximum Megabytes per Minute (MB/min) a quality can have. Must be set at least 1MB/min higher than min . If set to None , the maximum bit rate will be unlimited.","title":"max"},{"location":"plugins/sonarr/configuration/quality/#trash-guides-quality-definition-profiles","text":"TRaSH-Guides quality definition profiles for Sonarr are tracked here . Trash IDs: bef99584217af744e404ed44a33af589 (Series) 387e6278d8e06083d813358762e0ac63 (Anime)","title":"TRaSH-Guides quality definition profiles"},{"location":"plugins/sonarr/configuration/tags/","text":"Tags # Bases: SonarrConfigBase Tags are used to associate media files with certain resources (e.g. release profiles). sonarr: settings: tags: definitions: - \"example1\" - \"example2\" To be able to use those tags in Buildarr, they need to be defined in this configuration section. delete_unused: bool = False class-attribute # Delete tags that are not used by any resource in Buildarr. Note that tags not being used in Buildarr are not necessarily unused by Sonarr, so be careful about when to use this option. Sonarr appears to periodically clean up unused tags, so in most cases there is no need to enable this option. definitions: List[NonEmptyStr] = [] class-attribute # Define tags that are used within Buildarr here. If they are not defined here, you may get errors resulting from non-existent tags from either Buildarr or Sonarr.","title":"Tags"},{"location":"plugins/sonarr/configuration/tags/#tags","text":"Bases: SonarrConfigBase Tags are used to associate media files with certain resources (e.g. release profiles). sonarr: settings: tags: definitions: - \"example1\" - \"example2\" To be able to use those tags in Buildarr, they need to be defined in this configuration section.","title":"Tags"},{"location":"plugins/sonarr/configuration/tags/#buildarr.plugins.sonarr.config.tags.SonarrTagsSettingsConfig.delete_unused","text":"Delete tags that are not used by any resource in Buildarr. Note that tags not being used in Buildarr are not necessarily unused by Sonarr, so be careful about when to use this option. Sonarr appears to periodically clean up unused tags, so in most cases there is no need to enable this option.","title":"delete_unused"},{"location":"plugins/sonarr/configuration/tags/#buildarr.plugins.sonarr.config.tags.SonarrTagsSettingsConfig.definitions","text":"Define tags that are used within Buildarr here. If they are not defined here, you may get errors resulting from non-existent tags from either Buildarr or Sonarr.","title":"definitions"},{"location":"plugins/sonarr/configuration/ui/","text":"UI # Bases: SonarrConfigBase Sonarr user interface configuration can also be set directly from Buildarr. sonarr: settings: ui: first_day_of_week: \"monday\" week_column_header: \"day-first\" short_date_format: \"word-month-second\" long_date_format: \"day-first\" time_format: \"twentyfour-hour\" show_relative_dates: true enable_color_impaired_mode: false first_day_of_week: FirstDayOfWeek = FirstDayOfWeek.sunday class-attribute # The first day of the week that Sonarr will show in the calendar. Values: sunday - Sunday monday - Monday week_column_header: WeekColumnHeader = WeekColumnHeader.month_first class-attribute # The format of the date in columns when \"Week\" is the active view in the calendar. Values: month-first - Print month first (e.g. Tue 3/25) month-first-padded - Print month first with padded numbers (e.g. Tue 03/25) day-first - Print day first with padded numbers (e.g. Tue 25/3) day-first-padded - Print day first with padded numbers (e.g. Tue 25/03) short_date_format: ShortDateFormat = ShortDateFormat.word_month_first class-attribute # The format of short dates in the user interface. Values: word-month-first - Month as word, print month first (e.g. Mar 4 2014) word-month-second - Month as word, print month second (e.g. 4 Mar 2014) slash-month-first - Slash-separated date, print month first (e.g. 03/4/2014) slash-month-first-padded - Slash-separated date, print month first (e.g. 03/04/2014) slash-day-first - Slash-separated date, print day first (e.g. 04/03/2014) iso8601 - ISO-8601 date (e.g. 2014-03-04) long_date_format: LongDateFormat = LongDateFormat.month_first class-attribute # The format of long dates in the user interface. Values: month-first - Print month first (e.g. Tuesday, March 4 2014) day-first - Print day first (e.g. Tuesday, 4 March 2014) time_format: TimeFormat = TimeFormat.twelve_hour class-attribute # The format of time in the user information. Values: twelve-hour - 12-hour time (e.g. 5pm/5:30pm) twentyfour-hour - 24-hour time (e.g. 17:00/17:30) show_relative_dates: bool = True class-attribute # When set to True , Sonarr will show relative dates (e.g. today, yesterday) instead of absolute dates (e.g. Monday, Tuesday ...). enable_color_impaired_mode: bool = False class-attribute # Enable an altered view style to allow colour-impaired users to better distinguish colour-coded information.","title":"UI"},{"location":"plugins/sonarr/configuration/ui/#ui","text":"Bases: SonarrConfigBase Sonarr user interface configuration can also be set directly from Buildarr. sonarr: settings: ui: first_day_of_week: \"monday\" week_column_header: \"day-first\" short_date_format: \"word-month-second\" long_date_format: \"day-first\" time_format: \"twentyfour-hour\" show_relative_dates: true enable_color_impaired_mode: false","title":"UI"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.first_day_of_week","text":"The first day of the week that Sonarr will show in the calendar. Values: sunday - Sunday monday - Monday","title":"first_day_of_week"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.week_column_header","text":"The format of the date in columns when \"Week\" is the active view in the calendar. Values: month-first - Print month first (e.g. Tue 3/25) month-first-padded - Print month first with padded numbers (e.g. Tue 03/25) day-first - Print day first with padded numbers (e.g. Tue 25/3) day-first-padded - Print day first with padded numbers (e.g. Tue 25/03)","title":"week_column_header"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.short_date_format","text":"The format of short dates in the user interface. Values: word-month-first - Month as word, print month first (e.g. Mar 4 2014) word-month-second - Month as word, print month second (e.g. 4 Mar 2014) slash-month-first - Slash-separated date, print month first (e.g. 03/4/2014) slash-month-first-padded - Slash-separated date, print month first (e.g. 03/04/2014) slash-day-first - Slash-separated date, print day first (e.g. 04/03/2014) iso8601 - ISO-8601 date (e.g. 2014-03-04)","title":"short_date_format"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.long_date_format","text":"The format of long dates in the user interface. Values: month-first - Print month first (e.g. Tuesday, March 4 2014) day-first - Print day first (e.g. Tuesday, 4 March 2014)","title":"long_date_format"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.time_format","text":"The format of time in the user information. Values: twelve-hour - 12-hour time (e.g. 5pm/5:30pm) twentyfour-hour - 24-hour time (e.g. 17:00/17:30)","title":"time_format"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.show_relative_dates","text":"When set to True , Sonarr will show relative dates (e.g. today, yesterday) instead of absolute dates (e.g. Monday, Tuesday ...).","title":"show_relative_dates"},{"location":"plugins/sonarr/configuration/ui/#buildarr.plugins.sonarr.config.ui.SonarrUISettingsConfig.enable_color_impaired_mode","text":"Enable an altered view style to allow colour-impaired users to better distinguish colour-coded information.","title":"enable_color_impaired_mode"},{"location":"plugins/sonarr/configuration/profiles/delay/","text":"Delay Profiles # Delay profiles allow you to reduce the number of releases that will be downloaded for an episode by adding a delay while Sonarr continues to watch for releases that better match your preferences. sonarr: settings: profiles: delay_profiles: # Set to `true` or `false` as desired. (Default `false`) # Works a bit differently to other profile types, see # the `delete_unmanaged` attribute docs. delete_unmanaged: true definitions: # Ordered in priority, highest priority first. - preferred_protocol: \"usenet-prefer\" usenet_delay: 0 torrent_delay: 0 bypass_if_highest_quality: true tags: - \"tv-shows\" # Add additional delay profiles here as needed. ... # Default delay profile goes last, and MUST be defined # if you have defined any other delay profiles. - preferred_protocol: \"torrent-prefer\" usenet_delay: 1440 torrent_delay: 1440 bypass_if_highest_quality: false # Tags will be ignored for default delay profile. In Buildarr, due to the unique way how delay profiles work, they are defined using an ordered list structure, prioritised from first to last (top to bottom). The last delay profile in the list is assumed to be the default delay profile. Every non-default delay profile must have tags defined, and the default delay profile must have no tags defined. For more information, see this guide from WikiArr . General configuration # Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles delay profiles. delete_unmanaged = False class-attribute # Controls how Buildarr manages existing delay profiles in Sonarr when no delay profiles are defined in Buildarr. When set to True and there are no delay profiles defined in Buildarr, delete all delay profiles except the default delay profile (which can't be deleted). When set to False and there are no delay profiles defined in Buildarr, do not modify the existing delay profiles in Sonarr at all. Due to the unique way delay profiles are structured, when they are defined in Buildarr, they always overwrite the existing delay profiles on the remote Sonarr instance and configure it exactly as laid out in Buildarr, irrespective of this value. If unsure, leave this value set to False . definitions: List[DelayProfile] = [] class-attribute # Define delay profiles to configure on Sonarr here. The final delay profile in the list is assumed to be the default delay profile. Creating a delay profile # Bases: SonarrConfigBase Delay profiles are defined as an ordered list of objects. A preferred protocol must be specified for all delay profiles. Tags must be defined on all except the final profile (the default profile), where tags must not be defined. ... delay_profiles: definitions: # Ordered in priority, highest priority first. - preferred_protocol: \"usenet-prefer\" # Required usenet_delay: 0 torrent_delay: 0 bypass_if_highest_quality: true tags: - \"tv-shows\" # Add additional delay profiles here as needed. ... # Default delay profile goes last, and MUST be defined # if you have defined any other delay profiles. - preferred_protocol: \"torrent-prefer\" # Required usenet_delay: 1440 torrent_delay: 1440 bypass_if_highest_quality: false # Tags will be ignored for default delay profile. preferred_protocol: PreferredProtocol class-attribute # Choose which protocol(s) to use and which one is preferred when choosing between otherwise equal releases. Values: usenet-prefer (Prefer Usenet) torrent-prefer (Prefer Torrent) usenet-only (Only Usenet) torrent-only (Only Torrent) usenet_delay: int = Field(0, ge=0) class-attribute # Delay (in minutes) to wait before grabbing a release from Usenet. torrent_delay: int = Field(0, ge=0) class-attribute # Delay (in minutes) to wait before grabbing a torrent. bypass_if_highest_quality: bool = False class-attribute # Bypass the delay if a found release is the highest quality allowed in the quality profile that applies to it, and uses the preferred protocol as defined in this delay profile. tags: Set[NonEmptyStr] = set() class-attribute # Tags to assign to this delay profile. This delay profile will apply to series with at least one matching tag.","title":"Delay Profiles"},{"location":"plugins/sonarr/configuration/profiles/delay/#delay-profiles","text":"Delay profiles allow you to reduce the number of releases that will be downloaded for an episode by adding a delay while Sonarr continues to watch for releases that better match your preferences. sonarr: settings: profiles: delay_profiles: # Set to `true` or `false` as desired. (Default `false`) # Works a bit differently to other profile types, see # the `delete_unmanaged` attribute docs. delete_unmanaged: true definitions: # Ordered in priority, highest priority first. - preferred_protocol: \"usenet-prefer\" usenet_delay: 0 torrent_delay: 0 bypass_if_highest_quality: true tags: - \"tv-shows\" # Add additional delay profiles here as needed. ... # Default delay profile goes last, and MUST be defined # if you have defined any other delay profiles. - preferred_protocol: \"torrent-prefer\" usenet_delay: 1440 torrent_delay: 1440 bypass_if_highest_quality: false # Tags will be ignored for default delay profile. In Buildarr, due to the unique way how delay profiles work, they are defined using an ordered list structure, prioritised from first to last (top to bottom). The last delay profile in the list is assumed to be the default delay profile. Every non-default delay profile must have tags defined, and the default delay profile must have no tags defined. For more information, see this guide from WikiArr .","title":"Delay Profiles"},{"location":"plugins/sonarr/configuration/profiles/delay/#general-configuration","text":"Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles delay profiles.","title":"General configuration"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.SonarrDelayProfilesSettingsConfig.delete_unmanaged","text":"Controls how Buildarr manages existing delay profiles in Sonarr when no delay profiles are defined in Buildarr. When set to True and there are no delay profiles defined in Buildarr, delete all delay profiles except the default delay profile (which can't be deleted). When set to False and there are no delay profiles defined in Buildarr, do not modify the existing delay profiles in Sonarr at all. Due to the unique way delay profiles are structured, when they are defined in Buildarr, they always overwrite the existing delay profiles on the remote Sonarr instance and configure it exactly as laid out in Buildarr, irrespective of this value. If unsure, leave this value set to False .","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.SonarrDelayProfilesSettingsConfig.definitions","text":"Define delay profiles to configure on Sonarr here. The final delay profile in the list is assumed to be the default delay profile.","title":"definitions"},{"location":"plugins/sonarr/configuration/profiles/delay/#creating-a-delay-profile","text":"Bases: SonarrConfigBase Delay profiles are defined as an ordered list of objects. A preferred protocol must be specified for all delay profiles. Tags must be defined on all except the final profile (the default profile), where tags must not be defined. ... delay_profiles: definitions: # Ordered in priority, highest priority first. - preferred_protocol: \"usenet-prefer\" # Required usenet_delay: 0 torrent_delay: 0 bypass_if_highest_quality: true tags: - \"tv-shows\" # Add additional delay profiles here as needed. ... # Default delay profile goes last, and MUST be defined # if you have defined any other delay profiles. - preferred_protocol: \"torrent-prefer\" # Required usenet_delay: 1440 torrent_delay: 1440 bypass_if_highest_quality: false # Tags will be ignored for default delay profile.","title":"Creating a delay profile"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.DelayProfile.preferred_protocol","text":"Choose which protocol(s) to use and which one is preferred when choosing between otherwise equal releases. Values: usenet-prefer (Prefer Usenet) torrent-prefer (Prefer Torrent) usenet-only (Only Usenet) torrent-only (Only Torrent)","title":"preferred_protocol"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.DelayProfile.usenet_delay","text":"Delay (in minutes) to wait before grabbing a release from Usenet.","title":"usenet_delay"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.DelayProfile.torrent_delay","text":"Delay (in minutes) to wait before grabbing a torrent.","title":"torrent_delay"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.DelayProfile.bypass_if_highest_quality","text":"Bypass the delay if a found release is the highest quality allowed in the quality profile that applies to it, and uses the preferred protocol as defined in this delay profile.","title":"bypass_if_highest_quality"},{"location":"plugins/sonarr/configuration/profiles/delay/#buildarr.plugins.sonarr.config.profiles.delay.DelayProfile.tags","text":"Tags to assign to this delay profile. This delay profile will apply to series with at least one matching tag.","title":"tags"},{"location":"plugins/sonarr/configuration/profiles/language/","text":"Language Profiles # Language profiles define preferred audio languages for media files, and tell Sonarr how media files should be upgraded if a more preferred language version becomes available. sonarr: settings: profiles: language_profiles: # Set to `true` or `false` as desired. (Default `false`) delete_unmanaged: true definitions: # Add language profiles here. # The name of the block becomes the name of the quality profile. Anime: upgrades_allowed: true upgrade_until: \"Japanese\" # Highest priority quality first, lowest priority goes last. qualities: - \"Japanese\" - \"English\" # Add additional language profiles here as needed. In Buildarr, language profiles are defined using a dictonary structure. The languages listed in the languages attribute are enabled, and prioritised from first to last (top to bottom). Languages not in this list are not selected for download. For more information, see this guide from WikiArr . General configuration # Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles language profiles. delete_unmanaged = False class-attribute # Automatically delete language profiles not defined in Buildarr. definitions: Dict[str, LanguageProfile] = {} class-attribute # Define language profiles to configure on Sonarr here. If there are no language profiles defined and delete_unmanaged is False , Buildarr will not modify existing language profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged . Creating a language profile # Bases: SonarrConfigBase A language profile is defined under the language_profiles block as shown below. ... language_profiles: definitions: Anime: # Name of the language profile upgrades_allowed: true upgrade_until: \"Japanese\" # Required if upgrades are allowed qualities: # Required - \"Japanese\" - \"English\" upgrades_allowed: bool = False class-attribute # Enable automatic upgrading if a version of a media file in a more preferred language becomes available. If disabled, languages will not be upgraded. upgrade_until: Optional[Language] = None class-attribute # The highest priority language to upgrade an episode to. Usually this would be set to the highest priority language in the profile. This attribute is required if upgrades_allowed is set to True . languages: Annotated[List[Language], Field(min_items=1)] class-attribute # The languages episodes are allowed to be in. The order of the list determines priority (highest priority first, lowest priority last). Use the name of the language in English (e.g. Japanese , not Nihongo or \u65e5\u672c\u8a9e ). ... languages: - \"Japanese\" - \"English\" At least one language must be specified. Available languages # Bases: ConfigEnum These are the available languages that can be selected in a language profile. Arabic Bulgarian Chinese Czech Danish Dutch English Finnish Flemish French German Greek Hebrew Hindi Hungarian Icelandic Italian Japanese Korean Lithuanian Malayalam Norwegian Polish Portuguese Russian Spanish Swedish Turkish Ukrainian Vietnamese","title":"Language Profiles"},{"location":"plugins/sonarr/configuration/profiles/language/#language-profiles","text":"Language profiles define preferred audio languages for media files, and tell Sonarr how media files should be upgraded if a more preferred language version becomes available. sonarr: settings: profiles: language_profiles: # Set to `true` or `false` as desired. (Default `false`) delete_unmanaged: true definitions: # Add language profiles here. # The name of the block becomes the name of the quality profile. Anime: upgrades_allowed: true upgrade_until: \"Japanese\" # Highest priority quality first, lowest priority goes last. qualities: - \"Japanese\" - \"English\" # Add additional language profiles here as needed. In Buildarr, language profiles are defined using a dictonary structure. The languages listed in the languages attribute are enabled, and prioritised from first to last (top to bottom). Languages not in this list are not selected for download. For more information, see this guide from WikiArr .","title":"Language Profiles"},{"location":"plugins/sonarr/configuration/profiles/language/#general-configuration","text":"Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles language profiles.","title":"General configuration"},{"location":"plugins/sonarr/configuration/profiles/language/#buildarr.plugins.sonarr.config.profiles.language.SonarrLanguageProfilesSettingsConfig.delete_unmanaged","text":"Automatically delete language profiles not defined in Buildarr.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/profiles/language/#buildarr.plugins.sonarr.config.profiles.language.SonarrLanguageProfilesSettingsConfig.definitions","text":"Define language profiles to configure on Sonarr here. If there are no language profiles defined and delete_unmanaged is False , Buildarr will not modify existing language profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged .","title":"definitions"},{"location":"plugins/sonarr/configuration/profiles/language/#creating-a-language-profile","text":"Bases: SonarrConfigBase A language profile is defined under the language_profiles block as shown below. ... language_profiles: definitions: Anime: # Name of the language profile upgrades_allowed: true upgrade_until: \"Japanese\" # Required if upgrades are allowed qualities: # Required - \"Japanese\" - \"English\"","title":"Creating a language profile"},{"location":"plugins/sonarr/configuration/profiles/language/#buildarr.plugins.sonarr.config.profiles.language.LanguageProfile.upgrades_allowed","text":"Enable automatic upgrading if a version of a media file in a more preferred language becomes available. If disabled, languages will not be upgraded.","title":"upgrades_allowed"},{"location":"plugins/sonarr/configuration/profiles/language/#buildarr.plugins.sonarr.config.profiles.language.LanguageProfile.upgrade_until","text":"The highest priority language to upgrade an episode to. Usually this would be set to the highest priority language in the profile. This attribute is required if upgrades_allowed is set to True .","title":"upgrade_until"},{"location":"plugins/sonarr/configuration/profiles/language/#buildarr.plugins.sonarr.config.profiles.language.LanguageProfile.languages","text":"The languages episodes are allowed to be in. The order of the list determines priority (highest priority first, lowest priority last). Use the name of the language in English (e.g. Japanese , not Nihongo or \u65e5\u672c\u8a9e ). ... languages: - \"Japanese\" - \"English\" At least one language must be specified.","title":"languages"},{"location":"plugins/sonarr/configuration/profiles/language/#available-languages","text":"Bases: ConfigEnum These are the available languages that can be selected in a language profile. Arabic Bulgarian Chinese Czech Danish Dutch English Finnish Flemish French German Greek Hebrew Hindi Hungarian Icelandic Italian Japanese Korean Lithuanian Malayalam Norwegian Polish Portuguese Russian Spanish Swedish Turkish Ukrainian Vietnamese","title":"Available languages"},{"location":"plugins/sonarr/configuration/profiles/quality/","text":"Quality Profiles # Quality profiles determine the allowed quality levels for media, and the behaviour of how to upgrade media files if higher quality versions become available. Within a quality profile you set upgrade settings, the maximum quality level to automatically upgrade media to, the allowed quality levels, and the priority given to those quality levels. sonarr: settings: profiles: quality_profiles: # Set to `true` or `false` as desired. (Default `false`) delete_unmanaged: true definitions: # Add Quality profiles here. # The name of the block becomes the name of the quality profile. SDTV: upgrades_allowed: true upgrade_until: \"Bluray-1080p\" # Highest priority quality first, lowest priority goes last. qualities: - \"Bluray-480p\" - \"DVD\" - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" - \"SDTV\" # Add additional quality profiles here as needed. In Buildarr, quality profiles are defined using a dictonary structure. The quality levels listed in the qualities attribute are the qualities to enable, and are prioritised from first to last (top to bottom). Quality groups, where multiple qualities are given the same priority level, can also be defined. General configuration # Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles quality profiles. delete_unmanaged: bool = False class-attribute # Automatically delete quality profiles not defined in Buildarr. Out of the box Sonarr provides some pre-defined quality profiles. Take care when enabling this option, as those will also be deleted. definitions: Dict[str, QualityProfile] = {} class-attribute # Define quality profiles to configure on Sonarr here. If there are no quality profiles defined and delete_unmanaged is False , Buildarr will not modify existing quality profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged . Creating a quality profile # Bases: SonarrConfigBase The main things to consider when creating a quality profile are what quality settings to enable, and how to prioritise each. ... quality_profiles: SDTV: upgrades_allowed: true upgrade_until: \"Bluray-1080p\" qualities: - \"Bluray-480p\" - \"DVD\" - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" - \"SDTV\" In Buildarr, the quality listed first (at the top) is given the highest priority, with subsequent qualities given lower priority. Qualities not explicitly defined are disabled (not downloaded). Sonarr supports grouping multiple qualities together to give them the same priority. In Buildarr, these are expressed by giving a name to the group, and listing the qualities under the members attribute. For more insight into reasonable values for quality profiles, refer to these guides from WikiArr and TRaSH-Guides ( WEB-DL , anime ). upgrades_allowed: bool = False class-attribute # Enable automatic upgrading if a higher quality version of the media file becomes available. If disabled, media files will not be upgraded after they have been downloaded. upgrade_until: Optional[NonEmptyStr] = None class-attribute # The maximum quality level to upgrade an episode to. For a quality group, specify the group name. Once this quality is reached Sonarr will no longer download episodes. This attribute is required if upgrades_allowed is set to True . qualities: Annotated[List[Union[str, QualityGroup]], Field(min_items=1)] class-attribute # The qualities to enable downloading episodes for. The order determines the priority (highest priority first, lowest priority last). Individual qualities can be specified using the name (e.g. Bluray-480p ). Qualities can also be grouped together in a structure to give them the same priority level. A new version of the episode will not be downloaded if it is at least one of the qualities listed in the group, until a higher quality version is found. ... qualities: - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" At least one quality must be specified.","title":"Quality Profiles"},{"location":"plugins/sonarr/configuration/profiles/quality/#quality-profiles","text":"Quality profiles determine the allowed quality levels for media, and the behaviour of how to upgrade media files if higher quality versions become available. Within a quality profile you set upgrade settings, the maximum quality level to automatically upgrade media to, the allowed quality levels, and the priority given to those quality levels. sonarr: settings: profiles: quality_profiles: # Set to `true` or `false` as desired. (Default `false`) delete_unmanaged: true definitions: # Add Quality profiles here. # The name of the block becomes the name of the quality profile. SDTV: upgrades_allowed: true upgrade_until: \"Bluray-1080p\" # Highest priority quality first, lowest priority goes last. qualities: - \"Bluray-480p\" - \"DVD\" - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" - \"SDTV\" # Add additional quality profiles here as needed. In Buildarr, quality profiles are defined using a dictonary structure. The quality levels listed in the qualities attribute are the qualities to enable, and are prioritised from first to last (top to bottom). Quality groups, where multiple qualities are given the same priority level, can also be defined.","title":"Quality Profiles"},{"location":"plugins/sonarr/configuration/profiles/quality/#general-configuration","text":"Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles quality profiles.","title":"General configuration"},{"location":"plugins/sonarr/configuration/profiles/quality/#buildarr.plugins.sonarr.config.profiles.quality.SonarrQualityProfilesSettingsConfig.delete_unmanaged","text":"Automatically delete quality profiles not defined in Buildarr. Out of the box Sonarr provides some pre-defined quality profiles. Take care when enabling this option, as those will also be deleted.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/profiles/quality/#buildarr.plugins.sonarr.config.profiles.quality.SonarrQualityProfilesSettingsConfig.definitions","text":"Define quality profiles to configure on Sonarr here. If there are no quality profiles defined and delete_unmanaged is False , Buildarr will not modify existing quality profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged .","title":"definitions"},{"location":"plugins/sonarr/configuration/profiles/quality/#creating-a-quality-profile","text":"Bases: SonarrConfigBase The main things to consider when creating a quality profile are what quality settings to enable, and how to prioritise each. ... quality_profiles: SDTV: upgrades_allowed: true upgrade_until: \"Bluray-1080p\" qualities: - \"Bluray-480p\" - \"DVD\" - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" - \"SDTV\" In Buildarr, the quality listed first (at the top) is given the highest priority, with subsequent qualities given lower priority. Qualities not explicitly defined are disabled (not downloaded). Sonarr supports grouping multiple qualities together to give them the same priority. In Buildarr, these are expressed by giving a name to the group, and listing the qualities under the members attribute. For more insight into reasonable values for quality profiles, refer to these guides from WikiArr and TRaSH-Guides ( WEB-DL , anime ).","title":"Creating a quality profile"},{"location":"plugins/sonarr/configuration/profiles/quality/#buildarr.plugins.sonarr.config.profiles.quality.QualityProfile.upgrades_allowed","text":"Enable automatic upgrading if a higher quality version of the media file becomes available. If disabled, media files will not be upgraded after they have been downloaded.","title":"upgrades_allowed"},{"location":"plugins/sonarr/configuration/profiles/quality/#buildarr.plugins.sonarr.config.profiles.quality.QualityProfile.upgrade_until","text":"The maximum quality level to upgrade an episode to. For a quality group, specify the group name. Once this quality is reached Sonarr will no longer download episodes. This attribute is required if upgrades_allowed is set to True .","title":"upgrade_until"},{"location":"plugins/sonarr/configuration/profiles/quality/#buildarr.plugins.sonarr.config.profiles.quality.QualityProfile.qualities","text":"The qualities to enable downloading episodes for. The order determines the priority (highest priority first, lowest priority last). Individual qualities can be specified using the name (e.g. Bluray-480p ). Qualities can also be grouped together in a structure to give them the same priority level. A new version of the episode will not be downloaded if it is at least one of the qualities listed in the group, until a higher quality version is found. ... qualities: - name: \"WEB 480p\" members: - \"WEBDL-480p\" - \"WEBRip-480p\" At least one quality must be specified.","title":"qualities"},{"location":"plugins/sonarr/configuration/profiles/release/","text":"Release Profiles # Release profiles are used to select releases to download that best fit the criteria for what you want to retrieve for your media library. Since not all releases are created equal, and each release group has their own way of packaging and encoding their material, being able to dial-in what Sonarr selects is important to getting good results. sonarr: settings: profiles: release_profiles: definitions: Example: must_contain: - '\\.*\\.mkv$/i' must_not_contain: - '-FAKEGROUP' preferred: - term: '/\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i' score: 100 - term: '/(-BRiNK|-CHX|-GHOSTS|-EVO|)\\b/i' score: -10000 Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 In Buildarr, release profiles are defined using a dictonary structure. Each profile has either a set of filters determining the kind of releases that should be prioritised (or ignored), or a reference to an external provider of pre-made release profiles like TRaSH-Guides. For more information on release profiles, refer to this page on WikiArr . General configuration # Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles release profiles. delete_unmanaged: bool = False class-attribute # Automatically delete release profiles not defined in Buildarr. definitions: Dict[str, ReleaseProfile] = {} class-attribute # Define release profiles to configure on Sonarr here. If there are no release profiles defined and delete_unmanaged is False , Buildarr will not modify existing release profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged . Creating a release profile # Release profiles are defined in Sonarr like this. sonarr: settings: profiles: release_profiles: definitions: Example: must_contain: - '\\.*\\.mkv$/i' must_not_contain: - '-FAKEGROUP' preferred: - term: '/\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i' score: 100 - term: '/(-BRiNK|-CHX|-GHOSTS|-EVO|)\\b/i' score: -10000 The below attributes are common to all release profiles. Bases: SonarrConfigBase enable: bool = True class-attribute # Enable the release profile in Sonarr. If set to False , the release profile will be uploaded to Sonarr, but inactive. include_preferred_when_renaming: bool = False class-attribute # Add preferred words to the file name as {Preferred Words} when doing automatic renaming in Sonarr. indexer: Optional[NonEmptyStr] = None class-attribute # When set to None or an empty string, use any available indexer. tags: Set[NonEmptyStr] = set() class-attribute # A list of one or more strings representing tags that will be applied to this release profile. All tags on an existing release profile (if present) are removed and replaced with only the tags in this list. If an empty list is explicitly defined, no tags will be set on the release profile, and any existing tags (if present) are removed. Manually defining filters # When not importing release profiles from external sources like TRaSH-Guides, settings for how to prefer and ignore releases must be defined within the release profile using the following parameters. Bases: SonarrConfigBase must_contain: Set[NonEmptyStr] = set() class-attribute # A list of terms to mark as \"Must Contain\" in Sonarr. The release will be rejected if it does not contain one or more of terms (case insensitive) or regular expressions. must_not_contain: Set[NonEmptyStr] = set() class-attribute # A list of terms to mark as \"Must Not Contain\" in Sonarr. The release will be rejected if it contains one or more of terms (case insensitive) or regular expressions. preferred: List[PreferredWord] = [] class-attribute # Assign a score to terms (or a regular expression patterns) found in the file name of a release, and prefer it or not prefer it depending on the result of comparing a release file name against all terms. ... release_profiles: Example: preferred: - term: \"/\b(amzn|amazon)\b(?=[ ._-]web[ ._-]?(dl|rip)\b)/i\" score: 100 - term: \"/(-BRiNK|-CHX|-GHOSTS|-EVO|)\b/i\" score: -10000 The release will be preferred based on each term's score. Positive scores will be more preferred, and negative scores will be less preferred. Importing release profiles from TRaSH-Guides # TRaSH-Guides maintains a list of release profiles for a variety of use cases. Release Profile RegEx (WEB-DL) Release Profile RegEx (Anime) Buildarr supports downloading these release profiles from the TRaSH-Guides metadata repository , and pushing the latest changes to Sonarr directly, without having to manually input them. sonarr: settings: profiles: release_profiles: definitions: Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 When using imported release profiles, the filters within the release profile itself cannot be modified, but there are some customisation options that alter how Buildarr interprets them. These are identical to the customisation options for release profiles provided by Recyclarr . Bases: SonarrConfigBase trash_id: Optional[TrashID] = None class-attribute # The trash ID of the release profile to import from TRaSH-Guides metadata. If not specified, Buildarr assumes the release profile filters are manually defined. filter: TrashFilter = TrashFilter() class-attribute # Bases: SonarrConfigBase Defines various ways that release profile terms from the guide are synchronised with Sonarr. These terms have individual trash IDs, and using this filter allows you to pick and choose which parts of the release profile you want to use. ... release_profiles: definitions: Optionals: trash_id: 76e060895c5b8a765c310933da0a5357 filter: include: - ea83f4740cec4df8112f3d6dd7c82751 # Prefer Season Packs - cec8880b847dd5d31d29167ee0112b57 # Ignore 720p/1080p HEVC (Golden Rule) # All the other preferred words in the 'Optionals' profile # are ignored. The attributes include and exclude are mutually exclusive. If both are defined, include is used. include: List[TrashID] = [] class-attribute # A list of trash_id values representing terms ( Required , Ignored , or Preferred ) that should be included in the created Release Profile in Sonarr. Terms that are not specified here are excluded automatically. exclude: List[TrashID] = [] class-attribute # A list of trash_id values representing terms ( Required , Ignored , or Preferred ) that should be excluded from the created Release Profile in Sonarr. Terms that are not specified here are included automatically. strict_negative_scores: bool = False class-attribute # Enables preferred term scores less than 0 to be instead treated as \"Must Not Contain\" (ignored) terms. For example, if something is \"Preferred\" with a score of -10, it will instead be put in the \"Must Not Contain\" section of the uploaded release profile. TRaSH-Guides release profile import examples # Here are some examples of importing well used release profiles from TRaSH-Guides. Release Profile RegEx (WEB-DL) # sonarr: settings: profiles: release_profiles: definitions: Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 Low Quality Groups: trash_id: EBC725268D687D588A20CBC5F97E538B Optionals: trash_id: 76e060895c5b8a765c310933da0a5357 filter: include: - ea83f4740cec4df8112f3d6dd7c82751 # Prefer Season Packs - 6f2aefa61342a63387f2a90489e90790 # Dislike renamed/retagged releases - 19cd5ecc0a24bf493a75e80a51974cdd # Dislike retagged/obfuscated groups - 6a7b462c6caee4a991a9d8aa38ce2405 # Dislike release ending: en - 236a3626a07cacf5692c73cc947bc280 # Dislike release containing: 1- - cec8880b847dd5d31d29167ee0112b57 # Ignore 720p/1080p HEVC re-encodes (Golden Rule) - 436f5a7d08fbf02ba25cb5e5dfe98e55 # Ignore Dolby Vision without HDR10 fallback - f3f0f3691c6a1988d4a02963e69d11f2 # Ignore The Group -SCENE - 5bc23c3a055a1a5d8bbe4fb49d80e0cb # Ignore so-called scene releases - 538bad00ee6f8aced8e0db5218b8484c # Ignore Bad Dual Audio Groups - 4861d8238f9234606df6721df6e27deb # Ignore AV1 Release Profile RegEx (Anime) # sonarr: settings: profiles: release_profiles: definitions: Anime Profile 1: # * Prefer uncensored # * Prefer Multi-Audio or Dual-Audio # https://trash-guides.info/Sonarr/Sonarr-Release-Profile-RegEx-Anime/#first-release-profile trash_id: d428eda85af1df8904b4bbe4fc2f537c strict_negative_scores: true Anime Profile 2: # Prioritise/ignore releases based on group. # You may need to adjust the profile based on actual results. # https://trash-guides.info/Sonarr/Sonarr-Release-Profile-RegEx-Anime/#second-release-profile trash_id: 6cd9e10bb5bb4c63d2d7cd3279924c7b strict_negative_scores: true","title":"Release Profiles"},{"location":"plugins/sonarr/configuration/profiles/release/#release-profiles","text":"Release profiles are used to select releases to download that best fit the criteria for what you want to retrieve for your media library. Since not all releases are created equal, and each release group has their own way of packaging and encoding their material, being able to dial-in what Sonarr selects is important to getting good results. sonarr: settings: profiles: release_profiles: definitions: Example: must_contain: - '\\.*\\.mkv$/i' must_not_contain: - '-FAKEGROUP' preferred: - term: '/\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i' score: 100 - term: '/(-BRiNK|-CHX|-GHOSTS|-EVO|)\\b/i' score: -10000 Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 In Buildarr, release profiles are defined using a dictonary structure. Each profile has either a set of filters determining the kind of releases that should be prioritised (or ignored), or a reference to an external provider of pre-made release profiles like TRaSH-Guides. For more information on release profiles, refer to this page on WikiArr .","title":"Release Profiles"},{"location":"plugins/sonarr/configuration/profiles/release/#general-configuration","text":"Bases: SonarrConfigBase Configuration parameters for controlling how Buildarr handles release profiles.","title":"General configuration"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.SonarrReleaseProfilesSettingsConfig.delete_unmanaged","text":"Automatically delete release profiles not defined in Buildarr.","title":"delete_unmanaged"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.SonarrReleaseProfilesSettingsConfig.definitions","text":"Define release profiles to configure on Sonarr here. If there are no release profiles defined and delete_unmanaged is False , Buildarr will not modify existing release profiles, but if delete_unmanaged is True , Buildarr will delete all existing profiles. Be careful when using delete_unmanaged .","title":"definitions"},{"location":"plugins/sonarr/configuration/profiles/release/#creating-a-release-profile","text":"Release profiles are defined in Sonarr like this. sonarr: settings: profiles: release_profiles: definitions: Example: must_contain: - '\\.*\\.mkv$/i' must_not_contain: - '-FAKEGROUP' preferred: - term: '/\\b(amzn|amazon)\\b(?=[ ._-]web[ ._-]?(dl|rip)\\b)/i' score: 100 - term: '/(-BRiNK|-CHX|-GHOSTS|-EVO|)\\b/i' score: -10000 The below attributes are common to all release profiles. Bases: SonarrConfigBase","title":"Creating a release profile"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.enable","text":"Enable the release profile in Sonarr. If set to False , the release profile will be uploaded to Sonarr, but inactive.","title":"enable"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.include_preferred_when_renaming","text":"Add preferred words to the file name as {Preferred Words} when doing automatic renaming in Sonarr.","title":"include_preferred_when_renaming"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.indexer","text":"When set to None or an empty string, use any available indexer.","title":"indexer"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.tags","text":"A list of one or more strings representing tags that will be applied to this release profile. All tags on an existing release profile (if present) are removed and replaced with only the tags in this list. If an empty list is explicitly defined, no tags will be set on the release profile, and any existing tags (if present) are removed.","title":"tags"},{"location":"plugins/sonarr/configuration/profiles/release/#manually-defining-filters","text":"When not importing release profiles from external sources like TRaSH-Guides, settings for how to prefer and ignore releases must be defined within the release profile using the following parameters. Bases: SonarrConfigBase","title":"Manually defining filters"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.must_contain","text":"A list of terms to mark as \"Must Contain\" in Sonarr. The release will be rejected if it does not contain one or more of terms (case insensitive) or regular expressions.","title":"must_contain"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.must_not_contain","text":"A list of terms to mark as \"Must Not Contain\" in Sonarr. The release will be rejected if it contains one or more of terms (case insensitive) or regular expressions.","title":"must_not_contain"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.preferred","text":"Assign a score to terms (or a regular expression patterns) found in the file name of a release, and prefer it or not prefer it depending on the result of comparing a release file name against all terms. ... release_profiles: Example: preferred: - term: \"/\b(amzn|amazon)\b(?=[ ._-]web[ ._-]?(dl|rip)\b)/i\" score: 100 - term: \"/(-BRiNK|-CHX|-GHOSTS|-EVO|)\b/i\" score: -10000 The release will be preferred based on each term's score. Positive scores will be more preferred, and negative scores will be less preferred.","title":"preferred"},{"location":"plugins/sonarr/configuration/profiles/release/#importing-release-profiles-from-trash-guides","text":"TRaSH-Guides maintains a list of release profiles for a variety of use cases. Release Profile RegEx (WEB-DL) Release Profile RegEx (Anime) Buildarr supports downloading these release profiles from the TRaSH-Guides metadata repository , and pushing the latest changes to Sonarr directly, without having to manually input them. sonarr: settings: profiles: release_profiles: definitions: Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 When using imported release profiles, the filters within the release profile itself cannot be modified, but there are some customisation options that alter how Buildarr interprets them. These are identical to the customisation options for release profiles provided by Recyclarr . Bases: SonarrConfigBase","title":"Importing release profiles from TRaSH-Guides"},{"location":"plugins/sonarr/configuration/profiles/release/#buildarr.plugins.sonarr.config.profiles.release.ReleaseProfile.strict_negative_scores","text":"Enables preferred term scores less than 0 to be instead treated as \"Must Not Contain\" (ignored) terms. For example, if something is \"Preferred\" with a score of -10, it will instead be put in the \"Must Not Contain\" section of the uploaded release profile.","title":"strict_negative_scores"},{"location":"plugins/sonarr/configuration/profiles/release/#trash-guides-release-profile-import-examples","text":"Here are some examples of importing well used release profiles from TRaSH-Guides.","title":"TRaSH-Guides release profile import examples"},{"location":"plugins/sonarr/configuration/profiles/release/#release-profile-regex-web-dl","text":"sonarr: settings: profiles: release_profiles: definitions: Release Sources (Streaming Service): trash_id: 1B018E0C53EC825085DD911102E2CA36 P2P Groups + Repack/Proper: trash_id: 71899E6C303A07AF0E4746EFF9873532 Low Quality Groups: trash_id: EBC725268D687D588A20CBC5F97E538B Optionals: trash_id: 76e060895c5b8a765c310933da0a5357 filter: include: - ea83f4740cec4df8112f3d6dd7c82751 # Prefer Season Packs - 6f2aefa61342a63387f2a90489e90790 # Dislike renamed/retagged releases - 19cd5ecc0a24bf493a75e80a51974cdd # Dislike retagged/obfuscated groups - 6a7b462c6caee4a991a9d8aa38ce2405 # Dislike release ending: en - 236a3626a07cacf5692c73cc947bc280 # Dislike release containing: 1- - cec8880b847dd5d31d29167ee0112b57 # Ignore 720p/1080p HEVC re-encodes (Golden Rule) - 436f5a7d08fbf02ba25cb5e5dfe98e55 # Ignore Dolby Vision without HDR10 fallback - f3f0f3691c6a1988d4a02963e69d11f2 # Ignore The Group -SCENE - 5bc23c3a055a1a5d8bbe4fb49d80e0cb # Ignore so-called scene releases - 538bad00ee6f8aced8e0db5218b8484c # Ignore Bad Dual Audio Groups - 4861d8238f9234606df6721df6e27deb # Ignore AV1","title":"Release Profile RegEx (WEB-DL)"},{"location":"plugins/sonarr/configuration/profiles/release/#release-profile-regex-anime","text":"sonarr: settings: profiles: release_profiles: definitions: Anime Profile 1: # * Prefer uncensored # * Prefer Multi-Audio or Dual-Audio # https://trash-guides.info/Sonarr/Sonarr-Release-Profile-RegEx-Anime/#first-release-profile trash_id: d428eda85af1df8904b4bbe4fc2f537c strict_negative_scores: true Anime Profile 2: # Prioritise/ignore releases based on group. # You may need to adjust the profile based on actual results. # https://trash-guides.info/Sonarr/Sonarr-Release-Profile-RegEx-Anime/#second-release-profile trash_id: 6cd9e10bb5bb4c63d2d7cd3279924c7b strict_negative_scores: true","title":"Release Profile RegEx (Anime)"}]}